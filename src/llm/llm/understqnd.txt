stage(mindstage): 聊天行为树/图的 某个状态节点。 包含 ?    System Prompt, Plugin
3种: 等待用户输入(dialogue)、LLM Chain计算、人类可编程Code执行 
1-N个stage构成的workflow即为mindflow


用户只能感知到dialogue stage

mindflow的thought: 一个mindflow有一个thought，保存跨stage的数据（动态属性、外部知识、对话记忆）。每个stage在运行时可读thought，生成prompt; 可写thought。

Context: 一个runtime一个，跨task的全局上下文和事件记录，每个stage产生的memories都会往里存 == Runtime thought

Runtime: 

Reaction: stage到stage跳转，可以具体执行operator操作，和actions,workflow一样都是Plugin，只不过reactions代表的plugin是反向跳到stage之上，重新走调度
常见的Reactions (
    Staging: 指向一个具体的stage节点，用schema描述跳转到这个stage的入参
    Rewind: 重置本论对话状态，Thought不做任何变更
    Restart: 重新回到Mindflow的起点
)



-- Operator: jump，回滚等
Messenger: 嵌套流处理


思维节点：workflow里的概念，之前LLM的输入+某个schema类型的描述，输出是这个schema类型的数据，然后执行function


mindflow和workflow的区别：mindflow偏重决策，workflow偏重计算.
mindflow的输入多源，输入不完备，起点和终点不确定。而workflow输入完备，起点终点确定。因为workflow非常确定，所以可以用DAG拓扑排序，并行 优化。
workflow没有决策过程, 不要求运行中的用户输入。
决策的最大特点是知道起点，但不知道终点和执行路径



mindflow存在的价值：
1. 方便设计复杂系统
2. 方便阅读理解复杂系统
3. 方便维护复杂系统
4. 节省总Tokens
5. 可理解，可单测
6. 为self-planning的meta mindflow做准备


mindflow本质把面向过程的PE变成了OOP的PE

使用mindflow后可以把一个巨型的prompt用分治的思想拆分成很多个状态位，每个有自己独立的prompt体系。







