const e=JSON.parse('{"key":"v-1f1acd79","path":"/llm/open_interpreter.html","title":"Open Interpreter","lang":"en-US","frontmatter":{"description":"Open Interpreter Scope 我们的工作范围是什么？ Open Interpreter 包含两个相互支持的项目，其范围如下： core 项目，致力于研究如何让语言模型安全地控制计算机。目前，这意味着要创建一个语言模型可以操作的实时代码执行环境。 终端接口（terminal_interface），这是一种纯文本方式，供用户指挥运行在core 内的 LLM。这包括将内核连接到各种本地和托管 LLM 的功能（内核本身不应该知道这些 LLM）。 什么不在我们的范围内？ 我们的指导思想是极简主义，因此我们还决定明确将以下内容视为范围之外： 运行代码之外的核心附加功能。 在terminal_interface中与 LLM 进行文本之外的更复杂交互（但文本中可以包含图片或视频等更复杂输入的文件路径）。","head":[["meta",{"property":"og:url","content":"https://liz-in-tech.github.io/pinkpig/llm/open_interpreter.html"}],["meta",{"property":"og:site_name","content":"Liz"}],["meta",{"property":"og:title","content":"Open Interpreter"}],["meta",{"property":"og:description","content":"Open Interpreter Scope 我们的工作范围是什么？ Open Interpreter 包含两个相互支持的项目，其范围如下： core 项目，致力于研究如何让语言模型安全地控制计算机。目前，这意味着要创建一个语言模型可以操作的实时代码执行环境。 终端接口（terminal_interface），这是一种纯文本方式，供用户指挥运行在core 内的 LLM。这包括将内核连接到各种本地和托管 LLM 的功能（内核本身不应该知道这些 LLM）。 什么不在我们的范围内？ 我们的指导思想是极简主义，因此我们还决定明确将以下内容视为范围之外： 运行代码之外的核心附加功能。 在terminal_interface中与 LLM 进行文本之外的更复杂交互（但文本中可以包含图片或视频等更复杂输入的文件路径）。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-12-12T01:12:56.000Z"}],["meta",{"property":"article:author","content":"Liz"}],["meta",{"property":"article:modified_time","content":"2024-12-12T01:12:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Open Interpreter\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-12T01:12:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Liz\\",\\"url\\":\\"https://github.com/liz-in-tech\\"}]}"]]},"headers":[{"level":2,"title":"Scope","slug":"scope","link":"#scope","children":[]}],"git":{"createdTime":1733965976000,"updatedTime":1733965976000,"contributors":[{"name":"unknown","email":"15721607377@163.com","commits":1}]},"readingTime":{"minutes":1.28,"words":385},"filePathRelative":"llm/open_interpreter.md","localizedDate":"December 12, 2024","excerpt":"<h1> Open Interpreter</h1>\\n<h2> Scope</h2>\\n<p>我们的工作范围是什么？\\nOpen Interpreter 包含两个相互支持的项目，其范围如下：\\ncore 项目，致力于研究如何让语言模型安全地控制计算机。目前，这意味着要创建一个语言模型可以操作的实时代码执行环境。\\n终端接口（terminal_interface），这是一种纯文本方式，供用户指挥运行在core 内的 LLM。这包括将内核连接到各种本地和托管 LLM 的功能（内核本身不应该知道这些 LLM）。\\n什么不在我们的范围内？\\n我们的指导思想是极简主义，因此我们还决定明确将以下内容视为范围之外：\\n运行代码之外的核心附加功能。\\n在terminal_interface中与 LLM 进行文本之外的更复杂交互（但文本中可以包含图片或视频等更复杂输入的文件路径）。</p>","autoDesc":true}');export{e as data};
