import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as p,d as t,f as n}from"./app-EOZBWKNC.js";const e="/pinkpig/assets/cumsum-jYRYp0q-.png",o="/pinkpig/assets/product-DbHd5zSe.png",c="/pinkpig/assets/grad-xxE1fjMM.png",l={},i=n('<h1 id="张量tensor操作" tabindex="-1"><a class="header-anchor" href="#张量tensor操作" aria-hidden="true">#</a> 张量Tensor操作</h1><ul><li><ol><li>标量，向量，矩阵与张量</li></ol></li><li><ol start="2"><li>初始化张量</li></ol></li><li><ol start="3"><li>张量的属性</li></ol></li><li><ol start="4"><li>张量的基本运算</li></ol></li><li><ol start="5"><li>求和与求平均值</li></ol></li><li><ol start="6"><li>求乘积</li></ol></li><li><ol start="7"><li>求向量的模/范数</li></ol></li><li><ol start="8"><li>求梯度</li></ol></li></ul>',2),u=n(`<h2 id="_1-标量-向量-矩阵与张量" tabindex="-1"><a class="header-anchor" href="#_1-标量-向量-矩阵与张量" aria-hidden="true">#</a> 1. 标量，向量，矩阵与张量</h2><p>标量是零阶张量，向量是一阶张量，矩阵是二阶张量</p><p>标量、向量、矩阵和张量是线性代数中的基本数学对象，分别具有零、一、二和任意数量的轴</p><h3 id="_1-1-张量-tensor-n维数组" tabindex="-1"><a class="header-anchor" href="#_1-1-张量-tensor-n维数组" aria-hidden="true">#</a> 1.1. 张量（tensor，n维数组）</h3><p>深度学习存储和操作的数据主要是张量（n维数组） 。它提供了各种功能，包括基本数学运算、广播、索引、切片、内存节省和转换其他Python对象。</p><h3 id="_1-2-标量" tabindex="-1"><a class="header-anchor" href="#_1-2-标量" aria-hidden="true">#</a> 1.2. 标量</h3><p>标量scalar：仅包含一个数值，</p><p>标量由只有一个元素的张量表示</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> torch

x <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">)</span> <span class="token comment"># 标量</span>
y <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span>

x <span class="token operator">+</span> y<span class="token punctuation">,</span> x <span class="token operator">*</span> y<span class="token punctuation">,</span> x <span class="token operator">/</span> y<span class="token punctuation">,</span> x<span class="token operator">**</span>y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-向量" tabindex="-1"><a class="header-anchor" href="#_1-3-向量" aria-hidden="true">#</a> 1.3. 向量</h3><p>向量：由标量值组成的列表，每个标量值称为向量的元素element或分量component</p><p>向量由一维张量表示</p><p>向量的长度通常称为向量的<em>维度</em>（dimension）</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment"># 向量</span>
x<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment"># 访问任一元素</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-矩阵" tabindex="-1"><a class="header-anchor" href="#_1-4-矩阵" aria-hidden="true">#</a> 1.4. 矩阵</h3><p>矩阵：表示为具有两个轴的张量</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>A <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment"># 矩阵</span>
B <span class="token operator">=</span> A<span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 通过分配新内存，将A的一个副本分配给B</span>
A <span class="token comment"># 矩阵</span>
A<span class="token punctuation">.</span>T <span class="token comment"># 矩阵的转置</span>
A <span class="token operator">+</span> B <span class="token comment"># 矩阵的加法</span>
A <span class="token operator">*</span> B <span class="token comment"># 矩阵的乘法</span>
a <span class="token operator">=</span> <span class="token number">2</span>
X <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
a <span class="token operator">+</span> X<span class="token punctuation">,</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> X<span class="token punctuation">)</span><span class="token punctuation">.</span>shape <span class="token comment"># 不会改变张量的形状，张量的每个元素都将与标量相加或相乘</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-初始化张量" tabindex="-1"><a class="header-anchor" href="#_2-初始化张量" aria-hidden="true">#</a> 2. 初始化张量</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> torch <span class="token comment"># 虽然它被称为PyTorch，但是代码中使用torch而不是pytorch</span>

<span class="token comment"># 初始化张量</span>
x <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token comment"># 创建一个行向量，元素是从0开始的前12个整数</span>
torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span> <span class="token comment"># arange默认创建为整数，也可指定创建类型为浮点数</span>
A <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment"># 5行4列的形状</span>
B <span class="token operator">=</span> A<span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 通过分配新内存，将A的一个副本分配给B</span>
Y <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 为每个元素赋予确定值。在这里，最外层的列表对应于轴0，内层的列表对应于轴1。</span>
torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 形状为（2,3,4）且元素全为0的张量</span>
torch<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>Y<span class="token punctuation">)</span> <span class="token comment"># 形状和Y一致，元素值全为0</span>
torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 形状为（2,3,4）且元素全为1的张量</span>
torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment"># 形状为（3,4）且元素为标准正态分布的随机采样的张量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-张量的属性" tabindex="-1"><a class="header-anchor" href="#_3-张量的属性" aria-hidden="true">#</a> 3. 张量的属性</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 向量或轴的维度被用来表示向量或轴的长度，即向量或轴的元素数量。</span>
    <span class="token comment"># 然而，张量的维度用来表示张量具有的轴数。 在这个意义上，张量的某个轴的维数就是这个轴的长度。</span>
x<span class="token punctuation">.</span>shape <span class="token comment"># 张量的形状，列出了张量沿每个轴的长度</span>
x<span class="token punctuation">.</span>numel<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 张量中元素的总数</span>
<span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment"># 张量的长度，0轴的长度</span>
x <span class="token operator">=</span> x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment"># 改变一个张量的形状而不改变元素数量和元素值</span>
x <span class="token operator">=</span> x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment"># 我们不需要通过手动指定每个维度来改变形状</span>
x <span class="token operator">=</span> x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># -1会自动计算该维度</span>
<span class="token builtin">id</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment"># 提供了内存中引用对象的确切地址</span>
<span class="token builtin">type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment"># python对象类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-张量的基本运算" tabindex="-1"><a class="header-anchor" href="#_4-张量的基本运算" aria-hidden="true">#</a> 4. 张量的基本运算</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
X <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
Y <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
Z <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>Y<span class="token punctuation">)</span>
a <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 同一形状的张量，按元素运算</span>
    <span class="token comment"># 算术运算（+、-、*、/和**）其中**运算符是求幂运算</span>
    x <span class="token operator">+</span> y<span class="token punctuation">,</span> x <span class="token operator">-</span> y<span class="token punctuation">,</span> x <span class="token operator">*</span> y<span class="token punctuation">,</span> x <span class="token operator">/</span> y<span class="token punctuation">,</span> x <span class="token operator">**</span> y
    <span class="token comment"># 比较运算</span>
    X <span class="token operator">==</span> Y
    X <span class="token operator">&gt;</span> Y
    X <span class="token operator">&lt;</span> Y
<span class="token comment"># 不同形状张量的运算：广播机制</span>
    <span class="token comment"># a和b分别是3*1和1*2矩阵,相加时，会将两个矩阵广播为一个更大的3*2矩阵</span>
    <span class="token comment"># 矩阵a将复制列， 矩阵b将复制行，然后再按元素相加</span>
    a <span class="token operator">+</span> b

<span class="token comment"># 指数运算</span>
torch<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token comment"># 所有元素求和</span>
X<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 连结concatenate</span>
     <span class="token comment"># dim=0,按行连结（轴-0，形状的第一个元素）</span>
     <span class="token comment"># dim=1,按列连结（轴-1，形状的第二个元素）</span>
torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 结果为6*4矩阵</span>
torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 结果为3*8矩阵</span>

<span class="token comment"># 索引和切片</span>
    <span class="token comment"># 第一个元素的索引是0，最后一个元素索引是-1</span>
    <span class="token comment"># 冒号:左右没有值，代表取所有</span>
    <span class="token comment"># X[raw]</span>
    <span class="token comment"># X[raw,colume]</span>
    <span class="token comment"># X[startRaw:endRaw]</span>
    <span class="token comment"># X[startRaw:endRaw,startColume:endColume]（左闭右开，下标从0开始）</span>
    X<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># 0轴最后一个元素</span>
    X<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment"># 0轴第2个和第3个元素</span>
    X<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token comment"># 0轴第2个，1轴第3个的元素</span>
    X<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span> <span class="token comment"># 0轴第1个和第2个，1轴所有的元素</span>

<span class="token comment"># 节省内存</span>
    Y <span class="token operator">=</span> X <span class="token operator">+</span> Y <span class="token comment">#会导致为新结果分配内存，浪费内存</span>
    <span class="token builtin">id</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span> <span class="token comment"># 提供了内存中引用对象的确切地址</span>

    <span class="token comment"># 如果后续不再使用X，可以使用X[:] = X + Y或X += Y来减少操作的内存开销</span>
    Z<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> X <span class="token operator">+</span> Y <span class="token comment">#执行原地操作；使用切片表示法将操作的结果分配给先前分配的数组</span>
    X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> X <span class="token operator">+</span> Y
    X <span class="token operator">+=</span> Y

<span class="token comment">#类型转换，转为其它python对象</span>
    <span class="token comment"># 将深度学习框架定义的张量转换为NumPy张量（ndarray）很容易，反之也同样容易。</span>
    <span class="token comment">#</span>
    <span class="token builtin">type</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token comment"># python对象类型</span>
    A <span class="token operator">=</span> X<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>
    B <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>A<span class="token punctuation">)</span>
    <span class="token builtin">type</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span>
    a <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    a<span class="token punctuation">,</span> a<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment"># 将大小为1的张量转换为Python标量，我们可以调用item函数或Python的内置函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-求和与求平均值" tabindex="-1"><a class="header-anchor" href="#_5-求和与求平均值" aria-hidden="true">#</a> 5. 求和与求平均值</h2><h3 id="_5-1-降维求和与降维求平均值" tabindex="-1"><a class="header-anchor" href="#_5-1-降维求和与降维求平均值" aria-hidden="true">#</a> 5.1. 降维求和与降维求平均值</h3><p>A = torch.arange(20).reshape(5, 4)</p><p><strong>求和sum，求平均值mean均可沿指定轴降低张量的维度</strong></p><p>降维求和：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>A<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 所有元素求和</span>
A<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 所有元素求和 # axis均可用dim替换</span>
A<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 0轴降维求和，原本5行4列，每列的各行相加，现在变成1个轴，也就是1维数组，长度为4</span>
A<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 1轴降维求和，原本5行4列，每行的各列相加，现在变成1个轴，也就是1维数组，长度为5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>降维求平均值：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>A<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 所有元素求平均值</span>
A<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> A<span class="token punctuation">.</span>numel<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 所有元素求平均值   ps.  A.numel() 张量中元素的总数</span>
A<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 0轴降维求平均值</span>
A<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">/</span> A<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># 0轴降维求平均值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-非降维求和-累积求和" tabindex="-1"><a class="header-anchor" href="#_5-2-非降维求和-累积求和" aria-hidden="true">#</a> 5.2. 非降维求和（累积求和）</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>sum_A <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keepdims<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 原本5行4列,依旧保持2个轴，现在变成5行1列</span>
A <span class="token operator">/</span> sum_A <span class="token comment"># A是5行4列，sum_A是5行1列，通过广播将A除以sum_A</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>调用cumsum函数，沿某个轴计算A元素的累积总和，此函数不会沿任何轴降低输入张量的维度</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>A<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
A<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 用axis和dim都行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：每行是上一行和本行的求和结果</p><figure><img src="`+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_6-求乘积" tabindex="-1"><a class="header-anchor" href="#_6-求乘积" aria-hidden="true">#</a> 6. 求乘积</h2><figure><img src="'+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_6-1-向量-向量-点积-dot-product" tabindex="-1"><a class="header-anchor" href="#_6-1-向量-向量-点积-dot-product" aria-hidden="true">#</a> 6.1. 向量*向量（点积，dot product）</h3><p>当权重为非负数且和为1时，点积表示加权平均</p><p>将两个向量规范化得到单位长度后，点积表示它们夹角的余弦</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>torch<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token comment"># 点积</span>
torch<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>x<span class="token operator">*</span>y<span class="token punctuation">)</span> <span class="token comment"># 另一种点积求法：按元素乘法，然后进行求和</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-矩阵-向量-matrix-vector-product" tabindex="-1"><a class="header-anchor" href="#_6-2-矩阵-向量-matrix-vector-product" aria-hidden="true">#</a> 6.2. 矩阵*向量（matrix-vector product）</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>torch<span class="token punctuation">.</span>mv<span class="token punctuation">(</span>A<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token comment"># 矩阵-向量积</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_6-3-矩阵-矩阵-matrix-matrix-multiplication" tabindex="-1"><a class="header-anchor" href="#_6-3-矩阵-矩阵-matrix-matrix-multiplication" aria-hidden="true">#</a> 6.3. 矩阵*矩阵（matrix-matrix multiplication）</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>torch<span class="token punctuation">.</span>mm<span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token comment"># 矩阵-矩阵乘法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_6-4-张量-张量" tabindex="-1"><a class="header-anchor" href="#_6-4-张量-张量" aria-hidden="true">#</a> 6.4. 张量*张量</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>torch<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以利用python中的广播机制，处理一些维度不同的tensor结构进行相乘操作</p><h2 id="_7-求向量的模-又称-向量的长度-向量的范数norm" tabindex="-1"><a class="header-anchor" href="#_7-求向量的模-又称-向量的长度-向量的范数norm" aria-hidden="true">#</a> 7. 求向量的模（又称：向量的长度/向量的范数norm）</h2><h3 id="_7-1-向量每个元素的平方和的平方根-又称-l2范数" tabindex="-1"><a class="header-anchor" href="#_7-1-向量每个元素的平方和的平方根-又称-l2范数" aria-hidden="true">#</a> 7.1. 向量每个元素的平方和的平方根（又称，L<sub>2</sub>范数）</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>u <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
torch<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>u<span class="token punctuation">)</span>  <span class="token comment"># 结果为：tensor(5.)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>深度学习中更经常用L<sub>2</sub>范数的平方。</p><h3 id="_7-2-向量每个元素的绝对值之和-又称-l1范数" tabindex="-1"><a class="header-anchor" href="#_7-2-向量每个元素的绝对值之和-又称-l1范数" aria-hidden="true">#</a> 7.2. 向量每个元素的绝对值之和（又称，L<sub>1</sub>范数）</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>torch<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 结果为：tensor(7.)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_8-求梯度" tabindex="-1"><a class="header-anchor" href="#_8-求梯度" aria-hidden="true">#</a> 8. 求梯度</h2><h3 id="_8-1-微积分" tabindex="-1"><a class="header-anchor" href="#_8-1-微积分" aria-hidden="true">#</a> 8.1. 微积分</h3><p>微分和积分是微积分的两个分支，前者可以应用于深度学习中的优化问题。</p><p>导数可以被解释为函数相对于其变量的瞬时变化率，他也是函数曲线的切线的斜率。</p><p>梯度是一个向量，其分量是多变量函数相对于其所有变量的偏导数。</p><p>链式法则使我们能够对复合函数进行微分。</p><h3 id="_8-2-自动微分" tabindex="-1"><a class="header-anchor" href="#_8-2-自动微分" aria-hidden="true">#</a> 8.2. 自动微分</h3><p>在深度学习中，我们经常需要进行梯度下降优化。这就需要我们计算梯度，也就是函数的导数。在PyTorch中，我们可以使用自动求导机制（autograd）来自动计算梯度。</p><p>在PyTorch中，我们可以设置tensor.requires_grad=True来追踪其上的所有操作。完成计算后，我们可以调用.backward()方法，PyTorch会自动计算和存储梯度。这个梯度可以通过.grad属性进行访问。</p><p>我们首先将梯度附加到想要对其计算偏导数的变量上。然后我们记录目标值的计算，执行它的反向传播函数，即可得到变量的梯度。</p><p>实际中，根据我们设计的模型，系统会构建一个<strong>计算图</strong>（computational graph），来跟踪计算是哪些数据通过哪些操作组合起来产生输出。 自动微分使系统能够随后反向传播梯度。 这里，<strong>反向传播</strong>（backpropagate）意味着跟踪整个计算图，填充关于每个参数的偏导数。 <img src="`+c+'" alt="" loading="lazy"></p><p>这里需要注意：</p><ul><li>将变量设置<code>requires_grad=True</code>来跟踪它的操作，以便后续进行梯度计算。</li><li><code>grad_fn</code>属性代表了张量的梯度函数，当你创建一个Tensor并且设置requires_grad=True，PyTorch会记录所有创建和操作这个Tensor的函数，以便之后进行梯度计算。每当对Tensor进行一个操作，比如加、减、乘、除等，PyTorch会创建一个新的Tensor，并且这个新的Tensor会有一个grad_fn属性。这个属性是一个Function对象，表示了这个Tensor是如何从其他Tensor操作得来的。如果这个Tensor是用户直接创建的（而非由其他Tensor操作得来的），它的grad_fn是None。</li><li>当调用<code>.backward()</code>方法时，pytorch会自动计算梯度，并将它们存储在对应张量的.grad属性中。当你调用.backward()方法进行反向传播时，PyTorch会沿着这个grad_fn链回溯，自动计算梯度。通过这个链条，PyTorch能够知道每个Tensor是如何计算得出的，并计算对应的梯度。这种自动追踪和构建计算图的过程，是PyTorch自动微分（autograd）系统的核心。</li><li><strong>标量</strong>调用backward()方法进行反向传播时不用传任何参数。backward()等同于backward(torch.tensor(1.))。</li><li><strong>非标量</strong>调用backward()方法进行反向传播时，需要传一个gradient参数，这个参数是与你调用backward()的张量形状相同的权重张量。如y.backward(torch.ones_like(y))，这表示对y中每个元素求微分。如<code>v=torch.tensor([0.1, 1.0, 0.5, 0.0001], dtype=torch.float)</code> ,<code>y.backward(v)</code>,<code>x.grad</code>得到的结果为<code>tensor([0.0000e+00, 2.0000e+00, 2.0000e+00, 6.0000e-04]) </code>,表示求出y中每个元素的微分与对应权重的乘积。</li><li>用相同x变量计算多个函数时，注意要<strong>清除</strong>上一个函数计算的梯度。</li></ul>',69);function r(k,d){return a(),p("div",null,[i,t(" more "),u])}const v=s(l,[["render",r],["__file","03_pytorch_operation.html.vue"]]);export{v as default};
