import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o as c,c as r,a as n,b as s,d as t,e as p}from"./app-CV1ZlhnZ.js";const l="/pinkpig/assets/字符串-1-osYECVIa.png",i="/pinkpig/assets/字符串-2-9LC97VPA.png",k="/pinkpig/assets/字符串-3-y5kzKq7U.png",u="/pinkpig/assets/字符串-4-4l0UFcMP.png",d="/pinkpig/assets/字符串-5-L_jpqUSt.png",b={},m=p(`<h1 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h1><h2 id="哈希" tabindex="-1"><a class="header-anchor" href="#哈希" aria-hidden="true">#</a> 哈希</h2><p>假如要把字符串映射到数组中的某个地方: <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        h <span class="token operator">=</span> h <span class="token operator">*</span> <span class="token number">31</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串前缀哈希法 <br> 应用：判断字符串截取两段子串是否相等 <br></p><h2 id="字符串匹配算法" tabindex="-1"><a class="header-anchor" href="#字符串匹配算法" aria-hidden="true">#</a> 字符串匹配算法</h2><h3 id="kmp" tabindex="-1"><a class="header-anchor" href="#kmp" aria-hidden="true">#</a> KMP</h3><p>后缀和前缀相等，长度最大是多少 <br></p><h3 id="boyer-moore" tabindex="-1"><a class="header-anchor" href="#boyer-moore" aria-hidden="true">#</a> Boyer-Moore</h3><h2 id="自动机" tabindex="-1"><a class="header-anchor" href="#自动机" aria-hidden="true">#</a> 自动机</h2><h2 id="ac自动机" tabindex="-1"><a class="header-anchor" href="#ac自动机" aria-hidden="true">#</a> AC自动机</h2><h2 id="后缀数组" tabindex="-1"><a class="header-anchor" href="#后缀数组" aria-hidden="true">#</a> 后缀数组</h2>`,12),h={id:"滑动窗口",tabindex:"-1"},g=n("a",{class:"header-anchor",href:"#滑动窗口","aria-hidden":"true"},"#",-1),v={href:"https://leetcode-cn.com/circle/article/9gcJBk/",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,[s("双指针，左右指针区间[left,right]称为一个窗口，左右指针轮流不断向右滑动。 "),n("br")],-1),f=n("br",null,null,-1),w={href:"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/",target:"_blank",rel:"noopener noreferrer"},y=n("br",null,null,-1),x=n("br",null,null,-1),B=p('<h2 id="字典树-trie树-前缀树" tabindex="-1"><a class="header-anchor" href="#字典树-trie树-前缀树" aria-hidden="true">#</a> 字典树（Trie树，前缀树）</h2><p>Trie树，又称字典树，单词查找树，键树 <br><img src="'+l+'" alt="image.png" loading="lazy"> <br> 高效存储和查找字符串集合的数据结构 <br> 是一种树形结构，是一种哈希树的变种。典型应用是统计和排序大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。 <br><img src="'+i+'" alt="" loading="lazy"> <br> 经典应用，例如搜索 <br> 搜索框输入搜索文字，会罗列以搜索词开头的相关搜索 <br><img src="'+k+'" alt="" loading="lazy"> <br> 核心思想：空间换时间。利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的。 <br> 优点：最大限度的减少无谓的字符串比较，查询效率比哈希表高。 <br> 基本性质： <br> １ 根节点是空的，不包含字符，除根节点外每一个节点都只包含一个字符。 <br> ２ 从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。 <br> ３ 每个节点的所有子节点包含的字符都不相同。 <br> 4 除根节点外每一个节点都可能是单词的结尾，叶子节点一定都是单词的结尾 <br> 5 每个节点至少包含两个基本属性： <br> children：数组或者集合，罗列出每个分支当中包含的所有字符 <br> isEnd：布尔值，表示该节点是否为某字符串的结尾 <br></p><p>基本操作：创建&amp;搜索 <br> 创建步骤： <br> 1 遍历一遍输入的字符串，对每个字符串的字符进行遍历 <br> 2 从前缀树的根节点开始，将每个字符加入到节点的children字符集当中 <br> 3 如果字符集已经包含了这个字符，跳过 <br> 4 如果当前字符是字符串的最后一个，把当前节点的isEnd标记为真 <br> 搜索步骤： <br> 1 从前缀树的根节点出发，逐个匹配输入的前缀字符 <br> 2 如果遇到了，继续往下一层搜索 <br> 3 如果没遇到，立即返回 <br></p><p>代码实现，256指的是ACII码的数量 <br><img src="'+u+'" alt="image.png" loading="lazy"> <br></p><h2 id="后缀树" tabindex="-1"><a class="header-anchor" href="#后缀树" aria-hidden="true">#</a> 后缀树</h2><h2 id="编程题" tabindex="-1"><a class="header-anchor" href="#编程题" aria-hidden="true">#</a> 编程题</h2>',6),I=n("img",{src:d,alt:"image.png",loading:"lazy"},null,-1),q=n("br",null,null,-1),S={href:"https://www.nowcoder.com/exam/test/73467615/detail?pid=5582994&examPageSource=Company&testCallback=https%3A%2F%2Fwww.nowcoder.com%2Fexam%2Fcompany%3FcurrentTab%3Drecommand%26jobId%3D100%26selectStatus%3D0%26tagIds%3D138&testclass=%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91",target:"_blank",rel:"noopener noreferrer"},j=n("br",null,null,-1),E=p(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token comment">// 注意类名必须为 Main, 不要有任何 package xxx 信息 &lt;br/&gt;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token class-name">String</span> s <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token class-name">BigInteger</span> bi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
            bi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bi<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">&quot;25&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token class-name">BigInteger</span> sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
            <span class="token keyword">int</span> k <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
            sum <span class="token operator">=</span> sum<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bi<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
            bi <span class="token operator">=</span> bi<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">&quot;25&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function C(F,A){const a=e("ExternalLinkIcon");return c(),r("div",null,[m,n("h2",h,[g,s(),n("a",v,[s("滑动窗口"),t(a)])]),_,n("p",null,[s("例题： "),f,n("a",w,[s("力扣-无重复字符的最长字串"),t(a)]),s(),y,s(" Note：无重复：可用set存储滑动窗口内的每个字符实现 "),x]),B,n("p",null,[I,s(),q,n("a",S,[s("编码"),t(a)]),s(),j]),E])}const V=o(b,[["render",C],["__file","6.字符串.html.vue"]]);export{V as default};
