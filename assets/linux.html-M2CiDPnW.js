import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as i,e as r}from"./app-vfVXwivP.js";const n="/pinkpig/assets/linux_001-u7Sgqx-e.png",h="/pinkpig/assets/linux_002-ZeCthK1v.png",d="/pinkpig/assets/linux_003-1GUWOLTD.png",t="/pinkpig/assets/linux_004-J1IKwCO8.png",s="/pinkpig/assets/linux_005-OEGl9_IQ.png",o="/pinkpig/assets/linux_006-vXUpv3AJ.png",c={},u=r('<h1 id="linux" tabindex="-1"><a class="header-anchor" href="#linux" aria-hidden="true">#</a> Linux</h1><h2 id="linux概述" tabindex="-1"><a class="header-anchor" href="#linux概述" aria-hidden="true">#</a> Linux概述</h2><p>Linux系统中“一切皆文件”</p><h3 id="虚拟机" tabindex="-1"><a class="header-anchor" href="#虚拟机" aria-hidden="true">#</a> 虚拟机</h3><p>一台虚拟的电脑</p><h4 id="虚拟机软件" tabindex="-1"><a class="header-anchor" href="#虚拟机软件" aria-hidden="true">#</a> 虚拟机软件</h4><h5 id="virtualbox-免费" tabindex="-1"><a class="header-anchor" href="#virtualbox-免费" aria-hidden="true">#</a> VirtualBox（免费）</h5><p>Oracle开发的开源的虚拟化软件</p><p>键盘上有2个ctrl键，右侧的ctrl键用于在虚拟机和真机之间鼠标的切换</p><h6 id="教程-virtualbox安装centos" tabindex="-1"><a class="header-anchor" href="#教程-virtualbox安装centos" aria-hidden="true">#</a> 教程：VirtualBox安装CentOS</h6><p>https://blog.csdn.net/qq_43726042/article/details/105913613</p><p>https://www.ppmy.cn/news/626128.html?action=onClick</p><h5 id="vmware-收费" tabindex="-1"><a class="header-anchor" href="#vmware-收费" aria-hidden="true">#</a> VmWare（收费）</h5><p>一种商业的虚拟化软件</p><h5 id="wsl-windows-subsystem-fot-linux-windows的linux子系统" tabindex="-1"><a class="header-anchor" href="#wsl-windows-subsystem-fot-linux-windows的linux子系统" aria-hidden="true">#</a> WSL（Windows Subsystem fot Linux，Windows的Linux子系统）</h5><p>它并非一个完全的虚拟机，而是提供了一种机制让Windows系统可以直接运行Linux的二进制可执行文件</p><p>微软开发的</p><h4 id="关系" tabindex="-1"><a class="header-anchor" href="#关系" aria-hidden="true">#</a> 关系</h4><h5 id="vmware是安装虚拟机的软件-centos是系统-linux是系统内核" tabindex="-1"><a class="header-anchor" href="#vmware是安装虚拟机的软件-centos是系统-linux是系统内核" aria-hidden="true">#</a> VMware是安装虚拟机的软件；CentOS是系统；Linux是系统内核</h5><p>通过VMware安装CentOS(目前主流版本是CentOS 7 )，VMware是CentOS的容器，CentOS需要在VMware中运行；CentOS就是虚拟机，CentOS与Red Hat（也是一种虚拟机，需要收费）的核心就是Linux；</p><h3 id="linux版本-分为内核版本和发行版本" tabindex="-1"><a class="header-anchor" href="#linux版本-分为内核版本和发行版本" aria-hidden="true">#</a> Linux版本（分为内核版本和发行版本）</h3><h4 id="常见linux发行版" tabindex="-1"><a class="header-anchor" href="#常见linux发行版" aria-hidden="true">#</a> 常见Linux发行版</h4><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>. Ubuntu<br> . Debian<br> . RHEL<br> . Centos<br> . Fedora<br> . Arch<br> . Gentoo<br> . Alibaba Cloud Linux</p><h5 id="一般来说著名的linux发行版基本上分两大类" tabindex="-1"><a class="header-anchor" href="#一般来说著名的linux发行版基本上分两大类" aria-hidden="true">#</a> 一般来说著名的Linux发行版基本上分两大类</h5><h6 id="redhat系列" tabindex="-1"><a class="header-anchor" href="#redhat系列" aria-hidden="true">#</a> RedHat系列</h6><p>使用yum作为包管理器 eg. yum install maven #安装maven yum install git #安装git</p><p>如RHEL（Red Hat Enterprise Linux），CentOS，Fedora等</p><h6 id="debian系列" tabindex="-1"><a class="header-anchor" href="#debian系列" aria-hidden="true">#</a> Debian系列</h6><p>使用apt-get作为包管理器 eg. apt-get install maven #安装maven apt-get install git #安装git</p><p>Debian和Ubuntu是最为常见的使用apt-get作为默认包管理器的Linux系统</p><h5 id="所有的发行版不管是redhat、centos还是ubuntu-其内核都是来自linux内核官网-www-kernel-org-不同发行版之间的差别在于软件管理的不同-所以不管使用哪一个发行版-只要理解其原理之后-各类发行版的区别其实不大。" tabindex="-1"><a class="header-anchor" href="#所有的发行版不管是redhat、centos还是ubuntu-其内核都是来自linux内核官网-www-kernel-org-不同发行版之间的差别在于软件管理的不同-所以不管使用哪一个发行版-只要理解其原理之后-各类发行版的区别其实不大。" aria-hidden="true">#</a> 所有的发行版不管是RedHat、CentOS还是Ubuntu，其内核都是来自Linux内核官网（www.kernel.org），不同发行版之间的差别在于软件管理的不同，所以不管使用哪一个发行版，只要理解其原理之后，各类发行版的区别其实不大。</h5><p>Linux发行版在内核之外，加上了用户空间程序，操作系统等</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="linux特点" tabindex="-1"><a class="header-anchor" href="#linux特点" aria-hidden="true">#</a> Linux特点</h3><h4 id="免费开源" tabindex="-1"><a class="header-anchor" href="#免费开源" aria-hidden="true">#</a> 免费开源</h4><p>Linux是一款完全免费的操作系统，任何人都可以从网络上下载到它的源代码，并可以根据自己的需求进行定制化的开发，而且没有版权限制。</p><h4 id="模块化程度高" tabindex="-1"><a class="header-anchor" href="#模块化程度高" aria-hidden="true">#</a> 模块化程度高</h4><p>Linux的内核设计分成进程管理、内存管理、进程间通信、虚拟文件系统、网络5部分，其采用的模块机制使得用户可以根据实际需要，在内核中插入或移走模块，这使得内核可以被高度的剪裁定制，以方便在不同的场景下使用。</p><h4 id="广泛的硬件支持" tabindex="-1"><a class="header-anchor" href="#广泛的硬件支持" aria-hidden="true">#</a> 广泛的硬件支持</h4><p>得益于其免费开源的特点，有大批程序员不断地向Linux社区提供代码，使得Linux有着异常丰富的设备驱动资源，对主流硬件的支持极好，而且几乎能运行在所有流行的处理器上</p><h4 id="安全稳定" tabindex="-1"><a class="header-anchor" href="#安全稳定" aria-hidden="true">#</a> 安全稳定</h4><p>Linux采取了很多安全技术措施，包括读写权限控制、带保护的子系统、审计跟踪、核心授权等，这为网络环境中的用户提供了安全保障。实际上有很多运行Linux的服务器可以持续运行长达数年而无须重启，依然可以性能良好地提供服务，其安全稳定性已经在各个领域得到了广泛的证实。</p><h4 id="多用户-多任务" tabindex="-1"><a class="header-anchor" href="#多用户-多任务" aria-hidden="true">#</a> 多用户，多任务</h4><p>多用户是指系统资源可以同时被不同的用户使用，每个用户对自己的资源有特定的权限，互不影响。多任务是现代化计算机的主要特点，指的是计算机能同时运行多个程序，且程序之间彼此独立，Linux内核负责调度每个进程，使之平等地访问处理器。由于CPU处理速度极快，从用户的角度来看所有的进程好像在并行运行。</p><h4 id="良好的可移植性" tabindex="-1"><a class="header-anchor" href="#良好的可移植性" aria-hidden="true">#</a> 良好的可移植性</h4><p>Linux中95%以上的代码都是用C语言编写的，由于C语言是一种机器无关的高级语言，是可移植的，因此Linux系统也是可移植的。</p><h3 id="扩展-ssh登录方式" tabindex="-1"><a class="header-anchor" href="#扩展-ssh登录方式" aria-hidden="true">#</a> 扩展：SSH登录方式</h3><p>SSH 全称 Secure Shell,是一种加密的网络传输协议； 可以创建安全的隧道用于客户端与服务器连接； 可以使用非对称加密进行验证从而提升整个连接的安全性；</p><h4 id="实操生成密钥" tabindex="-1"><a class="header-anchor" href="#实操生成密钥" aria-hidden="true">#</a> 实操生成密钥</h4><p>生成密钥：输入 ssh-keygen 命令（Note：命令中没有空格）→选择使用默认的路径→输入密码生成一个新的 ssh 密钥→借助 ssh 密钥登陆到服务器，进行非对称加密，使连接更安全</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>→输入 ls -a 查看所有目录→输入 cd .ssh 进入到 ssh 目录→执行 ls 可以看到在目录下有一个文件记录了授权的信息→使用 nano 加上文件名来编辑这个文件（如果没有 nano 也可以使用 vi 来进行文件的编辑）</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="配置-ssh" tabindex="-1"><a class="header-anchor" href="#配置-ssh" aria-hidden="true">#</a> 配置 SSH</h4><p>使用 cd /etc/ssh进入ssh目录→执行 ls 可以查看配置文件（最为重要的是 sshd_config 文件，记录了一些 ssh 的具体配置项目，比较重要的包括 port） 编辑sshd_config文件：sudo vi sshd_config ， 按字母i进入编辑模式，修改完后，按Esc退出编辑模式，输入:wq退出。<br> Note：需要有root权限才可以修改/etc下的文件，如果是非root用户，需要在命令前加sudo获取root权限。<br> →修改 Port 使 ssh 监听除了22以外的其他端口，（这样可以使用自己定义的端口从而避免被他人爆破（爆破：暴力破解）)<br> →将 PermitRootLogin 设置为 yes（表明默认允许使用 Root 用户登录）.<br> 注意：在实际生产环境，我们推荐大家默认禁止使用 Root 用户登录，而使用其他权限更低的用户登录进行日常操作，仅在必要时刻选择使用 Root 用户<br> → PasswordAuthentication 为密码验证，这里设置为 no 是一种比较安全的方式，如果设置为 yes，则允许用户通过密码进行登录，将其设置为 no 则需要通过证书进行登录，证书更为安全，在设置完成之后，保存并重启服务使配置生效，通过修改端口号、配置证书登录等方式就可以提升 ssh 登录的安全性。</p><h2 id="linux-in-windows" tabindex="-1"><a class="header-anchor" href="#linux-in-windows" aria-hidden="true">#</a> Linux in Windows</h2><h3 id="windows类linux命令" tabindex="-1"><a class="header-anchor" href="#windows类linux命令" aria-hidden="true">#</a> windows类Linux命令</h3><h4 id="设置环境变量" tabindex="-1"><a class="header-anchor" href="#设置环境变量" aria-hidden="true">#</a> 设置环境变量</h4><p>set LLM_API_KEY=&quot;sk-...&quot;</p><h4 id="查看特定环境变量" tabindex="-1"><a class="header-anchor" href="#查看特定环境变量" aria-hidden="true">#</a> 查看特定环境变量</h4><p>set LLM_API_KEY</p><h4 id="查看所有环境变量" tabindex="-1"><a class="header-anchor" href="#查看所有环境变量" aria-hidden="true">#</a> 查看所有环境变量</h4><p>set</p><h2 id="linux目录结构" tabindex="-1"><a class="header-anchor" href="#linux目录结构" aria-hidden="true">#</a> Linux目录结构</h2><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="熟悉" tabindex="-1"><a class="header-anchor" href="#熟悉" aria-hidden="true">#</a> 熟悉</h3><h4 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> /</h4><p>根目录</p><h4 id="etc-editable-text-configurationchest" tabindex="-1"><a class="header-anchor" href="#etc-editable-text-configurationchest" aria-hidden="true">#</a> /etc（editable text configurationChest）</h4><p>系统范围的配置文件</p><h4 id="root" tabindex="-1"><a class="header-anchor" href="#root" aria-hidden="true">#</a> /root</h4><p>管理员用户（root 用户）的home目录（home,家）</p><h4 id="home" tabindex="-1"><a class="header-anchor" href="#home" aria-hidden="true">#</a> /home</h4><p>普通用户的home目录，个人用户的配置</p><p>/home/test 为test用户的home目录</p><h4 id="usr" tabindex="-1"><a class="header-anchor" href="#usr" aria-hidden="true">#</a> /usr</h4><p>Unix Software Resource 绝大多数的程序和应用工具安装在这里，结果和/非常相似</p><h5 id="usr-src" tabindex="-1"><a class="header-anchor" href="#usr-src" aria-hidden="true">#</a> /usr/src</h5><p>源代码存放路径，如Linux 内核源码</p><h4 id="var-variable" tabindex="-1"><a class="header-anchor" href="#var-variable" aria-hidden="true">#</a> /var（variable）</h4><p>在程序运行中内容不断变化的文件，比如日志</p><h5 id="var-log" tabindex="-1"><a class="header-anchor" href="#var-log" aria-hidden="true">#</a> var/log</h5><p>####### 存放日志</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="了解" tabindex="-1"><a class="header-anchor" href="#了解" aria-hidden="true">#</a> 了解</h3><h4 id="bin-binary" tabindex="-1"><a class="header-anchor" href="#bin-binary" aria-hidden="true">#</a> /bin（binary）</h4><p>可执行文件，比如 ls 命令</p><h4 id="sbin-superuser-binary" tabindex="-1"><a class="header-anchor" href="#sbin-superuser-binary" aria-hidden="true">#</a> /sbin（superuser binary）</h4><p>系统的可执行文件，init ，mount 等</p><h4 id="boot" tabindex="-1"><a class="header-anchor" href="#boot" aria-hidden="true">#</a> /boot</h4><p>引导程序文件，内核，以及 initrd 等文件</p><h4 id="dev-device" tabindex="-1"><a class="header-anchor" href="#dev-device" aria-hidden="true">#</a> /dev（device）</h4><p>设备文件，比如磁盘设备</p><h4 id="mnt" tabindex="-1"><a class="header-anchor" href="#mnt" aria-hidden="true">#</a> /mnt</h4><p>临时挂载点</p><h4 id="opt-optional-application-software-packages" tabindex="-1"><a class="header-anchor" href="#opt-optional-application-software-packages" aria-hidden="true">#</a> /opt（optional application software packages）</h4><p>可选的应用包，一般用于存放一些直接提供二进制程序的非开源包</p><h4 id="tmp-temporary" tabindex="-1"><a class="header-anchor" href="#tmp-temporary" aria-hidden="true">#</a> /tmp（temporary）</h4><p>临时文件系统，重启后内容丢失</p><h3 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h3><h4 id="media" tabindex="-1"><a class="header-anchor" href="#media" aria-hidden="true">#</a> /media</h4><p>可移除的媒体，cd-rom 等的挂载点</p><h4 id="run" tabindex="-1"><a class="header-anchor" href="#run" aria-hidden="true">#</a> /run</h4><p>存放一些 pid 和 socket 文件</p><h4 id="sys" tabindex="-1"><a class="header-anchor" href="#sys" aria-hidden="true">#</a> /sys</h4><p>非FHS保准，但是大部分发行版都有，虚拟文件系统，用来对内核和设备驱动做设置</p><h2 id="linux命令的组成" tabindex="-1"><a class="header-anchor" href="#linux命令的组成" aria-hidden="true">#</a> Linux命令的组成</h2><h3 id="command-option-arguments" tabindex="-1"><a class="header-anchor" href="#command-option-arguments" aria-hidden="true">#</a> command [option] [arguments]</h3><p>command：命令主体</p><p>option：命令选项，说明对命令的要求，用连字符“-”后跟一个字母进行表示。不设置选项时，命令将采用默认的方式执行。当使用单词或数个字母来表示选项时，连接符为“--”</p><p>arguments：命令的参数，描述命令作用的对象，一般为目录或文件</p><h3 id="管道" tabindex="-1"><a class="header-anchor" href="#管道" aria-hidden="true">#</a> 管道 |</h3><p>将一个命令的标准输出作为另一个命令的标准输入。也就是把几个命令组合起来使用。</p><p>例：grep -r &quot;close&quot; /home/* | more 在home目录下所有文件中查找，包括close的文件，并分页输出。<br> ls --help | more 分页查询帮助信息<br> ps –ef | grep java 查询名称中包含java的进程</p><p>ifconfig | more<br> cat index.html | more<br> history | less 查看命令历史使用记录并通过less分页显示<br> ps –ef | grep aio</p>',116),p=[u];function l(x,b){return e(),i("div",null,p)}const m=a(c,[["render",l],["__file","linux.html.vue"]]);export{m as default};
