import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,f as t}from"./app-hqFn6cUE.js";const p={},o=t(`<h1 id="java8学习笔记" tabindex="-1"><a class="header-anchor" href="#java8学习笔记" aria-hidden="true">#</a> Java8学习笔记</h1><ul><li><a href="#java8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0">Java8学习笔记</a></li><li><a href="#%E4%B8%80%E8%A1%8C%E4%B8%BA%E5%8F%82%E6%95%B0%E5%8C%96">一、行为参数化</a></li><li><a href="#%E4%BA%8Clambda%E8%A1%A8%E8%BE%BE%E5%BC%8F">二、Lambda表达式</a></li><li><a href="#%E4%B8%89%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3">三、函数式接口</a></li><li><a href="#%E5%9B%9B%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8">四、方法引用</a></li><li><a href="#%E4%BA%94stream-api">五、Stream API</a></li><li><a href="#%E5%85%ADoptional%E7%B1%BB">六、Optional类</a></li><li><a href="#%E4%B8%83%E4%B8%BE%E4%BE%8B">七、举例</a></li><li><a href="#50jdk18-%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E7%89%B9%E6%80%A7-">50.JDK1.8 都有哪些新特性？ </a></li><li><a href="#51lambda-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BA%86%E8%A7%A3%E5%A4%9A%E5%B0%91">51.Lambda 表达式了解多少？</a></li><li><a href="#52optional-%E4%BA%86%E8%A7%A3%E5%90%97">52.Optional 了解吗？</a></li><li><a href="#53stream-%E6%B5%81%E7%94%A8%E8%BF%87%E5%90%97">53.Stream 流用过吗？</a></li></ul><h1 id="一、行为参数化" tabindex="-1"><a class="header-anchor" href="#一、行为参数化" aria-hidden="true">#</a> 一、行为参数化</h1><p>“行为” + “参数化” <br> 行为：即某一段具体的业务代码块 <br> 参数化：将行为作为参数 <br> 是整个lambda表达式，以及Stream API的基础 <br><strong>作用：可以重复使用同一个方法，给它传不同的行为来达到不同的目的。可以让代码更好地适应不断变化的要求，减轻未来的工作量。类似于策略模式。</strong> <br></p><h1 id="二、lambda表达式" tabindex="-1"><a class="header-anchor" href="#二、lambda表达式" aria-hidden="true">#</a> 二、Lambda表达式</h1><p>（一）语法：<strong>参数列表 -&gt;  Lambda体</strong> <br> Note：-&gt; 称为Lambda操作符或箭头操作符 <br> （二）原则：能省则省 <br> 1.左侧推断类型省（参数列表可以不写参数类型，会根据上下文进行类型推断） <br> 2.左右逢一括号省，return省（左边一个参数省去小括号，右侧一条语句省去大括号并省去return） <br> （三）前提：函数式接口（只有一个抽象方法的接口，Note：该接口允许有多个默认方法和静态方法） <br> 可使用注解@FunctionalInterface修饰，来检查是否是函数式接口 <br> （四）复合Lambda表达式 <br> 语法：Lambda表达式.默认方法1.默认方法2 <br> 前提：函数式接口中有默认方法 <br> 举例：Predicate predicate = (stu-&gt;&quot;女&quot;.equals(stu.getGender())).or(stu-&gt;stu.getAge()&lt;15); <br> （五）作用 <br><strong>避免为只用一两次的短方法写一堆定义，也用不着去找自己到底传递了什么代码，代码更干净更清晰。</strong> <br> Note：但要是Lambda的长度有很多行，不一目了然，那你还是应该用方法引用（在第四点有提到）来指向一个有描述性名称的方法，而不是使用匿名的Lambda。你应该以代码的清晰度为准绳。 <br></p><h1 id="三、函数式接口" tabindex="-1"><a class="header-anchor" href="#三、函数式接口" aria-hidden="true">#</a> 三、函数式接口</h1><p>（一）定义 <br> 只有一个抽象方法的接口，称为函数式接口 <br> （二）Java内置的四大核心函数式接口 <br></p><table><thead><tr><th>接口</th><th>类型</th><th>抽象方法</th></tr></thead><tbody><tr><td>Consumer</td><td>消费型接口，有入参，没有返参</td><td>void accept(T t);</td></tr><tr><td>Supplier</td><td>供给型接口，没有入参，有返参</td><td>T get();</td></tr><tr><td>Function</td><td>函数型接口，既有入参，又有返参</td><td>R apply(T t);</td></tr><tr><td>Predicate</td><td>断言型接口，有入参，返参为布尔类型</td><td>boolean test(T t);</td></tr></tbody></table><h1 id="四、方法引用" tabindex="-1"><a class="header-anchor" href="#四、方法引用" aria-hidden="true">#</a> 四、方法引用</h1><p>（一）若Lambda体中的内容有方法已经实现了，我们可以使用“方法引用”。 <br> 可以理解为方法引用就是Lambda表达式的快捷写法 <br> Note：引用的方法要与函数式接口中抽象方法的参数和返回值保持一致 <br> （二）语法格式 <br> 对象::实例方法名 <br> 类::静态方法名 <br> 类::实例方法名 <br> 类::new（构造器引用，调用哪个构造器取决于返回值类型的限制） <br> String[]::new（数组引用） <br></p><h1 id="五、stream-api" tabindex="-1"><a class="header-anchor" href="#五、stream-api" aria-hidden="true">#</a> 五、Stream API</h1><p>（一）Java8提供了一套全新的API，用来处理集合的方法集，可以看做遍历数据集的高级迭代器。 <br> Note：Stream不会改变源对象，而是会返回一个持有结果的新Stream。 <br> （二）优点 <br> 内部迭代（可并行） <br> 声明式书写（关注要做什么，而不是怎么做） <br> 链接操作（流水线，一条龙服务） <br> 计算时机（惰性求值，操作是延迟执行的，终端操作时才执行，类似于设计模式中的构建器模式，无需全加载到内存，而是在后台按需计算） <br> （三）中间操作 <br></p><table><thead><tr><th>总类</th><th>类型</th><th>API</th><th>作用</th><th>SQL对照</th></tr></thead><tbody><tr><td>筛选</td><td>谓词筛选</td><td>filter(Predicate p)</td><td>根据条件筛选数据</td><td>where</td></tr><tr><td>-</td><td>去重筛选</td><td>distinct()</td><td>去除重复元素</td><td>distinct</td></tr><tr><td>切片</td><td>截断流</td><td>limit(long n)</td><td>取前n条</td><td>limit</td></tr><tr><td>-</td><td>跳过元素</td><td>skip(long n)</td><td>从第n+1条开始取</td><td>offset</td></tr><tr><td>映射</td><td></td><td>map(Function f)</td><td>将元素转换成其他形式或提取信息</td><td>*</td></tr><tr><td>-</td><td></td><td>flatMap(Function f)</td><td>接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</td><td></td></tr><tr><td>-</td><td></td><td>mapToDouble(ToDoubleFunction f)</td><td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 DoubleStream。</td><td></td></tr><tr><td>-</td><td></td><td>mapToInt(ToIntFunction f)</td><td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 IntStream。</td><td></td></tr><tr><td>-</td><td></td><td>mapToLong(ToLongFunction f)</td><td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 LongStream。</td><td></td></tr><tr><td>排序</td><td>自然排序</td><td>sorted()</td><td>产生一个新流，其中按自然顺序排序</td><td>order by</td></tr><tr><td>-</td><td>定制排序</td><td>sorted(Comparator comp)</td><td>产生一个新流，其中按比较器顺序排序</td><td></td></tr><tr><td>debug</td><td></td><td>Stream peek(Consumer&lt;? super T&gt; action);</td><td>一般peek在Debug场景使用比较方便，也可用于对原有流的修改</td><td></td></tr></tbody></table><p>debug示例 <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;three&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;four&quot;</span><span class="token punctuation">)</span> 
         <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span> 
         <span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Filtered value: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span> 
         <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span> 
         <span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Mapped value: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span> 
         <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note：peek、map、foreach的区别 <br> map应用一个函数型的接口，返回一个新流，是一个中间操作。 <br> peek接收一个消费型的接口，是一个中间操作，主要是用于debug的，可以进行二次的流处理。 <br> foreach接收一个消费型的接口，然后无返回值，是一个终止操作，注意线程安全问题及集合遍历的顺序问题。 <br> 当我们只需要对元素内部处理，使用peek是比较合适的，如果我们需要返回一个自定义的Stream时候，需要使用map。 <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> result3 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
		<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>stu <span class="token operator">-&gt;</span> stu<span class="token punctuation">.</span><span class="token function">setStudentID</span><span class="token punctuation">(</span><span class="token string">&quot;2021&quot;</span><span class="token operator">+</span>stu<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>studentMapper<span class="token operator">::</span><span class="token function">insertSelective</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note：map和flatmap的区别 <br> 原始集合有n行，经过map操作后依旧是n行，不改变原始集合的结构，但是经过flatmap操作后会&gt;=n行，flatmap对每一行进行处理后，每行是List或者Array类型，就会将这个List或者Array的每个元素变成1行。 <br> （四）终端操作 <br> Note：其结果可以是任何不是流的值，例如：List、Integer，甚至是void <br></p><table><thead><tr><th>总类</th><th>类型</th><th>API</th><th>作用</th><th>SQL对照</th></tr></thead><tbody><tr><td>查找</td><td>查找第一个</td><td>findFirst()</td><td>返回第一个元素</td><td></td></tr><tr><td>-</td><td>随机查找一个</td><td>findAny()</td><td>返回当前流中的任意元素</td><td></td></tr><tr><td>匹配</td><td>全都匹配</td><td>allMatch(Predicate p)</td><td>检查是否匹配所有元素</td><td></td></tr><tr><td>-</td><td>有匹配的</td><td>anyMatch(Predicate p)</td><td>检查是否至少匹配一个元素</td><td></td></tr><tr><td>-</td><td>没有匹配的</td><td>noneMatch(Predicate p)</td><td>检查是否没有匹配所有元素</td><td></td></tr><tr><td>总数</td><td></td><td>count()</td><td>返回流中元素总数</td><td>count</td></tr><tr><td>最大值</td><td></td><td>max(Comparator c)</td><td>返回流中最大值</td><td>max</td></tr><tr><td>最小值</td><td></td><td>min(Comparator c)</td><td>返回流中最小值</td><td>min</td></tr><tr><td>归约</td><td></td><td>reduce(T iden, BinaryOperator b)</td><td>第一个参数为初始值，第二个参数为两值运算的规则，可以将流中元素反复结合起来，得到一个值。返回 T</td><td></td></tr><tr><td>-</td><td></td><td>reduce(BinaryOperator b)</td><td>可以将流中元素反复结合起来，得到一个值。返回 Optional</td><td></td></tr><tr><td>收集</td><td></td><td>collect(Collector c)</td><td>将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法</td><td></td></tr><tr><td>遍历</td><td></td><td>forEach(Consumer c)</td><td>内部迭代(使用 Collection 接口需要用户去做迭代，称为外部迭代。相反，Stream API 使用内部迭代——它帮你把迭代做了)</td><td>forEach</td></tr></tbody></table><p>Collector接口 <br></p><table><thead><tr><th>方法</th><th>返回类型</th><th>作用</th><th>举例</th></tr></thead><tbody><tr><td>toMap(Function keyMapper, Function valueMapper)</td><td>Map</td><td>若使Map的value 为对象本身，valueMapper写为 t-&gt;t 或Functions.identity()</td><td>Map&lt;String, Student&gt;  studentMap =         students.stream() .collect(Collectors.toMap(Student::getId,Functions.identity());</td></tr><tr><td>toMap(Function keyMapper,Function valueMapper,BinaryOperator mergeFunction)</td><td>Map</td><td>第3个参数为当key冲突时，调用的合并方法</td><td>(n1, n2) -&gt; n1 + n2或(a,b) -&gt; a或(s, a) -&gt; s + &quot;, &quot; + a等等</td></tr><tr><td>toList</td><td>List</td><td>把流中元素收集到List</td><td>List emps= list.stream().collect(Collectors.toList());</td></tr><tr><td>toSet</td><td>Set</td><td>把流中元素收集到Set</td><td>Set emps= list.stream().collect(Collectors.toSet());</td></tr><tr><td>toCollection</td><td>Collection</td><td>把流中元素收集到创建的集合</td><td>Collectionemps=list.stream() .collect(Collectors.toCollection(ArrayList::new));</td></tr><tr><td>counting</td><td>Long</td><td>计算流中元素的个数</td><td>long count = list.stream().collect(Collectors.counting());</td></tr><tr><td>summingInt</td><td>Integer</td><td>对流中元素的整数属性求和</td><td>int total=list.stream() .collect(Collectors.summingInt(Employee::getSalary));</td></tr><tr><td>averagingInt</td><td>Double</td><td>计算流中元素Integer属性的平均值</td><td>double avg= list.stream().collect(Collectors.averagingInt(Employee::getSalary));</td></tr><tr><td>summarizingInt</td><td>IntSummaryStatistics</td><td>收集流中Integer属性的统计值。如：平均值</td><td>IntSummaryStatistics iss= list.stream().collect(Collectors.summarizingInt(Employee::getSalary));</td></tr><tr><td>joining</td><td>String</td><td>连接流中每个字符串</td><td>String str= list.stream().map(Employee::getName).collect(Collectors.joining());</td></tr><tr><td>maxBy</td><td>Optional</td><td>根据比较器选择最大值</td><td>Optional max= list.stream().collect(Collectors.maxBy(comparingInt(Employee::getSalary)));</td></tr><tr><td>minBy</td><td>Optional</td><td>根据比较器选择最小值</td><td>Optional min = list.stream().collect(Collectors.minBy(comparingInt(Employee::getSalary)));</td></tr><tr><td>reducing</td><td>归约产生的类型</td><td>从一个作为累加器的初始值开始，利用BinaryOperator与流中元素逐个结合，从而归约成单个值</td><td>int total=list.stream().collect(Collectors.reducing(0, Employee::getSalar, Integer::sum));</td></tr><tr><td>collectingAndThen</td><td>转换函数返回的类型</td><td>包裹另一个收集器，对其结果转换函数</td><td>int how= list.stream().collect(Collectors.collectingAndThen(Collectors.toList(), List::size));</td></tr><tr><td>groupingBy</td><td>Map&lt;K, List&gt;</td><td>根据某属性值对流分组，属性为K，结果为V</td><td>Map&lt;Emp.Status, List&gt; map= list.stream().collect(Collectors.groupingBy(Employee::getStatus));</td></tr><tr><td>partitioningBy</td><td>Map&lt;Boolean, List&gt;</td><td>根据true或false进行分区</td><td>Map&lt;Boolean,List&gt; vd= list.stream().collect(Collectors.partitioningBy(Employee::getManage));</td></tr></tbody></table><h1 id="六、optional类" tabindex="-1"><a class="header-anchor" href="#六、optional类" aria-hidden="true">#</a> 六、Optional类</h1><p>用来解决空指针异常的问题。Java8引入Optional类的意图并非要消除每一个null引用。与此相反，它的目标是帮助你更好地设计出普适的API，可以非常清晰地界定出变量值的缺失。 <br></p><table><thead><tr><th>方法</th><th>作用</th><th>源码</th></tr></thead><tbody><tr><td><strong>创建Optional实例</strong></td><td>返回Optional实例</td><td></td></tr><tr><td>Optional   Optional.empty()</td><td>创建一个空实例，没有参数</td><td></td></tr><tr><td>Optional     Optional.of(T t)</td><td>创建一个实例，<strong>参数t不可为null</strong>，否则报空指针异常</td><td></td></tr><tr><td>Optional     Optional.ofNullable(T t)</td><td>创建一个实例，<strong>参数t可为null</strong>，为null时返回空实例，不会报空指针异常</td><td></td></tr><tr><td><strong>判断是否包含值进行相应操作</strong></td><td>调用对象value为指定泛型的Optional实例</td><td></td></tr><tr><td>boolean  isPresent()</td><td>没有参数，返回值为boolean类型。如果实例不为null，则返回true，否则返回false</td><td>return value != null;</td></tr><tr><td>void  isPresent(Consumer&lt;? super T&gt; consumer)</td><td>有参数，返回值为void。如果实例为null，不做任何操作。实例不为null，则激活consumer，而此时如果consumer为null则报空指针异常。Consumer有一个入参，返参为void。</td><td>if (value != null)          consumer.accept(value);</td></tr><tr><td>T orElse(T other)</td><td>不为空返回value，为空返回other</td><td>return value != null ? value : other;</td></tr><tr><td>T orElseGet(Supplier other)</td><td>不为空返回value，为空返回other.get()，如果此时Supplier为null则报空指针异常。Supplier没有入参，有返回值。</td><td></td></tr><tr><td>T orElseThrow(Supplier exceptionSupplier) throws X</td><td>不为空返回value，为空抛异常。</td><td></td></tr><tr><td>其他</td><td></td><td></td></tr><tr><td>T get()</td><td>一般先用isPresent()校验不为空再用此</td><td>if (value == null) {            throw new NoSuchElementException(&quot;No value present&quot;);        }        return value;</td></tr><tr><td>Optional map(Function mapper)</td><td>同Stream的map，返回Optional。Function 传入一个入参，返回一个返参。如果Function为null则抛空指针异常</td><td></td></tr><tr><td>Optional filter(Predicate&lt;? super T&gt; predicate)</td><td>同Stream的filter，返回Optional。</td><td>Objects.requireNonNull(predicate);        if (!isPresent())            return this;        else            return predicate.test(value) ? this : empty();</td></tr></tbody></table><h1 id="七、举例" tabindex="-1"><a class="header-anchor" href="#七、举例" aria-hidden="true">#</a> 七、举例</h1><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> fruit <span class="token operator">=</span> <span class="token string">&quot;apple,banana,mango,pear&quot;</span><span class="token punctuation">;</span> 
<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result1 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
							<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">trim</span><span class="token punctuation">)</span> 
							<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token operator">::</span><span class="token function">isNotBlank</span><span class="token punctuation">)</span> 
							<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result2 <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token class-name">Splitter</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">)</span> 
							<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
							<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">trim</span><span class="token punctuation">)</span> 
							<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BigDecimal</span> bookFees <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
							<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getBookFee</span><span class="token punctuation">)</span> 
							<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token operator">::</span><span class="token function">add</span><span class="token punctuation">)</span> 
							<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">)</span> 
							<span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ROUND_HALF_UP</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">int</span> bookAmounts <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
							<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getBookAmount</span><span class="token punctuation">)</span> 
							<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_50-jdk1-8-都有哪些新特性" tabindex="-1"><a class="header-anchor" href="#_50-jdk1-8-都有哪些新特性" aria-hidden="true">#</a> 50.JDK1.8 都有哪些新特性？ <br></h1><p>JDK1.8主要新特性 <br></p><ul><li>接口默认方法：Java 8 允许我们给接口添加一个非抽象的方法实现，只需要使用 default 关键字修饰即可 <br></li><li>Lambda 表达式和函数式接口：Lambda 表达式本质上是一段匿名内部类，也可以是一段可以传递的代码。Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中），使用 Lambda 表达式使代码更加简洁，但是也不要滥用，否则会有可读性等问题，《Effective Java》作者 Josh Bloch 建议使用 Lambda 表达式最好不要超过 3 行。 <br></li><li>Stream API：用函数式编程方式在集合类上进行复杂操作的工具，配合 Lambda 表达式可以方便的对集合进行处理。Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用 Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。 <br></li><li>日期时间 API：Java 8 引入了新的日期时间 API 改进了日期时间的管理。 <br></li><li>Optional 类：用来解决空指针异常的问题。很久以前 Google Guava 项目引入了 Optional 作为解决空指针异常的一种方式，不赞成代码被 null 检查的代码污染，期望程序员写整洁的代码。受 Google Guava 的鼓励，Optional 现在是 Java 8 库的一部分。 <br></li></ul><h1 id="_51-lambda-表达式了解多少" tabindex="-1"><a class="header-anchor" href="#_51-lambda-表达式了解多少" aria-hidden="true">#</a> 51.Lambda 表达式了解多少？</h1><p>Lambda 表达式本质上是一段匿名内部类，也可以是一段可以传递的代码。 <br> 比如我们以前使用 Runnable 创建并运行线程： <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token annotation punctuation">@Override</span> 
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Thread is running before Java8!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
            <span class="token punctuation">}</span> 
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是通过内部类的方式来重写 run 方法，使用 Lambda 表达式，还可以更加简洁： <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Thread is running since Java8!&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然不是每个接口都可以缩写成 Lambda 表达式。只有那些函数式接口（Functional Interface）才能缩写成 Lambda 表示式。 <br> 所谓函数式接口（Functional Interface）就是只包含一个抽象方法的声明。针对该接口类型的所有 Lambda 表达式都会与这个抽象方法匹配。 <br> Java8 有哪些内置函数式接口？ <br> JDK 1.8 API 包含了很多内置的函数式接口。其中就包括我们在老版本中经常见到的 <strong>Comparator</strong> 和 <strong>Runnable</strong>，Java 8 为他们都添加了 @FunctionalInterface 注解，以用来支持 Lambda 表达式。 <br> 除了这两个之外，还有 Callable、Predicate、Function、Supplier、Consumer 等等。 <br></p><h1 id="_52-optional-了解吗" tabindex="-1"><a class="header-anchor" href="#_52-optional-了解吗" aria-hidden="true">#</a> 52.Optional 了解吗？</h1><p>Optional是用于防范NullPointerException。 <br> 可以将 Optional 看做是包装对象（可能是 null, 也有可能非 null）的容器。当我们定义了 一个方法，这个方法返回的对象可能是空，也有可能非空的时候，我们就可以考虑用 Optional 来包装它，这也是在 Java 8 被推荐使用的做法。 <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> optional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;bam&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// true </span>
optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// &quot;bam&quot; </span>
optional<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">&quot;fallback&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// &quot;bam&quot; </span>

optional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// &quot;b&quot; </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_53-stream-流用过吗" tabindex="-1"><a class="header-anchor" href="#_53-stream-流用过吗" aria-hidden="true">#</a> 53.Stream 流用过吗？</h1><p>Stream 流，简单来说，使用 java.util.Stream 对一个包含一个或多个元素的集合做各种操作。这些操作可能是 <em>中间操作</em> 亦或是 <em>终端操作</em>。 终端操作会返回一个结果，而中间操作会返回一个 Stream 流。 <br> Stream 流一般用于集合，我们对一个集合做几个常见操作： <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringCollection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ddd2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;aaa2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;bbb1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;aaa1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;bbb3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ccc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;bbb2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ddd1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Filter 过滤</strong> <br></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>stringCollection
    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">// &quot;aaa2&quot;, &quot;aaa1&quot; </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Sorted 排序</strong> <br></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>stringCollection 
    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">// &quot;aaa1&quot;, &quot;aaa2&quot; </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Map 转换</strong> <br></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>stringCollection 
    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span> 
    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token comment">// &quot;DDD2&quot;, &quot;DDD1&quot;, &quot;CCC&quot;, &quot;BBB3&quot;, &quot;BBB2&quot;, &quot;AAA2&quot;, &quot;AAA1&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Match 匹配</strong> <br></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 验证 list 中 string 是否有以 a 开头的, 匹配到第一个，即返回 true</span>
<span class="token keyword">boolean</span> anyStartsWithA <span class="token operator">=</span> stringCollection 
        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>anyStartsWithA<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// true</span>

<span class="token comment">// 验证 list 中 string 是否都是以 a 开头的</span>
<span class="token keyword">boolean</span> allStartsWithA <span class="token operator">=</span> stringCollection
        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>allStartsWithA<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// false</span>

<span class="token comment">// 验证 list 中 string 是否都不是以 z 开头的,</span>
<span class="token keyword">boolean</span> noneStartsWithZ <span class="token operator">=</span> stringCollection
        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;z&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>noneStartsWithZ<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Count 计数</strong> <br></li></ul><p>count 是一个终端操作，它能够统计 stream 流中的元素总数，返回值是 long 类型。 <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 先对 list 中字符串开头为 b 进行过滤，让后统计数量</span>
<span class="token keyword">long</span> startsWithB <span class="token operator">=</span> 
    stringCollection 
        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
        <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>startsWithB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Reduce</strong> <br></li></ul><p>Reduce 中文翻译为：<em>减少、缩小</em>。通过入参的 Function，我们能够将 list 归约成一个值。它的返回类型是 Optional 类型。 <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> reduced <span class="token operator">=</span> stringCollection 
        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
        <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
        <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s1 <span class="token operator">+</span> <span class="token string">&quot;#&quot;</span> <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> 

reduced<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// &quot;aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上是常见的几种流式操作，还有其它的一些流式操作，可以帮助我们更便捷地处理集合数据。 <br> Java Stream流 <br></p>`,58),e=[o];function c(l,i){return a(),s("div",null,e)}const r=n(p,[["render",c],["__file","Java8学习笔记.html.vue"]]);export{r as default};
