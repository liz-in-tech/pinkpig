const e=JSON.parse('{"key":"v-4c2ade96","path":"/cs/code/data_structure/7.%E5%9B%BE.html","title":"图","lang":"en-US","frontmatter":{"icon":"lightbulb","description":"图 基本概念 顶点（vertex）、边（edge） 度（degree）、入度（In-degree）、出度（Out-degree） 树、森林、环 无向图、有向图、完全有向图、完全无向图 连通图、联通分量 带权图（weighted graph）：每条边都有一个权重（weight） 图的存储 邻接矩阵 ( Adjacency Matrix）--用空间换时间 优：存储简单，获取两个顶点的关系高效。方便计算， 可以将很多图的运算转换成矩阵之间的运算。比如求解最短路径问题时会提到一个Floyd-Warshall 算法，就是利用矩阵循环相乘若干次得到结果。 缺：无向图有一半空间是浪费的，稀疏图绝大部分的存储空间都被浪费了。","head":[["meta",{"property":"og:url","content":"https://liz-in-tech.github.io/pinkpig/cs/code/data_structure/7.%E5%9B%BE.html"}],["meta",{"property":"og:site_name","content":"Liz"}],["meta",{"property":"og:title","content":"图"}],["meta",{"property":"og:description","content":"图 基本概念 顶点（vertex）、边（edge） 度（degree）、入度（In-degree）、出度（Out-degree） 树、森林、环 无向图、有向图、完全有向图、完全无向图 连通图、联通分量 带权图（weighted graph）：每条边都有一个权重（weight） 图的存储 邻接矩阵 ( Adjacency Matrix）--用空间换时间 优：存储简单，获取两个顶点的关系高效。方便计算， 可以将很多图的运算转换成矩阵之间的运算。比如求解最短路径问题时会提到一个Floyd-Warshall 算法，就是利用矩阵循环相乘若干次得到结果。 缺：无向图有一半空间是浪费的，稀疏图绝大部分的存储空间都被浪费了。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-10-29T16:42:17.000Z"}],["meta",{"property":"article:author","content":"Liz"}],["meta",{"property":"article:modified_time","content":"2024-10-29T16:42:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"图\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-29T16:42:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Liz\\",\\"url\\":\\"https://github.com/liz-in-tech\\"}]}"]]},"headers":[{"level":2,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":2,"title":"图的存储","slug":"图的存储","link":"#图的存储","children":[{"level":3,"title":"邻接矩阵","slug":"邻接矩阵","link":"#邻接矩阵","children":[]},{"level":3,"title":"邻接表&逆领接表","slug":"邻接表-逆领接表","link":"#邻接表-逆领接表","children":[]},{"level":3,"title":"现实问题中图的存储","slug":"现实问题中图的存储","link":"#现实问题中图的存储","children":[]},{"level":3,"title":"应用","slug":"应用","link":"#应用","children":[]}]},{"level":2,"title":"图相关算法","slug":"图相关算法","link":"#图相关算法","children":[]},{"level":2,"title":"搜索","slug":"搜索","link":"#搜索","children":[{"level":3,"title":"DFS（深度优先搜索）","slug":"dfs-深度优先搜索","link":"#dfs-深度优先搜索","children":[]},{"level":3,"title":"BFS（广度优先搜索）","slug":"bfs-广度优先搜索","link":"#bfs-广度优先搜索","children":[]},{"level":3,"title":"","slug":"","link":"#","children":[]}]},{"level":2,"title":"并查集（用dfs做）","slug":"并查集-用dfs做","link":"#并查集-用dfs做","children":[]},{"level":2,"title":"最短路径算法","slug":"最短路径算法","link":"#最短路径算法","children":[{"level":3,"title":"单源","slug":"单源","link":"#单源","children":[]},{"level":3,"title":"多源","slug":"多源","link":"#多源","children":[]}]},{"level":2,"title":"生成树","slug":"生成树","link":"#生成树","children":[]},{"level":2,"title":"拓扑排序（Topological Sort）","slug":"拓扑排序-topological-sort","link":"#拓扑排序-topological-sort","children":[]},{"level":2,"title":"CSDN","slug":"csdn","link":"#csdn","children":[]}],"git":{"createdTime":1730220137000,"updatedTime":1730220137000,"contributors":[{"name":"unknown","email":"15721607377@163.com","commits":1}]},"readingTime":{"minutes":29.18,"words":8753},"filePathRelative":"cs/code/data_structure/7.图.md","localizedDate":"October 29, 2024","excerpt":"<h1> 图</h1>\\n<h2> 基本概念</h2>\\n<p>顶点（vertex）、边（edge） <br>\\n度（degree）、入度（In-degree）、出度（Out-degree） <br>\\n树、森林、环 <br>\\n无向图、有向图、完全有向图、完全无向图 <br>\\n连通图、联通分量 <br>\\n带权图（weighted graph）：每条边都有一个权重（weight） <br></p>\\n<h2> 图的存储</h2>\\n<h3> 邻接矩阵</h3>\\n<p>( Adjacency Matrix）--用空间换时间 <br>\\n <br>\\n优：存储简单，获取两个顶点的关系高效。方便计算， 可以将很多图的运算转换成矩阵之间的运算。比如求解最短路径问题时会提到一个Floyd-Warshall 算法，就是利用矩阵循环相乘若干次得到结果。  <br>\\n缺：无向图有一半空间是浪费的，稀疏图绝大部分的存储空间都被浪费了。   <br></p>","autoDesc":true}');export{e as data};
