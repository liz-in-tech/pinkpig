import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as p,c as b,f as e}from"./app-9W6NtUlH.js";const a={},t=e('<h1 id="网易-——-内部出账平台" tabindex="-1"><a class="header-anchor" href="#网易-——-内部出账平台" aria-hidden="true">#</a> 网易 —— 内部出账平台</h1><h2 id="项目功能-出账与成本营收统计" tabindex="-1"><a class="header-anchor" href="#项目功能-出账与成本营收统计" aria-hidden="true">#</a> 项目功能：出账与成本营收统计</h2><h2 id="项目组成" tabindex="-1"><a class="header-anchor" href="#项目组成" aria-hidden="true">#</a> 项目组成</h2><p>出账平台项目由四个子项目构成，分别是nbl_web，nbl_pubbill，pub_bill，pri_bill。 <br></p><p>nbl_web是出账平台的前端项目 <br></p><p>nbl_pubbill是SpringBoot项目，主要负责整个出账及成本营收流程控制及数据处理，并为前端项目提供API接口 <br></p><p>pub_bill和pri_bill是两个NodeJS后端项目，分别负责拉取公有云2.0环境和内部云1.0环境的日志。 <br></p><h2 id="会计主体-为谁记账-网易的云计算部门" tabindex="-1"><a class="header-anchor" href="#会计主体-为谁记账-网易的云计算部门" aria-hidden="true">#</a> 会计主体（为谁记账）：网易的云计算部门</h2><p>1个<strong>计费周期</strong>：上月21日0点开始——&gt;当月20日24点结束 <br></p><p>出账时间：计费周期结束往后12天，大概每月2号 <br></p><p>计费周期举例： <br></p><p>period：202108 <br></p><p>periodStartTime：20210721 <br></p><p>periodEndTime：20210820 <br></p><p>periodBillingTime（出账时间）：20210902 <br></p><p><strong>出账&amp;推送账单</strong>：计算一个账期内每个成本中心购买云服务的总费用和明细费用（明细是各个云服务器），向成本中心推送账单 <br></p><p><strong>生成成本营收的各种报表</strong> <br></p><ul><li><strong>营收</strong>：就是出账的总额（成本营收里的营收依赖于每月的出账完成） <br> 对各成本中心使用云计算服务的收费 <br></li></ul><p>每个账期每个成本中心<strong>按软件进行汇总</strong>到营收表里， <br> 需要计算出每个软件的收入，所以才要将混部区分开来 <br></p><ul><li><strong>成本</strong>：拉取公有云和私有云环境的日志后获得机器节点信息，算折旧费 <br></li><li><strong>利润</strong>：营收-成本 <br></li></ul><h2 id="收费-1个计费周期" tabindex="-1"><a class="header-anchor" href="#收费-1个计费周期" aria-hidden="true">#</a> 收费（1个计费周期）</h2><p>总营收=总出账=各个成本中心收费之和 <br></p><p>每个成本中心收费=各个节点收费之和 <br></p><p>每个节点收费=硬件（租赁才有）+软件 <br></p><p><strong>用户/成本中心</strong>：内部用户，网易的其他部门 <br></p><p>它们使用云计算部门的机器和软件，要向他们收费 <br></p><p>安全部、新闻客户端、网易博客等 <br></p><p>部署方式：租赁、托管 <br></p><p>租赁：硬件要花钱 <br></p><p>托管：硬件不花钱（托管节点没有硬件费用） <br></p><p><strong>产品/节点/服务器</strong>：云计算服务（提供云服务器，包括节点、软件、带宽等的服务） <br></p><p>计算节点，存储节点，网关节点 <br></p><p>Note：节点是指一个物理机 <br></p><p><strong>混部节点</strong>：一个节点上有多个软件即为混部节点 <br></p><p>混部节点的机器表中一个节点有多行，每行为一种软件 <br></p><p>混部节点营收统计方案如下：k8s和其余软件的混部，节点收入全部归属于k8s，软件收入则由k8s和混部的软件平分。 <br> NVM和其余软件混部分成规则与此一致。（例如：k8s/NCR混部，节点收入归属于k8s，软件收入则k8s和NCR各50%） <br></p><p><strong>软件（服务）</strong>：Note：物理机上可用的服务 <br></p><p>All 全部 <br></p><p>NVM 云主机 <br></p><p>RDS 关系型数据库（Relational Database Service） <br></p><p>NQS 消息队列 <br></p><p>NET 弹性公网IP <br></p><p>NMS 容器服务 <br></p><p>NCR Redis（Netease Cloud Redis） <br></p><p>k8s Linux容器自动化运维平台 <br></p><p><strong>优惠</strong> <br></p><p>优惠类型：客户优惠、节点优惠 <br></p><p>优惠方式：原价优惠、折扣优惠 <br></p><p>优惠类型和优惠方式两个组合有4种优惠类型，每个类型又有多个优惠配置 <br></p><p>Note：客户优惠才分托管和租赁 <br></p><p>硬件和软件是各自的优惠配置 <br></p><p>优惠有开始和结束时间 <br></p><p>每个时段比较哪个优惠最大： <br></p><p>把时间按从小到大排列，拆分成一个个小时间段，每个段的优惠个数和优惠配置都不一样 <br></p><p>在每个小时间段，4种优惠类型比较：客户折扣、客户原价、节点折扣、节点原价 <br></p><p>先把折扣优惠换算成原价优惠，才有可比性； <br></p><p>转变为2种优惠类型比较：客户原价、节点原价 <br></p><p>客户优惠最大优惠金额=客户硬件优惠+客户软件优惠 <br></p><p>节点优惠最大优惠金额=节点硬件优惠+节点软件优惠 <br></p><p>得到每个时段最高的优惠 <br></p><p>计费周期内优惠=计费周期内每个小时间段最高的优惠相加 <br></p><p>这个计费周期1个节点的价格：原价*周期长度-计费周期内优惠 <br></p><p><strong>关系</strong> <br></p><p>环境（不同云不同地区）：（内部云，公有云，专属云） <br></p><p>机型：物理机的型号，指明了cpu、内存等信息 <br></p><p>1个成本中心可以有多个节点，1个节点一定只属于1个成本中心 <br></p><p>1个节点可以有多个软件 <br></p><p>1个机型的服务器（节点）有很多个，一个服务器（节点）属于一种机型 <br></p><p>1个成本中心要购买什么云计算资源：什么类型的云，什么地区的，租赁还是托管，什么节点，几个节点，什么软件 <br></p><p>每个节点软件价格取的是最高的软件价格 <br></p><h2 id="需求" tabindex="-1"><a class="header-anchor" href="#需求" aria-hidden="true">#</a> 需求</h2><h3 id="添加专属云营收统计" tabindex="-1"><a class="header-anchor" href="#添加专属云营收统计" aria-hidden="true">#</a> 添加专属云营收统计</h3><p>在原有公有云、私有云的基础上添加了专属云的营收统计， <br> 从一个表每个月每个成本中心按软件进行汇总到营收表里 <br></p><h3 id="修复节点管理超时" tabindex="-1"><a class="header-anchor" href="#修复节点管理超时" aria-hidden="true">#</a> 修复节点管理超时</h3><p>超时原因：没有在数据库层面用分页，而是在代码层面，大概有4处用了相同的逻辑 <br></p><p>一个节点对应1行硬件记录，多行软件记录；页面上要展示的是一个节点对应一行信息，把硬件和多个软件整合为一条记录 <br> 解决：创建了一个表，用来存中间操作的结果，页面直接取这张表 <br></p><h3 id="优惠逻辑" tabindex="-1"><a class="header-anchor" href="#优惠逻辑" aria-hidden="true">#</a> 优惠逻辑</h3><p>按客户（成本中心）优惠和按节点优惠两种 <br></p><p>优惠方式分为折扣优惠和原价优惠 <br></p><p>组合起来有4类优惠，每类又可能有多个，每个配置的优惠时间也可能不一样 <br> 所以根据优惠的每个小的时间段，都换算成原价优惠，取最大的优惠为当前时间段的优惠 <br></p><p>出现一些问题：不该用优惠的用上优惠了；用的优惠金额不对 <br></p><h3 id="mq发送未录入价格" tabindex="-1"><a class="header-anchor" href="#mq发送未录入价格" aria-hidden="true">#</a> mq发送未录入价格</h3><p>添加查询节点管理时，如果有未录入价格，会把有几条未录入价格发送到登录的人的泡泡上 <br> RocketMQ异步发消息，由专门处理消息的服务监听消息，然后发送到泡泡 <br></p><h3 id="添加应收报表自动更新功能" tabindex="-1"><a class="header-anchor" href="#添加应收报表自动更新功能" aria-hidden="true">#</a> 添加应收报表自动更新功能</h3><p>运营人员要求重新更新应收报表，现有的操作得是开发人员更改数据库里的定时任务状态进行执行，而现在页面上直接能操作 <br></p><p>定时任务，SpringTask+数据库任务配置taskConfig+数据库任务项taskItem+自定义注解@interface task <br></p><p>任务执行条件 = 依赖的任务完成 dependTask + 时间到了 <br></p><p>时间 = 账期开始后 + 账期结束后 + cron时间 <br></p><p>表里有上次执行的时间，taskHistory记录了每一次操作，增加，状态变更 <br> taskItem里，每个月会有当前月的定时任务执行情况 <br></p><p>总的入口 <br></p><p>执行每一个任务 <br></p><p>看是否达到任务执行条件 <br></p><p>达到的话，更改状态，进行执行任务 <br></p>',93),n=[t];function i(s,d){return p(),b("div",null,n)}const l=r(a,[["render",i],["__file","wy_nbczpt.html.vue"]]);export{l as default};
