import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as r,c as i,f as e}from"./app-PZAeLD9C.js";const n="/pinkpig/assets/操作系统-1-2r5aww-L.png",l="/pinkpig/assets/操作系统-2-dnd949Xw.png",o="/pinkpig/assets/操作系统-3-_zhOyxGv.jpeg",t="/pinkpig/assets/操作系统-4-Dki5kEAZ.png",s="/pinkpig/assets/操作系统-15-y8cjyCLR.png",E="/pinkpig/assets/操作系统-5-QsLEPNmG.png",h="/pinkpig/assets/操作系统-6-34wZBoYe.png",d="/pinkpig/assets/操作系统-7-qMg4Zxqm.png",B="/pinkpig/assets/操作系统-8-09ywPKzA.png",b="/pinkpig/assets/操作系统-9-2sPF1Cfd.png",c="/pinkpig/assets/操作系统-10-NVdWiETJ.png",A="/pinkpig/assets/操作系统-11-RhkEDiyd.png",p="/pinkpig/assets/操作系统-16-_13pEtQK.png",g="/pinkpig/assets/操作系统-12-DrbQUNK3.png",f="/pinkpig/assets/操作系统-13-6jsLjL2p.png",u="/pinkpig/assets/操作系统-14-O4-uPb7M.png",_="/pinkpig/assets/操作系统-17-jWSLQRgb.png",O={},I=e('<h1 id="操作系统" tabindex="-1"><a class="header-anchor" href="#操作系统" aria-hidden="true">#</a> 操作系统</h1><ul><li><a href="#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">操作系统</a></li><li><a href="#%E5%BF%AB%E9%80%9F%E6%8E%8C%E6%8F%A1%E9%9D%A2%E8%AF%95">快速掌握面试</a><ul><li><a href="#1-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%92%8C%E7%A1%AC%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E5%AA%92%E4%BB%8B-">1. 操作系统：应用程序和硬件之间的媒介 </a></li><li><a href="#2-%E5%B9%B6%E5%8F%91%E5%B9%B6%E8%A1%8C%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E7%A8%8B-">2. 并发&amp;并行，进程&amp;线程&amp;协程 </a></li><li><a href="#3-%E8%BF%9B%E7%A8%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2%E7%BA%BF%E7%A8%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2-">3. 进程上下文切换&amp;线程上下文切换 </a></li><li><a href="#4-%E7%94%A8%E6%88%B7%E6%80%81%E5%86%85%E6%A0%B8%E6%80%81%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%94%A8%E6%88%B7%E6%80%81%E9%80%9A%E8%BF%87%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%88%87%E6%8D%A2%E5%88%B0%E5%86%85%E6%A0%B8%E6%80%81-">4. 用户态&amp;内核态，系统调用：用户态通过系统调用切换到内核态 </a></li><li><a href="#5-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%9C%89%E5%93%AA%E4%BA%9B%E7%8A%B6%E6%80%81notejava%E6%98%AF6%E7%A7%8D%E7%8A%B6%E6%80%81%E5%88%9B%E5%BB%BA%E5%B0%B1%E7%BB%AA%E8%BF%90%E8%A1%8C%E9%98%BB%E5%A1%9E%E7%BB%93%E6%9D%9F-">5. 操作系统的进程/线程有哪些状态（Note:Java是6种状态）：创建，就绪，运行，阻塞，结束 </a></li><li><a href="#6-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A17%E7%A7%8D-">6. 进程间通信（7种） </a></li><li><a href="#7-%E8%BF%9B%E7%A8%8B%E7%9A%84%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95-">7. 进程的调度算法 </a></li><li><a href="#8-%E7%BA%BF%E7%A8%8B%E9%97%B4%E5%90%8C%E6%AD%A5-">8. 线程间同步 </a></li><li><a href="#9-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-">9. 操作系统的内存管理 </a></li><li><a href="#10-%E5%B8%B8%E8%A7%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6-">10. 常见内存管理机制 </a></li><li><a href="#11-%E9%A1%B5%E5%BC%8F%E7%AE%A1%E7%90%86%E9%87%8D%E8%A6%81%E6%A6%82%E5%BF%B5%E5%BF%AB%E8%A1%A8%E5%A4%9A%E7%BA%A7%E9%A1%B5%E8%A1%A8-">11. 页式管理重要概念：快表&amp;多级页表 </a></li><li><a href="#12-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E7%89%A9%E7%90%86%E5%9C%B0%E5%9D%80-">12. 虚拟内存（虚拟地址）&amp;物理内存（物理地址） </a></li><li><a href="#13-%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E7%A3%81%E7%9B%98%E4%B8%8A%E7%94%A8%E4%BA%8E%E6%89%A9%E5%B1%95%E5%86%85%E5%AD%98%E7%9A%84%E4%B8%80%E5%9D%97%E7%A9%BA%E9%97%B4%E5%B0%B1%E5%8F%AB%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4-">13. 交换空间：磁盘上用于扩展内存的一块空间，就叫交换空间。 </a></li><li><a href="#14-%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95-">14. 页面置换算法 </a></li></ul></li><li><a href="#%E5%8C%BA%E5%88%86io%E5%AF%86%E9%9B%86%E5%86%85%E5%AD%98%E5%AF%86%E9%9B%86%E5%92%8C%E8%AE%A1%E7%AE%97%E5%AF%86%E9%9B%86">区分IO密集、内存密集和计算密集</a></li><li><a href="#java-%E4%B8%AD-io-%E6%B5%81%E5%88%86%E4%B8%BA%E5%87%A0%E7%A7%8D">Java 中 IO 流分为几种?</a><ul><li><a href="#%E6%97%A2%E7%84%B6%E6%9C%89%E4%BA%86%E5%AD%97%E8%8A%82%E6%B5%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E6%9C%89%E5%AD%97%E7%AC%A6%E6%B5%81">既然有了字节流,为什么还要有字符流?</a></li></ul></li><li><a href="#bionioaio">BIO、NIO、AIO</a><ul><li><a href="#io%E6%B1%87%E6%80%BB%E8%A1%A8%E6%A6%82%E8%A7%88">IO汇总表概览</a></li><li><a href="#%E4%BA%94%E5%A4%A7io%E6%A8%A1%E5%9E%8B%E7%8B%AD%E4%B9%89nio">五大IO模型（狭义NIO）</a></li><li><a href="#bio-%E9%98%BB%E5%A1%9Eio-blocking-io">BIO (阻塞I/O, blocking I/O)</a></li><li><a href="#nioio%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8-%E9%9D%9E%E9%98%BB%E5%A1%9Eio-noblocking-io">NIO/IO多路复用 (非阻塞I/O, noblocking I/O)</a><ul><li><a href="#bio%E4%B8%8Enio%E7%9A%84%E5%8C%BA%E5%88%AB">BIO与NIO的区别</a></li><li><a href="#nio%E4%B8%89%E5%A4%A7%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6selector%E9%80%89%E6%8B%A9%E5%99%A8channel%E9%80%9A%E9%81%93buffer%E7%BC%93%E5%86%B2%E5%99%A8">NIO三大核心组件：Selector（选择器）、Channel（通道）、Buffer（缓冲器）</a></li><li><a href="#io%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E7%9A%84%E4%B8%89%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6">I/O多路复用的三种实现机制</a><ul><li><a href="#select%E4%B8%8Epoll">select与poll</a></li><li><a href="#epoll">epoll</a></li><li><a href="#%E6%AF%94%E8%BE%83">比较</a></li></ul></li></ul></li><li><a href="#aio-%E5%BC%82%E6%AD%A5ioasynchronous-io">AIO (异步I/O,Asynchronous I/O)</a></li></ul></li></ul><h1 id="快速掌握面试" tabindex="-1"><a class="header-anchor" href="#快速掌握面试" aria-hidden="true">#</a> 快速掌握面试</h1><h2 id="_1-操作系统-应用程序和硬件之间的媒介" tabindex="-1"><a class="header-anchor" href="#_1-操作系统-应用程序和硬件之间的媒介" aria-hidden="true">#</a> 1. 操作系统：应用程序和硬件之间的媒介 <br></h2><p>主要功能： <br><strong>CPU管理</strong>：主要指的是<strong>进程管理</strong> <br><strong>内存管理</strong>：主要利用了<strong>虚拟内存</strong>的方式 <br><strong>外存管理</strong>：主要指的是<strong>文件管理</strong>，将磁盘以文件的形式提供出去 <br><strong>I/O管理</strong>：输入输出设备的统一管理 <br></p><h2 id="_2-并发-并行-进程-线程-协程" tabindex="-1"><a class="header-anchor" href="#_2-并发-并行-进程-线程-协程" aria-hidden="true">#</a> 2. 并发&amp;并行，进程&amp;线程&amp;协程 <br></h2><p>进程是资源分配的单位。 <br> 线程（Java虚拟线程概念下，线程被称为平台线程）是CPU调度的单位。依赖于操作系统。 <br> 协程（Java中叫虚拟线程，Go中叫协程）是一种比线程更加轻量级的存在，不依赖于操作系统。协程完全由程序所控制（在用户态执行），带来的好处是性能大幅度大的提升。一个线程内的多个协程只能串行执行（进程和线程在多核CPU上可以并行执行），当线程内某个协程运行时，其他协程必须挂起。协程是一个特殊的函数，这个函数可以在某个地方挂起，并且可以重新在挂起处继续运行。 <br> 协程的适用场景：IO型的操作，利用协程在IO等待时间就去切换执行其他任务，当IO结束后再自动回调，那么就会大大节省资源并提高性能，从而实现异步编程（不等待任务结束就可以去执行其它代码）。 <br> 一个操作系统中可以有多个进程；一个进程可以有多个线程；一个线程可以有多个协程。 <br> 推出协程的目的：线程切换会耗费大量CPU时间，这是更轻量级的；达到应用程序的高吞吐量（高并发性），不受限于CPU。 <br> 线程池确实能提高并发场景下系统的性能，但是，请注意，线程池只是帮助你如何更好的管理线程、利用线程，本身不会凭空给你创造出线程来，最终工作的还是底层的内核线程。而且线程池往往会受限于 CPU、网络、内存等，所以从硬件的角度来看，并没有解决实际问题。 <br><img src="'+n+'" alt="image.png" loading="lazy"> <br> 多线程模型中的线程在虚拟线程模型中被称为平台线程，<strong>一个平台线程对应多个虚拟线程</strong>，最终其实也是由内核线程去驱动。 <br><strong>虚拟线程只会增加程序的吞吐量，不会增加程序的处理速度</strong> <br></p><h2 id="_3-进程上下文切换-线程上下文切换" tabindex="-1"><a class="header-anchor" href="#_3-进程上下文切换-线程上下文切换" aria-hidden="true">#</a> 3. 进程上下文切换&amp;线程上下文切换 <br></h2><p>线程上下文切换，需要看前后两个线程是否属于同一个进程。 <br> 不属于同一个进程，则和进程上下文切换一致，开销大。 <br> 属于同一个进程，只需切换线程的私有数据、寄存器等不共享的数据，开销小。 <br></p><h2 id="_4-用户态-内核态-系统调用-用户态通过系统调用切换到内核态" tabindex="-1"><a class="header-anchor" href="#_4-用户态-内核态-系统调用-用户态通过系统调用切换到内核态" aria-hidden="true">#</a> 4. 用户态&amp;内核态，系统调用：用户态通过系统调用切换到内核态 <br></h2><h2 id="_5-操作系统的进程-线程有哪些状态-note-java是6种状态-创建-就绪-运行-阻塞-结束" tabindex="-1"><a class="header-anchor" href="#_5-操作系统的进程-线程有哪些状态-note-java是6种状态-创建-就绪-运行-阻塞-结束" aria-hidden="true">#</a> 5. 操作系统的进程/线程有哪些状态（Note:Java是6种状态）：创建，就绪，运行，阻塞，结束 <br></h2><h2 id="_6-进程间通信-7种" tabindex="-1"><a class="header-anchor" href="#_6-进程间通信-7种" aria-hidden="true">#</a> 6. 进程间通信（7种） <br></h2><p>a. 管道/匿名管道：亲缘关系的进程间通信 <br> b. 命名管道：可实现本机任意两个进程通信。严格遵循先进先出。 <br> c. 信号：用于通知接收进程某个事件已经发生。 <br> d. 信号量：计数器。用于多进程对共享资源的访问，用于进程间同步。 <br> e. 消息队列：消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺点。 <br> f. 共享内存：最有用的进程间通信方式。使得多个进程可以访问同一块内存空间。 <br> g. 套接字（Socket）：不同主机之间（客户端与服务端之间）进行双向通信的端点。 <br><img src="'+l+'" alt="image.png" loading="lazy"> <br></p><h2 id="_7-进程的调度算法" tabindex="-1"><a class="header-anchor" href="#_7-进程的调度算法" aria-hidden="true">#</a> 7. 进程的调度算法 <br></h2><p>目的：确定进程执行顺序，以实现CPU利用率最大化 <br> 进程调度算法： <br> a. 先来先服务 <br> b. 短作业优先 <br> c. 时间片轮循 <br> d. 优先级调度 <br> e. 多级反馈队列调度算法：公认较好的算法，UNIX采用此。既能使高优先级的作业得到响应，又能使短作业迅速完成。 <br></p><h2 id="_8-线程间同步" tabindex="-1"><a class="header-anchor" href="#_8-线程间同步" aria-hidden="true">#</a> 8. 线程间同步 <br></h2><p>目的：避免关键资源使用冲突 <br> 操作系统线程同步方式： <br></p><ol><li>互斥量：synchronized关键字和各种Lock <br></li><li>信号量：计数器 <br></li><li>事件：Wait/Notify <br></li></ol><h2 id="_9-操作系统的内存管理" tabindex="-1"><a class="header-anchor" href="#_9-操作系统的内存管理" aria-hidden="true">#</a> 9. 操作系统的内存管理 <br></h2><ol><li>内存的分配：malloc函数申请内存 <br></li><li>内存的回收：free函数释放内存 <br></li><li>地址转换：将逻辑地址转换为物理地址 <br></li></ol><h2 id="_10-常见内存管理机制" tabindex="-1"><a class="header-anchor" href="#_10-常见内存管理机制" aria-hidden="true">#</a> 10. 常见内存管理机制 <br></h2><p>目的：提高内存利用率，减少内存碎片。 <br> 简单分为**连续内存管理方式（块式管理）<strong>和</strong>非连续内存管理方式（页式管理、段式管理、段页式管理）**两种。 <br></p><ol><li>块式管理：远古管理方式。内存分块，每块一个进程。 <br></li><li>段式管理：主存分段，段的大小不固定（取决于当前运行的程序），段是有实际意义的，段是逻辑信息的单位，可以体现为代码段、数据段，堆段，栈段，能更好满足用户的需求，对用户可见。通过段表对应逻辑地址和物理地址。 <br></li><li>页式管理：主存分页，页较小，大小固定（由操作系统决定），页无任何实际意义，对用户透明。通过页表对应逻辑地址和物理地址。 <br></li><li>段页式管理：主存分段，段内再分页。结合了段式和页式的优点。 <br></li></ol><h2 id="_11-页式管理重要概念-快表-多级页表" tabindex="-1"><a class="header-anchor" href="#_11-页式管理重要概念-快表-多级页表" aria-hidden="true">#</a> 11. 页式管理重要概念：快表&amp;多级页表 <br></h2><p>多级页表（作用是：索引）：把单级页表再次分页。避免把全部页表一直放内存中占用过多空间。属于时间换空间的场景。 <br> 快表（作用域：缓存）：把最常用的几个页表存储到Cache，这个Cache就是TLB(Translation Lookaside Buffer),通常称为页表缓存、转址旁路缓存、快表。解决虚拟地址到物理地址的转换速度。可以把快表理解为一种特殊的高速缓冲存储器Cache。属于空间换时间。（类似redis缓存的作用） <br> 采用多级页表，节省了空间，浪费了时间，于是用快表补充损失的时间性能。 <br></p><h2 id="_12-虚拟内存-虚拟地址-物理内存-物理地址" tabindex="-1"><a class="header-anchor" href="#_12-虚拟内存-虚拟地址-物理内存-物理地址" aria-hidden="true">#</a> 12. 虚拟内存（虚拟地址）&amp;物理内存（物理地址） <br></h2><p>虚拟内存是操作系统提供的一种机制，将虚拟内存地址和物理内存地址映射起来。 <br> 目前，大多数操作系统都使用了虚拟内存，如Windows的“虚拟内存”，Linux的“交换空间”。 <br> 虚拟内存的好处：使用这种技术的系统使得大型程序的编写变得更容易，对真正的物理内存的使用也更有效率。 <br> 具体来说： <br></p><ol><li>可以让程序拥有超过物理内存大小的可用内存空间（使用磁盘空间来扩展内存） <br></li><li>虚拟内存使每个进程拥有一片连续完整的内存空间（实际上这片完整虚拟内存，在物理内存上被分割成多个物理内存碎片） <br></li><li>不让用户直接接触物理内存，更安全 <br></li></ol><h2 id="_13-交换空间-磁盘上用于扩展内存的一块空间-就叫交换空间。" tabindex="-1"><a class="header-anchor" href="#_13-交换空间-磁盘上用于扩展内存的一块空间-就叫交换空间。" aria-hidden="true">#</a> 13. 交换空间：磁盘上用于扩展内存的一块空间，就叫交换空间。 <br></h2><p><strong>虚拟内存容量 = 物理内存容量 + 交换空间容量</strong> <br></p><h2 id="_14-页面置换算法" tabindex="-1"><a class="header-anchor" href="#_14-页面置换算法" aria-hidden="true">#</a> 14. 页面置换算法 <br></h2><p>在载⼊程序的时候，只需要将程序的⼀部分装⼊内存，⽽将其他部分留在外存，然后程序就可以执⾏了。当所要访问的⻚⾯不在内存中，则发⽣<strong>缺⻚中断</strong> 。当缺页中断时，<strong>内存中没有空闲页面</strong>，操作系统就必须选择一个页面移出内存，把需要的页移入内存。 <br> 用来选择淘汰哪一页的规则叫做页面置换算法（淘汰页面的规则）。 <br></p><ol><li>LFU (Least Frequently Used 最少使用) <br></li><li>LRU (Least Currently Used 最近最少使用) <br></li><li>FIFO (First In First Out 先进先出) <br></li><li>OPT ( Optimal ,OPT, 最佳页面置换算法)：淘汰将来最远使用到的。无法实现，一般用作衡量方法。 <br></li></ol><h1 id="区分io密集、内存密集和计算密集" tabindex="-1"><a class="header-anchor" href="#区分io密集、内存密集和计算密集" aria-hidden="true">#</a> 区分IO密集、内存密集和计算密集</h1><p>IO密集型：要处理的数据存储在磁盘，比如数据库中。<strong>代码的性能瓶颈主要在磁盘。</strong> <br> 内存密集型：要处理的数据存储在内存。<strong>代码的性能瓶颈主要在内存数据的存取。</strong> <br> 计算密集型（CPU密集型）：<strong>代码的性能瓶颈主要在CPU执行的效率。</strong> <br></p><h1 id="java-中-io-流分为几种" tabindex="-1"><a class="header-anchor" href="#java-中-io-流分为几种" aria-hidden="true">#</a> Java 中 IO 流分为几种?</h1><p>流按照不同的特点，有很多种划分方式。 <br></p><ul><li>按照流的流向分，可以分为<strong>输入流</strong>和<strong>输出流</strong>； <br></li><li>按照操作单元划分，可以划分为<strong>字节流</strong>和<strong>字符流</strong>； <br></li><li>按照流的角色划分为<strong>节点流</strong>和<strong>处理流</strong> <br></li></ul><p>Java Io 流共涉及 40 多个类，看上去杂乱，其实都存在一定的关联， Java IO流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。 <br></p><ul><li><strong>InputStream</strong>/<strong>Reader</strong>: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。 <br></li><li><strong>OutputStream</strong>/<strong>Writer</strong>: 所有输出流的基类，前者是字节输出流，后者是字符输出流。 <br></li></ul><p><img src="'+o+'" alt="" loading="lazy"> <br> IO-操作方式分类 <br> IO 流用到了什么设计模式？ <br> 其实，Java 的 IO 流体系还用到了一个设计模式——<strong>装饰器模式</strong>。 <br><img src="'+t+'" alt="" loading="lazy"> <br> Java IO流用到装饰器模式 <br></p><h2 id="既然有了字节流-为什么还要有字符流" tabindex="-1"><a class="header-anchor" href="#既然有了字节流-为什么还要有字符流" aria-hidden="true">#</a> 既然有了字节流,为什么还要有字符流?</h2><p>其实字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还比较耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。 <br> 所以， I/O 流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。 <br></p><h1 id="bio、nio、aio" tabindex="-1"><a class="header-anchor" href="#bio、nio、aio" aria-hidden="true">#</a> BIO、NIO、AIO</h1><h2 id="io汇总表概览" tabindex="-1"><a class="header-anchor" href="#io汇总表概览" aria-hidden="true">#</a> IO汇总表概览</h2><figure><img src="'+s+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><h2 id="五大io模型-狭义nio" tabindex="-1"><a class="header-anchor" href="#五大io模型-狭义nio" aria-hidden="true">#</a> 五大IO模型（狭义NIO）</h2><p>unix提供了5种IO模型 <br> 1、阻塞IO <br> 2、非阻塞IO <br> 3、IO多路复用 <br> 4、信号量 <br> 5、异步IO <br> 阻塞等待的是<strong>内核数据准备好</strong>和<strong>数据从内核态拷贝到用户态</strong>这两个过程。 <br><img src="'+E+'" alt="image.png" loading="lazy"> <br><img src="'+h+'" alt="" loading="lazy"> <br><img src="'+d+'" alt="" loading="lazy"> <br><img src="'+B+'" alt="" loading="lazy"> <br><img src="'+b+'" alt="" loading="lazy"> <br><img src="'+c+'" alt="" loading="lazy"> <br></p><h2 id="bio-阻塞i-o-blocking-i-o" tabindex="-1"><a class="header-anchor" href="#bio-阻塞i-o-blocking-i-o" aria-hidden="true">#</a> BIO (阻塞I/O, blocking I/O)</h2><p>传统的 IO，同步阻塞，服务器实现模式为一个连接一个线程，即<strong>客户端有连接请求时服务器端就需要启动一个线程进行处理</strong>，如果这个连接不做任何事情会造成不必要的线程开销，可以通过连接池机制改善(实现多个客户连接服务器)。 <br><img src="'+A+'" alt="" loading="lazy"> <br> BIO 方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 以前的唯一选择，程序简单易理解。 <br></p><h2 id="nio-io多路复用-非阻塞i-o-noblocking-i-o" tabindex="-1"><a class="header-anchor" href="#nio-io多路复用-非阻塞i-o-noblocking-i-o" aria-hidden="true">#</a> NIO/IO多路复用 (非阻塞I/O, noblocking I/O)</h2><h3 id="bio与nio的区别" tabindex="-1"><a class="header-anchor" href="#bio与nio的区别" aria-hidden="true">#</a> BIO与NIO的区别</h3><figure><img src="'+p+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><h3 id="nio三大核心组件-selector-选择器-、channel-通道-、buffer-缓冲器" tabindex="-1"><a class="header-anchor" href="#nio三大核心组件-selector-选择器-、channel-通道-、buffer-缓冲器" aria-hidden="true">#</a> NIO三大核心组件：Selector（选择器）、Channel（通道）、Buffer（缓冲器）</h3><p><strong>NIO</strong> ：全称 java non-blocking IO，是指 JDK 提供的新 API。从 JDK1.4 开始，Java 提供了一系列改进的输入/输出的新特性，被统称为 NIO(即 New IO)。 <br> NIO 是<strong>同步非阻塞</strong>的，服务器端用一个线程处理多个连接，客户端发送的连接请求会注册到多路复用器上，多路复用器轮询到连接有 IO 请求就进行处理。 <br> NIO 的数据是面向<strong>缓冲区 Buffer</strong>的，必须从 Buffer 中读取或写入。 <br><img src="'+g+`" alt="" loading="lazy"> <br> NIO示意图 <br> 可以看出，NIO 或 IO多路复用 的运行机制： <br></p><ol><li>Selector <br></li></ol><p>通过Selector来管理多个Channel的读写操作。Selector 对应一个线程，一个Selector对应多个 Channel。Selector 会根据Channel上发生的读写事件，在各个通道上切换。 <br></p><ol start="2"><li>Channel <br></li></ol><p>通过Channel对象来进行读写操作。Channel会注册到Selector。Channel 类似于一个流，但Channel是双向的，而Stream是单向的，InputStream只负责输入，OutputStream只负责输出。Buffer和Channel都是可读可写的。 <br></p><ol start="3"><li>Buffer <br></li></ol><p>通过Buffer对象缓存读写的内容。每个 Channel 对应一个 Buffer。Buffer 是内存块，底层是数据。 <br></p><h3 id="i-o多路复用的三种实现机制" tabindex="-1"><a class="header-anchor" href="#i-o多路复用的三种实现机制" aria-hidden="true">#</a> I/O多路复用的三种实现机制</h3><p>背景：服务端需要支持多个客户端，多个客户端连接一个服务端 <br> 传统I/O处理：服务端为每个客户端单独分配一个进程/线程来处理。 <br> IO多路复用：服务端用一个进程/线程来处理多个客户端连接（Socket连接）。多路复用就是指多个连接复用一个进程/线程。高效的处理多个网络连接请求，尽量减少网络IO的时间消耗。 <br> 应用：netty、redis都采用了 <br> 文件描述符集合 = Socket连接集合 = 已连接的客户端集合 <br> 文件描述符（FD，File Descriptor）：是一个抽象的概念，形式上是一个整数，实际上是一个索引值，指向一个Socket连接。 <br></p><h4 id="select与poll" tabindex="-1"><a class="header-anchor" href="#select与poll" aria-hidden="true">#</a> select与poll</h4><p>具体操作<br> 1.已连接的 Socket 都放到⼀个文件描述符集合fd_set<br> 2.调⽤ select 函数将fd_set集合拷⻉到内核⾥（用户态拷贝到内核）<br> 3.内核检查是否有⽹络事件产⽣，检查的⽅式很粗暴，就是通过遍历fd_set的⽅式，当检查到有事件产⽣后，将此 Socket 标记为可读或可写（内核态遍历标记）<br> 4.内核把整个fd_set拷⻉回⽤户态（内核态拷贝到用户态）<br> 5.⽤户态通过遍历的⽅法找到可读或可写的 Socket进行处理（用户态遍历处理）<br></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>while(1){
    for(Fd in Fds){
    	if(Fd有数据){
        	读Fd;
            处理;
        }
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="epoll" tabindex="-1"><a class="header-anchor" href="#epoll" aria-hidden="true">#</a> epoll</h4><p><img src="`+f+'" alt="image.png" loading="lazy"> <br> 红黑树来管理注册fd（维护socket连接），就绪列表来收集所有就绪fd（有事件发生，回调函数回调处理，把文件描述符添加到就绪队列）。 <br><img src="'+u+'" alt="image.png" loading="lazy"> <br> 具体操作<br> 基于事件驱动<br> epoll_create：创建一个 epoll 实例，该实例代表了一个文件描述符的集合。在内核cache里建了个红黑树用于存储以后epoll_ctl传来的socket外，还会再建立一个list链表，用于存储准备就绪的事件。<br> epoll_ctl（红黑树：管理连接，对连接进行增删查。添加（注册进来，建立连接）、删除（注销，关闭连接）和查找（新注册时，看看是否已经注册了）O(log n)）：将文件描述符添加（注册文件描述符）到 epoll 实例中，并指定要监视的事件类型（读、写、错误等），进行监听，并且告知内核注册回调函数。<br> epoll_wait（双向链表，就绪Socket列表，回调函数会把就绪的放到就绪列表中）：等待事件的发生。该调用会阻塞，直到有注册的文件描述符上发生了指定的事件。一旦有事件发生，epoll_wait 返回事件的详细信息，包括触发事件的文件描述符和事件类型。根据 epoll_wait 返回的事件信息，执行相应的操作。这可以包括读取数据、写入数据、连接处理等。<br></p><h4 id="比较" tabindex="-1"><a class="header-anchor" href="#比较" aria-hidden="true">#</a> 比较</h4><figure><img src="'+_+'" alt="Alt text" tabindex="0" loading="lazy"><figcaption>Alt text</figcaption></figure><h2 id="aio-异步i-o-asynchronous-i-o" tabindex="-1"><a class="header-anchor" href="#aio-异步i-o-asynchronous-i-o" aria-hidden="true">#</a> AIO (异步I/O,Asynchronous I/O)</h2><p>JDK 7 引入了 Asynchronous I/O，是<strong>异步非阻塞</strong>的 IO。在进行 I/O 编程中，常用到两种模式：Reactor 和 Proactor。Java 的 NIO 就是 Reactor，当有事件触发时，服务器端得到通知，进行相应的处理，完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。 <br></p>',72),m=[I];function F(x,C){return r(),i("div",null,m)}const v=a(O,[["render",F],["__file","操作系统.html.vue"]]);export{v as default};
