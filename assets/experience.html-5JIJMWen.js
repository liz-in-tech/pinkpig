import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as r,f as i}from"./app-DJTr8_lk.js";const h="/pinkpig/assets/experience_001-_nr_G4nc.png",n="/pinkpig/assets/experience_002-zxREz1O-.png",t="/pinkpig/assets/experience_003-2qDHOArN.png",p={},d=i('<h1 id="经验积累" tabindex="-1"><a class="header-anchor" href="#经验积累" aria-hidden="true">#</a> 经验积累</h1><h2 id="如何看源码" tabindex="-1"><a class="header-anchor" href="#如何看源码" aria-hidden="true">#</a> 如何看源码</h2><h3 id="第一步-有一个示例代码" tabindex="-1"><a class="header-anchor" href="#第一步-有一个示例代码" aria-hidden="true">#</a> 第一步：有一个示例代码</h3><p>方式一：找源码里的test</p><p>方式二：让AI帮忙写用于看源码的简单示例代码</p><h3 id="第二步-找到源码入口" tabindex="-1"><a class="header-anchor" href="#第二步-找到源码入口" aria-hidden="true">#</a> 第二步：找到源码入口</h3><p>先找到入口，切记，入口只有一个</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>哪里是入口？run方法，直接能跑起来的地方 Note：如果从第一行代码作为入口看，那要看死自己啊</p><h3 id="第三步-从入口看下去" tabindex="-1"><a class="header-anchor" href="#第三步-从入口看下去" aria-hidden="true">#</a> 第三步：从入口看下去</h3><h4 id="step1-直接去llmchain找run方法-没找到" tabindex="-1"><a class="header-anchor" href="#step1-直接去llmchain找run方法-没找到" aria-hidden="true">#</a> Step1：直接去LLMChain找run方法-&gt;没找到</h4><p>第一反应该怎么办？答：看有没有父类</p><p>方法论： 不管什么框架，其结构一定都是：接口-&gt;抽象类-&gt;实现类。接口定义模式，抽象类定义流程，实现类定义逻辑。</p><p>大部分框架源码用到了模板方法，装饰器，代理，工厂，单例这几个设计模式</p><p>不推荐大家打断点去调试</p><h4 id="step2-在父类chain里找到了run方法-有很多if判断后抛异常的直接忽略不用看-直接看真正做实事的-提高效率" tabindex="-1"><a class="header-anchor" href="#step2-在父类chain里找到了run方法-有很多if判断后抛异常的直接忽略不用看-直接看真正做实事的-提高效率" aria-hidden="true">#</a> Step2：在父类Chain里找到了run方法-&gt;有很多if判断后抛异常的直接忽略不用看，直接看真正做实事的，提高效率</h4><h4 id="step3-代码chain-run-colorful-socks-有一个参数-所以只有图中标蓝的那一行代码需要看" tabindex="-1"><a class="header-anchor" href="#step3-代码chain-run-colorful-socks-有一个参数-所以只有图中标蓝的那一行代码需要看" aria-hidden="true">#</a> Step3：代码chain.run(&quot;colorful socks&quot;)有一个参数，所以只有图中标蓝的那一行代码需要看</h4><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个语法是python的新特性，self()直接会调用__call__函数，这是一个约定</p><h4 id="step4-看-call-函数" tabindex="-1"><a class="header-anchor" href="#step4-看-call-函数" aria-hidden="true">#</a> Step4：看__call__函数</h4><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>开源框架里的注释一定要多看</p><p>特殊场景的跳过，只看通用场景</p><h2 id="面试项目介绍" tabindex="-1"><a class="header-anchor" href="#面试项目介绍" aria-hidden="true">#</a> 面试项目介绍</h2><p>不要在简历中出现业务密集的项目，即便是业务密集的项目，你也要把它搞成技术密集的项目 <br> 面试官感兴趣的是，你用到哪些技术原型 <br></p><p>介绍项目背景 <br></p><blockquote><p>背景只需要简单的介绍，后面的才是重点，不要本末倒置。 <br></p></blockquote><p>介绍项目自己负责的模块和功能 <br></p><blockquote><p>介绍这个的时候就能够看出你所负责的模块的难度，也就是你所做的工作的难度。 <br></p></blockquote><p>介绍项目的难点和亮点 <br></p><blockquote><p><strong>其实，面试官问你的项目难点，无非就是想要看看你对于这个项目的了解程度，所以，其实，很多时候只要把我们学过的知识，然后再跟实际的项目进行融会贯通，解决这个问题就非常的简单了。</strong> <br> 这里给出一个例子： <br> 比如你说，我在项目中有对数据库进行优化，然后，你把整个优化的过程说一遍，你再说以前没有接触过这方面的工作，有一定的挑战，而且数据量特别大，但是，通过自己的摸索，最终解决了问题，取得了不错的效果，当然，最主要的还是你讲述你优化的过程，能够让面试官感觉你真的有做这个工作；讲述的期间最好能够把你学过的知识用上，比如说，索引，数据库的设计等等。 <br></p></blockquote><h2 id="找工作准备" tabindex="-1"><a class="header-anchor" href="#找工作准备" aria-hidden="true">#</a> 找工作准备</h2><h3 id="提升影响力-都围绕github来" tabindex="-1"><a class="header-anchor" href="#提升影响力-都围绕github来" aria-hidden="true">#</a> 提升影响力（都围绕github来）</h3><p>github开源+技术博客</p><h3 id="项目" tabindex="-1"><a class="header-anchor" href="#项目" aria-hidden="true">#</a> 项目</h3><p>以往的工作总结好</p><p>勤于记录当下工作内容与整理技术难点，时刻为离职后找下一份工作做好准备</p><h3 id="算法" tabindex="-1"><a class="header-anchor" href="#算法" aria-hidden="true">#</a> 算法</h3><p>自己的题库分类刷题并总结</p><p>力扣周赛</p><p>CodeTop企业题库</p><h3 id="技能积累提升" tabindex="-1"><a class="header-anchor" href="#技能积累提升" aria-hidden="true">#</a> 技能积累提升</h3><p>读必读技术书</p><p>读源码</p><p>学新技术</p><p>将学到的知识坚持写博客</p><p>注重实践，在github开源实践项目</p>',47),c=[d];function s(o,l){return e(),r("div",null,c)}const b=a(p,[["render",s],["__file","experience.html.vue"]]);export{b as default};
