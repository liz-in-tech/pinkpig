const t=JSON.parse('{"key":"v-b87c95c4","path":"/cs/code/data_structure/4.%E9%98%9F%E5%88%97.html","title":"队列","lang":"en-US","frontmatter":{"icon":"lightbulb","description":"队列 （1）队列也是一种“操作受限”的线性表，只支持两种基本操作：入队（队尾）和出队 （队头） （2）顺序队列和链式队列 顺序队列：用数组实现 针对队尾满了，对头还有很多空位，解决方案：循环队列；一旦队尾满了，整体移到前面（不如循环队列） 链式队列：用链表实现 （3）循环队列 要想写出没有 bug 的循环队列实现代码，关键要确定好队空和队满的判定条件。 队满判定条件：head=tail 队满判定条件：(tail+1)%n=head （4）阻塞队列与并发队列 阻塞队列、并发队列，底层都还是队列这种数 据结构，只不过在之上附加了很多其他功能。阻塞队列就是入队、出队操作可以阻塞，并发 队列就是队列的操作多线程安全。 （5）应用 算法中应用：广度优先搜索","head":[["meta",{"property":"og:url","content":"https://liz-in-tech.github.io/pinkpig/cs/code/data_structure/4.%E9%98%9F%E5%88%97.html"}],["meta",{"property":"og:site_name","content":"Liz"}],["meta",{"property":"og:title","content":"队列"}],["meta",{"property":"og:description","content":"队列 （1）队列也是一种“操作受限”的线性表，只支持两种基本操作：入队（队尾）和出队 （队头） （2）顺序队列和链式队列 顺序队列：用数组实现 针对队尾满了，对头还有很多空位，解决方案：循环队列；一旦队尾满了，整体移到前面（不如循环队列） 链式队列：用链表实现 （3）循环队列 要想写出没有 bug 的循环队列实现代码，关键要确定好队空和队满的判定条件。 队满判定条件：head=tail 队满判定条件：(tail+1)%n=head （4）阻塞队列与并发队列 阻塞队列、并发队列，底层都还是队列这种数 据结构，只不过在之上附加了很多其他功能。阻塞队列就是入队、出队操作可以阻塞，并发 队列就是队列的操作多线程安全。 （5）应用 算法中应用：广度优先搜索"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-10-29T16:42:17.000Z"}],["meta",{"property":"article:author","content":"Liz"}],["meta",{"property":"article:modified_time","content":"2024-10-29T16:42:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"队列\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-29T16:42:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Liz\\",\\"url\\":\\"https://github.com/liz-in-tech\\"}]}"]]},"headers":[{"level":2,"title":"双端队列Deque","slug":"双端队列deque","link":"#双端队列deque","children":[]},{"level":2,"title":"单调队列","slug":"单调队列","link":"#单调队列","children":[]}],"git":{"createdTime":1730220137000,"updatedTime":1730220137000,"contributors":[{"name":"unknown","email":"15721607377@163.com","commits":1}]},"readingTime":{"minutes":3.72,"words":1117},"filePathRelative":"cs/code/data_structure/4.队列.md","localizedDate":"October 29, 2024","excerpt":"<h1> 队列</h1>\\n<p>（1）队列也是一种“操作受限”的线性表，只支持两种基本操作：入队（队尾）和出队 （队头）  <br>\\n（2）顺序队列和链式队列 <br>\\n顺序队列：用数组实现 <br>\\n针对队尾满了，对头还有很多空位，解决方案：循环队列；一旦队尾满了，整体移到前面（不如循环队列） <br>\\n链式队列：用链表实现 <br>\\n（3）循环队列 <br>\\n要想写出没有 bug 的循环队列实现代码，关键要确定好队空和队满的判定条件。 <br>\\n队满判定条件：head=tail <br>\\n队满判定条件：(tail+1)%n=head <br>\\n（4）阻塞队列与并发队列 <br>\\n阻塞队列、并发队列，底层都还是队列这种数 据结构，只不过在之上附加了很多其他功能。阻塞队列就是入队、出队操作可以阻塞，并发 队列就是队列的操作多线程安全。   <br>\\n（5）应用 <br>\\n算法中应用：广度优先搜索 <br></p>","autoDesc":true}');export{t as data};
