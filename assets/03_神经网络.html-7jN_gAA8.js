import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as r,c as n,e as l,a as i,b as a}from"./app-J0zIS755.js";const t="/pinkpig/assets/nlp_006-97x9TtH-.png",h="/pinkpig/assets/nlp_008-ku0yQRoE.png",d="/pinkpig/assets/nlp_009-fpuwjR6i.png",s="/pinkpig/assets/nlp_010-uLwipgoU.png",p="/pinkpig/assets/nlp_014-Gw137pxR.png",u="/pinkpig/assets/nlp_017-ZrahlH2f.png",o="/pinkpig/assets/nlp_018-Mpc-0du2.png",c="/pinkpig/assets/nlp_019-Q3E-STTg.png",_="/pinkpig/assets/nlp_022-6GARV98k.png",g="/pinkpig/assets/nlp_023-CDihARF9.png",f={},x=l('<h1 id="神经网络" tabindex="-1"><a class="header-anchor" href="#神经网络" aria-hidden="true">#</a> 神经网络</h1><h2 id="_1-欠拟合与过拟合" tabindex="-1"><a class="header-anchor" href="#_1-欠拟合与过拟合" aria-hidden="true">#</a> 1. 欠拟合与过拟合</h2><ul><li>欠拟合（Underfitting）：模型在训练数据上表现不佳，无法很好捕捉到数据的特征和模式的现象</li><li>过拟合（Overfitting）：模型在训练数据上表现很好，但在未见过的测试数据上表现较差的现象（泛化能力差， 记忆了训练数据） <ul><li>通常发生在模型过于复杂或者训练数据较少的情况下</li><li>解决方式 <ul><li>数据增强（Data Augmentation）：可以对数据进行扩增，如旋转、缩放、翻转等，从而增加训练数据的多样性，减少模型对于训练数据的过拟合</li><li>提前停止（Early Stopping）：在训练过程中监控模型在验证数据上的性能，当性能开始下降时，提前停止训练，避免过拟合</li><li>正则化（Regularization）：可以通过在模型的损失函数中引入正则化项来限制模型的参数值，从而减少模型的复杂度，防止过拟合</li></ul></li></ul></li></ul><h2 id="_2-直观表现" tabindex="-1"><a class="header-anchor" href="#_2-直观表现" aria-hidden="true">#</a> 2. 直观表现</h2><ul><li>是由多个点和线组成的 <ul><li>每一个点: 神经元 <ul><li>每个非输入层的神经元都是一个非线性的激活函数，都有一个偏置参数</li><li>神经元接收多个输入值（通常用向量表示），对输入值进行加权求和；然后通过一个激活函数（Activation Function）进行非线性映射，生成神经元的输出</li></ul></li><li>每一条线: 连接相邻两层的神经元，代表一个权重，形容了连接的强弱</li></ul></li></ul><figure><img src="'+t+'" alt="公式" tabindex="0" loading="lazy"><figcaption>公式</figcaption></figure><h2 id="_3-分层结构" tabindex="-1"><a class="header-anchor" href="#_3-分层结构" aria-hidden="true">#</a> 3. 分层结构</h2><h3 id="_3-1-层的分类" tabindex="-1"><a class="header-anchor" href="#_3-1-层的分类" aria-hidden="true">#</a> 3.1. 层的分类</h3><h4 id="_3-1-1-按功能和特点" tabindex="-1"><a class="header-anchor" href="#_3-1-1-按功能和特点" aria-hidden="true">#</a> 3.1.1. 按功能和特点</h4><ul><li>全连接层</li><li>激活层</li><li>规范化层/归一化层</li><li>卷积层</li><li>池化层</li><li>循环层</li><li>嵌入层</li></ul><h5 id="_3-1-1-1-全连接层-fully-connected-layer" tabindex="-1"><a class="header-anchor" href="#_3-1-1-1-全连接层-fully-connected-layer" aria-hidden="true">#</a> 3.1.1.1. 全连接层(Fully Connected Layer)</h5><p>两层之间，每层的每个神经元都和另一层的所有神经元都相连</p><h5 id="_3-1-1-2-激活层" tabindex="-1"><a class="header-anchor" href="#_3-1-1-2-激活层" aria-hidden="true">#</a> 3.1.1.2. 激活层</h5><p>激活层为非线性映射，没有激活函数，无论网络有多深，输出都只是输入的线性组合，这将大大限制网络的表示能力。</p><p>在实践中，ReLU（Rectified Linear Unit）及其变种是最常用的激活函数，因为它们的计算效率高，并且能够在一定程度上缓解梯度消失问题。激活函数通常应用于卷积层的输出上，为网络引入非线性，增加模型的深度和复杂度，使模型能够捕捉更加复杂的特征。</p><ul><li>激活函数：加入激活函数就是给模型引入非线性能力 <ul><li>每个非输入层的神经元是一个激活函数，激活函数本质是一个非线性的函数</li><li>激活函数引入了非线性操作，使得神经网络可以更好地拟合复杂的非线性关系</li><li>通过激活函数的处理，入参和返参的结构没有变，只调整了其中的值</li><li>如果单看一个神经元，激活函数的入参和返参都是一个数；一般同一层的神经元使用同样的激活函数，会进行同一层的神经元作为向量一起计算，那么激活函数的入参和返参就是同样结构为【该层神经元数*1】的列向量</li><li>入参：加权求和的结果</li><li>返参：对入参非线性处理的结果</li><li>选择合适的激活函数对于模型的性能至关重要</li></ul></li><li>常用激活函数（不同的激活函数，特点和作用不同） <ul><li>Sigmoid函数 <ul><li>将输入映射到[0, 1]之间</li><li>常用于二分类问题或者作为输出层的激活函数</li><li>可能会导致梯度消失问题</li></ul></li><li>Tanh函数 <ul><li>将输入映射到[-1, 1]之间</li><li>常用于二分类问题或者作为输出层的激活函数</li><li>可能会导致梯度消失问题</li><li>Sigmoid和tanh的特点是将输出映射在[0,1]和[-1,1]之间，说明Sigmoid和tanh适合做概率值的处理，例如LSTM中的各种门；而ReLU就不行，因为ReLU无最大值限制，可能会出现很大值。</li><li>tanh 函数可以由 sigmoid 函数经过平移和拉伸得到，两者函数曲线形状相似</li><li>tanh 函数可以理解为是基于 sigmoid 函数的一种改进的激活函数</li></ul></li><li>Softmax函数 <ul><li>将输入映射为概率分布（输出的向量的每一个值都为正而且元素之和为一）</li><li>常用于多分类问题的输出层</li></ul></li><li>ReLU（Rectified Linear Unit） <ul><li>将负数输入映射为0，保留正数输入</li><li>常用于隐藏层的激活函数</li><li>适合用于深层网络的训练，而Sigmoid和tanh则不行，因为它们会出现梯度消失。</li><li>经过实际实验发现，使用 ReLU 作为激活函数，模型收敛的速度比 sigmoid 和 tanh 快</li><li>ReLU 有可能会导致梯度爆炸问题，解决方法是梯度截断</li><li>ReLU的变体：都是为了解决 ReLU 的 Dead ReLU 问题 <ul><li>Leaky ReLU <ul><li>其在z&gt;0的部分与ReLU一样保持不变；在z&lt;0的部分，采用一个非常小的斜率0.01</li><li>但是该方法的缺点是效果并不稳定，所以实际实验中使用该方法的并不多</li></ul></li><li>PReLU <ul><li>可学习参数作为z&lt;0的斜率</li></ul></li><li>RReLU <ul><li>随机数作为z&lt;0的斜率</li></ul></li><li>ELU（指数线性单元）</li></ul></li></ul></li></ul></li></ul><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="_3-1-1-3-规范化层-归一化层" tabindex="-1"><a class="header-anchor" href="#_3-1-1-3-规范化层-归一化层" aria-hidden="true">#</a> 3.1.1.3. 规范化层/归一化层</h5><p>是深度学习中常用的技术，旨在通过调整网络中间层的输出，使其具有稳定的分布。这有助于加快训练速度，提高模型性能，并且还能起到一定的正则化效果。</p><p>为什么要进行归一化处理？ 归一化可以减少内部协变量偏移（internal covariate shift），即保证网络各层输入分布的稳定性，从而使模型训练更加稳定和快速。归一化通常在卷积操作和激活函数之间进行。</p><h5 id="_3-1-1-4-卷积层" tabindex="-1"><a class="header-anchor" href="#_3-1-1-4-卷积层" aria-hidden="true">#</a> 3.1.1.4. 卷积层</h5><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在被卷积矩阵上移动做乘法和加法得到提取后的特征</p><p>因为卷积层能够有效地提取图像特征，并减少模型中参数的数量（相比于全连接层），从而降低过拟合的风险并提高模型的泛化能力。卷积操作保持了图像的空间层次结构，使得网络能够利用图像的局部空间相关性。</p><h5 id="_3-1-1-5-池化层" tabindex="-1"><a class="header-anchor" href="#_3-1-1-5-池化层" aria-hidden="true">#</a> 3.1.1.5. 池化层</h5><p>压缩特征，保留主要特征</p><p>池化操作可以认为是将一张分辨率高的图片转化为分辨率较低的图片</p><p>池化层通常跟随在卷积层之后，其主要作用是进行下采样或降维，减少数据的空间大小，从而减少计算量和参数数量，防止过拟合。</p><p>三种池化策略</p><ul><li>最大池化</li><li>最小池化</li><li>平均池化</li></ul><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_3-1-2-按位置" tabindex="-1"><a class="header-anchor" href="#_3-1-2-按位置" aria-hidden="true">#</a> 3.1.2. 按位置</h4><ul><li>输入层/第一层神经元 <ul><li>模型的输入：能表示原始数据信息的向量</li></ul></li><li>隐层/中间层(Hidden Layer) <ul><li>输入层和输出层之间的神经元集合</li><li>隐层的神经元数量、激活函数的选择以及层次结构的设计等因素都会对神经网络的性能和学习能力产生影响，因此在设计和训练神经网络时，隐层的设置通常需要经验和调优</li></ul></li><li>输出层/最后一层神经元 <ul><li>模型的输出</li></ul></li></ul><h2 id="_4-mlp-multiple-layer-perceiver-多层感知器" tabindex="-1"><a class="header-anchor" href="#_4-mlp-multiple-layer-perceiver-多层感知器" aria-hidden="true">#</a> 4. MLP,Multiple-Layer Perceiver(多层感知器)</h2><ul><li>MLP是最基本的神经网络，属于前馈神经网络（Feedforward Neural Network)。在前馈神经网络中，信息在网络中从输入层（Input Layer）经过多个中间层（Hidden Layers）传递到输出层（Output Layer），并且信息在网络中只能向前传播，不会形成循环。前馈神经网络也被称为无记忆神经网络（Memoryless Neural Network），因为网络中没有存储之前计算的状态。</li><li>优点：具有较强的非线性建模能力；可以进行端到端的学习；可以并行计算</li><li>缺点：容易陷入局部最优；容易过拟合；全连接的结构太过复杂，参数超级多</li></ul><h2 id="_5-神经网络本质-整个神经网络-就是一个有成千上万个可调节参数的超级大函数" tabindex="-1"><a class="header-anchor" href="#_5-神经网络本质-整个神经网络-就是一个有成千上万个可调节参数的超级大函数" aria-hidden="true">#</a> 5. 神经网络本质：整个神经网络，就是一个有成千上万个可调节参数的超级大函数</h2><h3 id="_5-1-模型的整体表示" tabindex="-1"><a class="header-anchor" href="#_5-1-模型的整体表示" aria-hidden="true">#</a> 5.1. 模型的整体表示</h3>',37),m=i("p",null,[a("f(x;"),i("span",{class:"katex"},[i("span",{class:"katex-mathml"},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("semantics",null,[i("mrow",null,[i("mi",null,"θ")]),i("annotation",{encoding:"application/x-tex"},"\\theta")])])]),i("span",{class:"katex-html","aria-hidden":"true"},[i("span",{class:"base"},[i("span",{class:"strut",style:{height:"0.6944em"}}),i("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"θ")])])]),a(")")],-1),b=i("p",null,[a("其中，"),i("span",{class:"katex"},[i("span",{class:"katex-mathml"},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("semantics",null,[i("mrow",null,[i("mi",null,"θ")]),i("annotation",{encoding:"application/x-tex"},"\\theta")])])]),i("span",{class:"katex-html","aria-hidden":"true"},[i("span",{class:"base"},[i("span",{class:"strut",style:{height:"0.6944em"}}),i("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"θ")])])]),a("为要更新的参数")],-1),y=l('<h3 id="_5-2-模型参数-权重参数-偏置参数" tabindex="-1"><a class="header-anchor" href="#_5-2-模型参数-权重参数-偏置参数" aria-hidden="true">#</a> 5.2. 模型参数 = 权重参数 + 偏置参数</h3><ul><li>权重参数(w, weight) <ul><li>神经网络每一条线代表一个权重，是一个权重参数</li></ul></li><li>偏置参数(b, bias) <ul><li>神经网络中每个非输入层的神经元有一个偏置参数</li></ul></li></ul><p>当我们讨论机器如何学习时，我们其实就是在讨论：电脑如何设置成千上万的模型参数，从而让它能够正确帮我们解决问题</p><h3 id="_5-3-超参数-hyperparameters" tabindex="-1"><a class="header-anchor" href="#_5-3-超参数-hyperparameters" aria-hidden="true">#</a> 5.3. 超参数(Hyperparameters)</h3><p>人为设置的，不属于模型参数的范畴</p><p>是在机器学习算法中需要手动设置的参数，用于控制模型的学习过程和性能。与模型参数不同，超参数的值不能通过训练数据自动学习得到，而需要在训练之前由人工设置。</p><p>超参数的选择会影响模型的性能和训练速度，因此合理的超参数选择对于获得良好的模型性能非常重要。</p><h4 id="_5-3-1-常见的超参数" tabindex="-1"><a class="header-anchor" href="#_5-3-1-常见的超参数" aria-hidden="true">#</a> 5.3.1. 常见的超参数</h4><ul><li>Batch Size(批大小)</li><li>Learning Rate(学习率)</li><li>Epochs(迭代次数)</li><li>正则化(Regularization)</li><li>激活函数</li><li>网络结构（层数、神经元数量等）</li><li>损失函数</li><li>优化算法</li></ul><h4 id="_5-3-2-batch-size-批大小" tabindex="-1"><a class="header-anchor" href="#_5-3-2-batch-size-批大小" aria-hidden="true">#</a> 5.3.2. Batch Size(批大小)</h4><p>一次参数更新中使用的样本数量</p><p>在目前大多数模型的训练过程中，训练数据通常被划分为多个小批次（Batch）进行处理，每个批次包含一定数量的样本。</p><p>批大小的选择会直接影响模型的训练速度和内存占用。</p><ul><li>较大的批大小可以加速训练过程，因为可以利用硬件的并行性进行计算，但可能会占用更多的内存。</li><li>较小的批大小则可以减小内存占用，但可能导致计算效率较低。</li></ul><p>合适的批大小通常需要根据具体的任务和硬件资源进行选择，常见的取值范围通常在几十到几千之间。</p><h4 id="_5-3-3-learning-rate-学习率" tabindex="-1"><a class="header-anchor" href="#_5-3-3-learning-rate-学习率" aria-hidden="true">#</a> 5.3.3. Learning Rate(学习率)</h4><p>学习率用于控制模型在每一轮训练中对权重进行更新的步伐大小。具体来说，学习率决定了在梯度下降优化算法中，每次更新权重时权重的变化量。</p><p>学习率可以是恒定的，可以衰减，也可以自动调整</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>图中左边是参数向量，右边是梯度向量，我们是以梯度的倍数去调节左边的参数的，这个倍数其实就是学习率。</p><h4 id="_5-3-4-epochs-迭代次数" tabindex="-1"><a class="header-anchor" href="#_5-3-4-epochs-迭代次数" aria-hidden="true">#</a> 5.3.4. Epochs(迭代次数)</h4><p>表示模型在整个训练数据集上的训练次数</p><p>迭代次数的大小会影响模型的性能</p><ul><li>过少迭代次数可能导致欠拟合</li><li>过多迭代次数可能导致过拟合</li></ul><h4 id="_5-3-5-正则化-regularization" tabindex="-1"><a class="header-anchor" href="#_5-3-5-正则化-regularization" aria-hidden="true">#</a> 5.3.5. 正则化(Regularization)</h4><p>正则化是一种限制模型的参数值，减少模型的复杂度，从而避免模型在训练数据上过拟合的技术。</p><p>正则化方法</p><ul><li>L1 正则化(L1 Regularization，也称为 Lasso 正则化) <ul><li>一句话概括：把某些参数的权重变成0</li><li>L1 正则化可以用于控制神经网络中的参数稀疏性，使得模型权重倾向于稀疏化，从而减小模型复杂性，提高模型泛化能力</li></ul></li><li>L2 正则化(L2 Regularization，也称为 Ridge 正则化) <ul><li>一句话概括：抑制模型的一些权重取值过大</li><li>L2 正则化可以用于控制神经网络中的参数值的大小，使得模型权重趋向于较小的值，从而减小模型复杂性，提高模型泛化能力</li></ul></li><li>Dropout 正则化 <ul><li>一句话概括：扔掉一些神经元</li><li>Dropout 可以随机地设置某些神经元的输出为零，从而迫使网络在训练过程中不依赖于特定的神经元，从而减小模型复杂性，提高模型泛化能力</li></ul></li></ul><h4 id="_5-3-6-损失函数-目标函数-成本函数-目标损失函数-loss-function" tabindex="-1"><a class="header-anchor" href="#_5-3-6-损失函数-目标函数-成本函数-目标损失函数-loss-function" aria-hidden="true">#</a> 5.3.6. 损失函数/目标函数/成本函数/目标损失函数(Loss Function)</h4><p>用于评估模型的表现好坏</p><ul><li>在监督式学习中用来度量模型预测值与真实标签之间差异的函数</li><li>损失函数的大小取决于模型对训练数据的综合表现</li></ul><h5 id="_5-3-6-1-公式" tabindex="-1"><a class="header-anchor" href="#_5-3-6-1-公式" aria-hidden="true">#</a> 5.3.6.1. 公式</h5>',32),L=i("p",null,[a("L(y,f(x;"),i("span",{class:"katex"},[i("span",{class:"katex-mathml"},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("semantics",null,[i("mrow",null,[i("mi",null,"θ")]),i("annotation",{encoding:"application/x-tex"},"\\theta")])])]),i("span",{class:"katex-html","aria-hidden":"true"},[i("span",{class:"base"},[i("span",{class:"strut",style:{height:"0.6944em"}}),i("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"θ")])])]),a("))")],-1),w=l('<ul><li>入参：模型参数 <ul><li>直观看，入参是模型输出层结果，但本轮的模型参数唯一影响这个结果，所以真正的入参是所有的成千上万的模型参数</li></ul></li><li>返参：一个实数</li></ul><h5 id="_5-3-6-2-常用损失函数" tabindex="-1"><a class="header-anchor" href="#_5-3-6-2-常用损失函数" aria-hidden="true">#</a> 5.3.6.2. 常用损失函数</h5><h6 id="_5-3-6-2-1-交叉熵损失函数-cross-entropy-loss-function" tabindex="-1"><a class="header-anchor" href="#_5-3-6-2-1-交叉熵损失函数-cross-entropy-loss-function" aria-hidden="true">#</a> 5.3.6.2.1. 交叉熵损失函数(Cross-Entropy Loss Function)</h6><p>是一种用于测量两个概率分布之间差异的数学函数</p><p>公式</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对模型输出层中与真实标签对应的那个概率值取负对数</p><p>真实标签的概率值越大，Loss就越小</p><p>适用</p><p>语言模型的损失函数几乎都是交叉熵损失函数</p><p>语言模型里，我们经常去依据前文的信息去预测下一个单词会是什么；神经网络最后输出的其实也是一个所有词的概率分布。此时，交叉熵损失函数可以帮助我们度量模型预测的概率分布与我们真正想要的概率分布之间的差异。</p><p>常用于分类任务中，特别是在神经网络中作为损失函数</p><h6 id="_5-3-6-2-2-平方损失函数-quadratic-loss-function" tabindex="-1"><a class="header-anchor" href="#_5-3-6-2-2-平方损失函数-quadratic-loss-function" aria-hidden="true">#</a> 5.3.6.2.2. 平方损失函数(Quadratic Loss Function)</h6><p>适用</p><p>一般不用此</p><p>不适用于分类问题，而适用于预测的输出值是一个实数值的任务中</p><p>在强化学习的TD算法里，我们会用到它</p><p>公式</p><p>预测值与真实值的差的平方的二分之一</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h6 id="_5-3-6-2-3-均方误差-mse" tabindex="-1"><a class="header-anchor" href="#_5-3-6-2-3-均方误差-mse" aria-hidden="true">#</a> 5.3.6.2.3. 均方误差 (MSE)</h6><h4 id="_5-3-7-优化算法" tabindex="-1"><a class="header-anchor" href="#_5-3-7-优化算法" aria-hidden="true">#</a> 5.3.7. 优化算法</h4><p>优化算法就是决定在更新参数时如何调整步长、方向等因素，以最小化损失函数的值。</p><p>最常见的优化算法：随机梯度下降</p><ul><li>常用参数更新方法 <ul><li>梯度下降：在一个方向上更新和调整模型的参数，来最小化损失函数</li><li>随机梯度下降（Stochastic gradient descent，SGD） 对每个训练样本进行参数更新，每次执行都进行一次更新，且执行速度更快</li><li>小批量梯度下降（Mini Batch Gradient Descent）：对每个批次中的n个训练样本，这种方法只执行一次更新 <ul><li>通常来说，小批量样本的大小范围是从50到256，可以根据实际问题而有所不同。</li><li>在训练神经网络时，通常都会选择小批量梯度下降算法</li></ul></li><li>动量（Momentum）技术 <ul><li>通过优化相关方向的训练和弱化无关方向的振荡，来加速SGD训练</li></ul></li><li>Adam算法 <ul><li>即自适应时刻估计方法（Adaptive Moment Estimation），能计算每个参数的自适应学习率。这个方法不仅存储了AdaDelta先前平方梯度的指数衰减平均值，而且保持了先前梯度M(t)的指数衰减平均值，这一点与动量类似</li></ul></li></ul></li></ul><h2 id="_6-神经网络的训练" tabindex="-1"><a class="header-anchor" href="#_6-神经网络的训练" aria-hidden="true">#</a> 6. 神经网络的训练</h2><p>学习过程就是反复去做梯度下降，让损失最小化的过程</p><h3 id="_6-1-前向传播-forward-propagation" tabindex="-1"><a class="header-anchor" href="#_6-1-前向传播-forward-propagation" aria-hidden="true">#</a> 6.1. 前向传播(Forward Propagation)</h3><p>是神经网络训练的第一步</p><p>在神经网络中，从输入层到输出层的方向，进行信息传递的过程</p><p>在前向传播中，输入数据通过神经网络的多个层（包括输入层、隐藏层和输出层）按照预定的权重和偏置进行计算，从输入层传递到输出层，最终得到神经网络的预测结果</p><h3 id="_6-2-反向传播-back-propagation" tabindex="-1"><a class="header-anchor" href="#_6-2-反向传播-back-propagation" aria-hidden="true">#</a> 6.2. 反向传播(Back Propagation)</h3><p>反向传播就是公式从输出到输入的方向</p><p>反向传播是前向传播的逆过程，通过计算损失函数对神经网络输出的梯度，从输出层到输入层逐层的传播，计算每一层的梯度，并用于更新模型参数</p><p>反向传播的基本思想是根据链式法则计算损失函数对模型参数的梯度</p><h4 id="_6-2-1-梯度下降-gradient-descent" tabindex="-1"><a class="header-anchor" href="#_6-2-1-梯度下降-gradient-descent" aria-hidden="true">#</a> 6.2.1. 梯度下降(Gradient Descent)</h4><p>梯度下降就是更新模型参数，让损失做最大的下降的一次操作</p><p>负梯度向量其实告诉了我们，怎么去调节每一个参数，可以让神经网络的损失下降的最快。</p><h4 id="_6-2-2-梯度" tabindex="-1"><a class="header-anchor" href="#_6-2-2-梯度" aria-hidden="true">#</a> 6.2.2. 梯度</h4><p>梯度是一个向量，向量的维度就是模型参数的个数</p><p>它表示了这个多元函数在某一点上变化最快的方向和变化率，沿着这个方向，函数值的变化最大。</p><p>直观理解：最陡的方向</p><h4 id="_6-2-3-公式" tabindex="-1"><a class="header-anchor" href="#_6-2-3-公式" aria-hidden="true">#</a> 6.2.3. 公式</h4><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>假定每次训练我们使用 N 个样本，那么 Batch Size 就是 N。此时，Loss Function 就是这 N 个交叉熵函数的大小的平均值，我们是基于这个损失值去做反向传播，更新模型的参数的。</p><h4 id="_6-2-4-步骤" tabindex="-1"><a class="header-anchor" href="#_6-2-4-步骤" aria-hidden="true">#</a> 6.2.4. 步骤</h4><p>计算神经网络中各层权重和偏置的梯度并更新模型参数</p><ul><li>1.计算梯度 <ul><li>如何去计算那些梯度，变成了神经网络算法在工程实现上的核心问题。我们称之为反向传播算法</li></ul></li><li>2.更新模型参数 新的参数值 = 旧的参数值 - 学习率 * 梯度中该参数对应的值</li></ul><h4 id="_6-2-5-why" tabindex="-1"><a class="header-anchor" href="#_6-2-5-why" aria-hidden="true">#</a> 6.2.5. why</h4><p>让损失最小化，第一直觉就是求损失函数的最小值或极小值。但有成千上万参数的函数求最小值或极小值无法做到。</p><p>既然求不了最小值或极小值，那我们该怎么做呢？ 多元函数是一个曲面，因为模型的参数是随机初始化的，所以函数的结果就随机的落在了曲面的一个点上。</p><p>那我们就计算在每个方向的斜率，找到斜率最大的那个方向（最陡的方向），也就是梯度。然后沿着梯度方向往下走。（斜率很大，就多走几步快速下降；斜率很小，就少走几步，防止调过头）</p><p>对于每个点都如此反复，一直这么做下去，那么它就迟早会落到一个低点了。</p><p>想象一个人在凹凸不平的连绵不绝的山丘里找下山的路</p><h4 id="_6-2-6-梯度上升和梯度下降" tabindex="-1"><a class="header-anchor" href="#_6-2-6-梯度上升和梯度下降" aria-hidden="true">#</a> 6.2.6. 梯度上升和梯度下降</h4><ul><li>梯度上升 <ul><li>让多元函数的所有参数都沿着梯度的正方向走</li><li>此时函数值上升最快</li><li>适用场景：我们在强化学习的策略学习中，最大化状态价值函数，会做梯度上升</li></ul></li><li>梯度下降 <ul><li>让多元函数的所有参数都沿着梯度的反方向走</li><li>此时函数值下降最快</li><li>适用场景：在更多的场合，我们为了最小化损失，会去做梯度下降</li></ul></li></ul><h4 id="_6-2-7-梯度消失问题和梯度爆炸问题" tabindex="-1"><a class="header-anchor" href="#_6-2-7-梯度消失问题和梯度爆炸问题" aria-hidden="true">#</a> 6.2.7. 梯度消失问题和梯度爆炸问题</h4><h5 id="_6-2-7-1-what" tabindex="-1"><a class="header-anchor" href="#_6-2-7-1-what" aria-hidden="true">#</a> 6.2.7.1. what</h5><ul><li>梯度消失问题(Gradient Vanishing) <ul><li>现象 <ul><li>反向传播到较深层时，梯度非常小，甚至趋于零，导致这些层的权重更新变得非常缓慢或停止更新，使得这些层的参数无法得到有效的训练。</li></ul></li><li>导致的原因和解决 <ul><li>矩阵连乘 <ul><li>在反向传播时，梯度会连乘，当梯度都小于1.0时，就会出现梯度消失；当梯度都大于1.0时，就会出现梯度爆炸</li><li>解决：残差连接和 normalize <ul><li>由于使用了残差连接和 normalize 之后梯度消失和梯度爆炸已经极少出现了，所以目前可以认为矩阵连乘导致的梯度爆炸或梯度消失的问题已经解决了</li></ul></li></ul></li><li>使用了Sigmoid和tanh激活函数 <ul><li>解决：换用ReLU激活函数</li></ul></li></ul></li></ul></li><li>梯度爆炸问题(Gradient Explosion) <ul><li>现象 <ul><li>反向传播到较深层时，梯度非常大，导致权重参数更新过大，从而使得模型的训练极不稳定</li></ul></li><li>导致原因 <ul><li>矩阵连乘 <ul><li>在反向传播时，梯度会连乘，当梯度都小于1.0时，就会出现梯度消失；当梯度都大于1.0时，就会出现梯度爆炸</li></ul></li></ul></li><li>解决途径： <ul><li>梯度截断（也就是给一个最大值范围，如果超出了就取给定的最大值）</li><li>残差连接和 normalize <ul><li>由于使用了残差连接和 normalize 之后梯度消失和梯度爆炸已经极少出现了，所以目前可以认为矩阵连乘导致的梯度爆炸或梯度消失的问题已经解决了</li></ul></li></ul></li></ul></li></ul><h5 id="_6-2-7-2-why" tabindex="-1"><a class="header-anchor" href="#_6-2-7-2-why" aria-hidden="true">#</a> 6.2.7.2. why</h5><p>反向传播过程中，深层的网络的梯度计算需要经过连乘的操作，从而可能导致梯度的值指数级地变化，从而使梯度变得非常大或非常小</p><h5 id="_6-2-7-3-how" tabindex="-1"><a class="header-anchor" href="#_6-2-7-3-how" aria-hidden="true">#</a> 6.2.7.3. how</h5><p>归一化(Normalization)：将数据的均值变为0，方差变为1</p><h2 id="_7-示例" tabindex="-1"><a class="header-anchor" href="#_7-示例" aria-hidden="true">#</a> 7. 示例</h2><h3 id="_7-1-任务" tabindex="-1"><a class="header-anchor" href="#_7-1-任务" aria-hidden="true">#</a> 7.1. 任务</h3><p>识别手写数字</p><h3 id="_7-2-特征提取" tabindex="-1"><a class="header-anchor" href="#_7-2-特征提取" aria-hidden="true">#</a> 7.2. 特征提取</h3><p>构成这张图的28*28=784个像素点的灰度</p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>像素点的灰度：对于每一个像素，我们都给他赋一个从0到1的值。一个像素点越黑，他就越接近0；一个像素点越白，他就越接近1</p><p>将一张图表示为784维的、每个元素都在0到1之间的向量</p><h3 id="_7-3-神经网络" tabindex="-1"><a class="header-anchor" href="#_7-3-神经网络" aria-hidden="true">#</a> 7.3. 神经网络</h3><h4 id="_7-3-1-整体结构" tabindex="-1"><a class="header-anchor" href="#_7-3-1-整体结构" aria-hidden="true">#</a> 7.3.1. 整体结构</h4><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_7-3-2-分层结构" tabindex="-1"><a class="header-anchor" href="#_7-3-2-分层结构" aria-hidden="true">#</a> 7.3.2. 分层结构</h4><h5 id="_7-3-2-1-输入层" tabindex="-1"><a class="header-anchor" href="#_7-3-2-1-输入层" aria-hidden="true">#</a> 7.3.2.1. 输入层</h5><p>784个神经元</p><h5 id="_7-3-2-2-隐层" tabindex="-1"><a class="header-anchor" href="#_7-3-2-2-隐层" aria-hidden="true">#</a> 7.3.2.2. 隐层</h5><p>2层</p><ul><li>隐层的第1层：16个神经元</li><li>隐层的第2层：16个神经元</li></ul><h5 id="_7-3-2-3-输出层" tabindex="-1"><a class="header-anchor" href="#_7-3-2-3-输出层" aria-hidden="true">#</a> 7.3.2.3. 输出层</h5><p>10个神经元，每个神经元分别代表0~9的手写数字</p><h4 id="_7-3-3-函数视角" tabindex="-1"><a class="header-anchor" href="#_7-3-3-函数视角" aria-hidden="true">#</a> 7.3.3. 函数视角</h4><p>共13002个模型参数</p><ul><li>12960个权重参数：784<em>16+16</em>16+16*10=12960</li><li>42个偏置参数：16+16+10=42</li></ul><p>线性代数表示（同一层的一起计算）</p><ul><li>输入层表示为[784*1]的列向量</li><li>隐藏层第一层 <ul><li>active_function1([16 x 784] x [784 x 1] + [16 x 1]) = [16 x 1]</li><li>细节 <ul><li>权重矩阵【16 x 784】</li><li>输入层【784 x 1】</li><li>隐藏层第一层的16个偏置参数【16 x 1】</li><li>激活函数 active_function1(【16 x 1】) = 【16 x 1】</li></ul></li></ul></li><li>隐藏层第二层 <ul><li>active_function2(【16 x 16】【16 x 1】+【16 x 1】)=【16 x 1】</li></ul></li><li>输出层 <ul><li>active_function3(【10 x 16】【16 x 1】+【10 x 1】)=【10 x 1】</li></ul></li></ul><h3 id="_7-4-识别的结果" tabindex="-1"><a class="header-anchor" href="#_7-4-识别的结果" aria-hidden="true">#</a> 7.4. 识别的结果</h3><p>输出层中值最大的神经元对应的手写数字</p>',89),z=[x,m,b,y,L,w];function R(k,M){return r(),n("div",null,z)}const v=e(f,[["render",R],["__file","03_神经网络.html.vue"]]);export{v as default};
