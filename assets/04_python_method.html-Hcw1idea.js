import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as p,c as o,d as i,a as s,b as c,e as l,f as n}from"./app-bgmQLjkw.js";const u="/pinkpig/assets/built_in_function-OtWEuuhE.png",r="/pinkpig/assets/help_and_dir-HXcOIaXP.png",d="/pinkpig/assets/checking_data_types-6sP3wyAr.png",k="/pinkpig/assets/min_max_sum-wqVMKdr1.png",m="/pinkpig/assets/decorator_order-w5TAzyaV.png",v={},b=n('<h1 id="python的函数" tabindex="-1"><a class="header-anchor" href="#python的函数" aria-hidden="true">#</a> Python的函数</h1><ul><li><ol><li>顺序/选择/循环语句</li></ol></li><li><ol start="2"><li>函数 Functions</li></ol></li><li><ol start="3"><li>内置函数 built-in functions</li></ol></li><li><ol start="4"><li>高阶函数</li></ol></li><li><ol start="5"><li>内置高阶函数</li></ol></li></ul>',2),h=n(`<h2 id="_1-顺序-选择-循环语句" tabindex="-1"><a class="header-anchor" href="#_1-顺序-选择-循环语句" aria-hidden="true">#</a> 1. 顺序/选择/循环语句</h2><h3 id="_1-1-conditionals-选择" tabindex="-1"><a class="header-anchor" href="#_1-1-conditionals-选择" aria-hidden="true">#</a> 1.1. Conditionals 选择</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># if</span>
a <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">if</span> a <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;A is a positive number&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># else</span>
a <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">if</span> a <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;A is a negative number&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;A is a positive number&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># elif</span>
a <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">if</span> a <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;A is a positive number&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> a <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;A is a negative number&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;A is zero&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># code if condition else code</span>
a <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;A is positive&#39;</span><span class="token punctuation">)</span> <span class="token keyword">if</span> a <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;A is negative&#39;</span><span class="token punctuation">)</span> <span class="token comment"># first condition met, &#39;A is positive&#39; will be printed</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-loops-循环" tabindex="-1"><a class="header-anchor" href="#_1-2-loops-循环" aria-hidden="true">#</a> 1.2. Loops 循环</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># while</span>
count <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>

<span class="token comment"># for string/list/tuple/set</span>
<span class="token keyword">for</span> item <span class="token keyword">in</span> string<span class="token operator">/</span><span class="token builtin">list</span><span class="token operator">/</span><span class="token builtin">tuple</span><span class="token operator">/</span><span class="token builtin">set</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>

<span class="token comment"># for string/list/tuple</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token operator">/</span><span class="token builtin">list</span><span class="token operator">/</span><span class="token builtin">tuple</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span><span class="token builtin">list</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span><span class="token builtin">tuple</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># for dict</span>
<span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token builtin">dict</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>

<span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> <span class="token builtin">dict</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-1-else-循环结束后执行" tabindex="-1"><a class="header-anchor" href="#_1-2-1-else-循环结束后执行" aria-hidden="true">#</a> 1.2.1. else 循环结束后执行</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># while else （while结束后会走到else）</span>
count <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>

<span class="token comment"># for else （for结束后会走到else）</span>
<span class="token keyword">for</span> number <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span>   <span class="token comment"># prints 0 to 10, not including 11</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;The loop stops at&#39;</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-2-break-continue-关键字" tabindex="-1"><a class="header-anchor" href="#_1-2-2-break-continue-关键字" aria-hidden="true">#</a> 1.2.2. Break&amp;Continue 关键字</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># break</span>
count <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>
        <span class="token keyword">break</span>

<span class="token comment"># continue</span>
numbers <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> number <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span>
    <span class="token keyword">if</span> number <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>
        <span class="token keyword">continue</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Next number should be &#39;</span><span class="token punctuation">,</span> number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">if</span> number <span class="token operator">!=</span> <span class="token number">5</span> <span class="token keyword">else</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;loop&#39;s end&quot;</span><span class="token punctuation">)</span> <span class="token comment"># for short hand conditions need both if and else statements</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;outside the loop&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-3-pass-关键字-占位" tabindex="-1"><a class="header-anchor" href="#_1-2-3-pass-关键字-占位" aria-hidden="true">#</a> 1.2.3. Pass 关键字（占位）</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> number <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-函数-functions" tabindex="-1"><a class="header-anchor" href="#_2-函数-functions" aria-hidden="true">#</a> 2. 函数 Functions</h2><h3 id="_2-1-声明函数-declare-function" tabindex="-1"><a class="header-anchor" href="#_2-1-声明函数-declare-function" aria-hidden="true">#</a> 2.1. 声明函数 Declare Function</h3><p>Note：python用缩进创造一个代码块，其他语言用括弧brackets创造一个代码块</p><ul><li>def 关键字——声明函数</li><li>return 关键字——返回函数值；可以返回任意类型,甚至是函数；函数里没有返回值，则默认返回None。</li><li>参数：可以没有参数，也可以有多个参数，也可以通过**args，<strong>args</strong>不限定参数个数；参数可以指定默认值；参数可以是任意类型，甚至是函数。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 声明模板</span>
<span class="token keyword">def</span> <span class="token function">function_name</span><span class="token punctuation">(</span>argList<span class="token punctuation">)</span><span class="token punctuation">:</span>
    function_body
    <span class="token punctuation">[</span><span class="token keyword">return</span> return_value<span class="token punctuation">]</span>

<span class="token comment"># 不限定参数个数: *args，针对list和tuple的unpack</span>
<span class="token keyword">def</span> <span class="token function">generate_groups</span> <span class="token punctuation">(</span>team<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>team<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> args<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>generate_groups<span class="token punctuation">(</span><span class="token string">&#39;Team-1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Asabeneh&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Brook&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;David&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Eyob&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 不限定参数个数：**args，针对dict的unpack</span>
<span class="token keyword">def</span> <span class="token function">packing_person_info</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># check the type of kwargs and it is a dict type</span>
    <span class="token comment"># print(type(kwargs))</span>
	<span class="token comment"># Printing dictionary items</span>
    <span class="token keyword">for</span> key <span class="token keyword">in</span> kwargs<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;{key} = {kwargs[key]}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> kwargs

<span class="token keyword">print</span><span class="token punctuation">(</span>packing_person_info<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;Asabeneh&quot;</span><span class="token punctuation">,</span>
      country<span class="token operator">=</span><span class="token string">&quot;Finland&quot;</span><span class="token punctuation">,</span> city<span class="token operator">=</span><span class="token string">&quot;Helsinki&quot;</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-调用函数-call-invoking-function" tabindex="-1"><a class="header-anchor" href="#_2-2-调用函数-call-invoking-function" aria-hidden="true">#</a> 2.2. 调用函数 Call/Invoking Function</h3><ul><li>调用时，参数指定key和value，可以不按参数列表顺序传参</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">add_two_numbers</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    total <span class="token operator">=</span> num1 <span class="token operator">+</span> num2
    <span class="token keyword">print</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>add_two_numbers<span class="token punctuation">(</span>num2 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> num1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>参数指定了默认值的，可以不传</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 参数指定默认值</span>
<span class="token keyword">def</span> <span class="token function">calculate_age</span> <span class="token punctuation">(</span>birth_year<span class="token punctuation">,</span>current_year <span class="token operator">=</span> <span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    age <span class="token operator">=</span> current_year <span class="token operator">-</span> birth_year
    <span class="token keyword">return</span> age<span class="token punctuation">;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Age: &#39;</span><span class="token punctuation">,</span> calculate_age<span class="token punctuation">(</span><span class="token number">1821</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 可以不传第2个参数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Age: &#39;</span><span class="token punctuation">,</span> calculate_age<span class="token punctuation">(</span><span class="token number">1821</span><span class="token punctuation">,</span><span class="token number">2023</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-匿名函数-lambda-function" tabindex="-1"><a class="header-anchor" href="#_2-3-匿名函数-lambda-function" aria-hidden="true">#</a> 2.3. 匿名函数 Lambda Function</h3><p>1、赋值给变量</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># syntax
x = lambda param1, param2, param3: param1 + param2 + param2
print(x(arg1, arg2, arg3))

# example
add_two_nums = lambda a, b: a + b
print(add_two_nums(2,3))    # 5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、自调用（一次性函数）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># Self invoking lambda function
(lambda a, b: a + b)(2,3) # 5 - need to encapsulate it in print() to see the result in the console
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>3、在另一个函数内</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>def power(x):
    return lambda n : x ** n

cube = power(2)(3)   # function power now need 2 arguments to run, in separate rounded brackets
print(cube)          # 8
two_power_of_five = power(2)(5)
print(two_power_of_five)  # 32
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-类型提示-→" tabindex="-1"><a class="header-anchor" href="#_2-4-类型提示-→" aria-hidden="true">#</a> 2.4. 类型提示（→）</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code># 函数会返回一个布尔类型
def _get_verbosity() -&gt; bool:
    from langchain.globals import get_verbose

    return get_verbose()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-内置函数-built-in-functions" tabindex="-1"><a class="header-anchor" href="#_3-内置函数-built-in-functions" aria-hidden="true">#</a> 3. 内置函数 built-in functions</h2><h3 id="_3-1-所有内置函数" tabindex="-1"><a class="header-anchor" href="#_3-1-所有内置函数" aria-hidden="true">#</a> 3.1. 所有内置函数</h3>`,32),g={href:"https://docs.python.org/3.9/library/functions.html",target:"_blank",rel:"noopener noreferrer"},y=n('<figure><img src="'+u+'" alt="内置函数" tabindex="0" loading="lazy"><figcaption>内置函数</figcaption></figure><h3 id="_3-2-常用内置函数" tabindex="-1"><a class="header-anchor" href="#_3-2-常用内置函数" aria-hidden="true">#</a> 3.2. 常用内置函数</h3><p><em>print()</em>, <em>input()</em>, <em>len()</em>, <em>type()</em>, <em>help()</em></p><p><em>int()</em>, <em>float()</em>, <em>str()</em>, <em>list()</em>, <em>dict()</em>,</p><p><em>min()</em>, <em>max()</em>, <em>sum()</em>, <em>sorted()</em>,</p><p><em>open()</em>, <em>file()</em>, and <em>dir()</em></p><h4 id="_3-2-1-help-dir-查看所有功能-模块-关键字-数据类型" tabindex="-1"><a class="header-anchor" href="#_3-2-1-help-dir-查看所有功能-模块-关键字-数据类型" aria-hidden="true">#</a> 3.2.1. help()&amp;dir() 查看所有功能（模块，关键字，数据类型）</h4><figure><img src="'+r+`" alt="help() &amp; dir()" tabindex="0" loading="lazy"><figcaption>help() &amp; dir()</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 查看模块所有功能</span>
<span class="token keyword">import</span> math
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">help</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-2-print-输出" tabindex="-1"><a class="header-anchor" href="#_3-2-2-print-输出" aria-hidden="true">#</a> 3.2.2. print() 输出</h4><p>print()函数可传无限个参数，多个参数用逗号“,”隔开，结果是连成一串输出，遇到逗号“,”会输出一个空格</p><p>交互模式下不用print()也可输出，命令模式下需要print()才可输出</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Hello,World!&#39;</span><span class="token punctuation">)</span>
Hello<span class="token punctuation">,</span>World!
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;World&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span>
Hello <span class="token punctuation">,</span> World !
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">&#39;Hello,World!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token number">12</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;100 + 200 =&#39;</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">200</span><span class="token punctuation">)</span>
<span class="token number">100</span> <span class="token operator">+</span> <span class="token number">200</span> <span class="token operator">=</span> <span class="token number">300</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;The quick brown fox&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;jumps over&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;the lazy dog&#39;</span><span class="token punctuation">)</span>
The quick brown fox jumps over the lazy dog
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token number">200</span><span class="token punctuation">)</span>
<span class="token number">300</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-3-input-输入" tabindex="-1"><a class="header-anchor" href="#_3-2-3-input-输入" aria-hidden="true">#</a> 3.2.3. input() 输入</h4><p>通过input()动态给变量赋值</p><p>可以不传参，也可以传参给用户提供输入信息</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 不传参</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name
Michael
<span class="token comment"># 传参</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;please enter your name: &#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello,&#39;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
hello<span class="token punctuation">,</span> Michael
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-4-open-文件处理-配合os模块" tabindex="-1"><a class="header-anchor" href="#_3-2-4-open-文件处理-配合os模块" aria-hidden="true">#</a> 3.2.4. open() 文件处理（配合os模块）</h4><h4 id="_3-2-5-打开文件——手动关闭方式" tabindex="-1"><a class="header-anchor" href="#_3-2-5-打开文件——手动关闭方式" aria-hidden="true">#</a> 3.2.5. 打开文件——手动关闭方式</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>mode<span class="token punctuation">)</span> <span class="token comment"># mode：r a w x t b</span>
f <span class="token operator">=</span> opne<span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token comment"># mode可以不传，默认是 rt</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>&quot;r&quot; - Read - Default value. Opens a file for reading, it returns an error if the file does not exist</li><li>&quot;a&quot; - Append - Opens a file for appending, will append to the end of the file, creates the file if it does not exist</li><li>&quot;w&quot; - Write - Opens a file for writing, will overwrite any existing content,creates the file if it does not exist</li><li>&quot;x&quot; - Create - Creates the specified file, returns an error if the file exists</li><li>&quot;t&quot; - Text - Default value. Text mode</li><li>&quot;b&quot; - Binary - Binary mode (e.g. images)</li></ul><p>需要手动关闭</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 手动关闭</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-2-6-打开文件——自动关闭方式" tabindex="-1"><a class="header-anchor" href="#_3-2-6-打开文件——自动关闭方式" aria-hidden="true">#</a> 3.2.6. 打开文件——自动关闭方式</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;./files/reading_file_example.txt&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    lines <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-7-读文件" tabindex="-1"><a class="header-anchor" href="#_3-2-7-读文件" aria-hidden="true">#</a> 3.2.7. 读文件</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>txt <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 读所有，返回str</span>
txt <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment"># 读前10个字符，返回str</span>
lines <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#  # 读所有行，返回list</span>
line <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 读一行，返回str</span>
lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 读所有行，返回list</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-8-type-验证数据类型" tabindex="-1"><a class="header-anchor" href="#_3-2-8-type-验证数据类型" aria-hidden="true">#</a> 3.2.8. type() 验证数据类型</h4><figure><img src="`+d+`" alt="type()" tabindex="0" loading="lazy"><figcaption>type()</figcaption></figure><h4 id="_3-2-9-int-float-str-list-set-转换数据类型" tabindex="-1"><a class="header-anchor" href="#_3-2-9-int-float-str-list-set-转换数据类型" aria-hidden="true">#</a> 3.2.9. int(),float(),str(),list(),set() 转换数据类型</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># int to float</span>
num_int <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;num_int&#39;</span><span class="token punctuation">,</span>num_int<span class="token punctuation">)</span>         <span class="token comment"># 10</span>
num_float <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>num_int<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;num_float:&#39;</span><span class="token punctuation">,</span> num_float<span class="token punctuation">)</span>   <span class="token comment"># 10.0</span>

<span class="token comment"># float to int</span>
gravity <span class="token operator">=</span> <span class="token number">9.81</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>gravity<span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment"># 9</span>

<span class="token comment"># int or float to str</span>
num_int <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>num_int<span class="token punctuation">)</span>                  <span class="token comment"># 10</span>
num_str <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num_int<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>num_str<span class="token punctuation">)</span>                  <span class="token comment"># &#39;10&#39;</span>

<span class="token comment"># str to int or float</span>
num_str <span class="token operator">=</span> <span class="token string">&#39;10.6&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;num_int&#39;</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num_str<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># 10</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;num_float&#39;</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>num_str<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 10.6</span>

<span class="token comment"># str to list</span>
first_name <span class="token operator">=</span> <span class="token string">&#39;Asabeneh&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>first_name<span class="token punctuation">)</span>               <span class="token comment"># &#39;Asabeneh&#39;</span>
first_name_to_list <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>first_name<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>first_name_to_list<span class="token punctuation">)</span>            <span class="token comment"># [&#39;A&#39;, &#39;s&#39;, &#39;a&#39;, &#39;b&#39;, &#39;e&#39;, &#39;n&#39;, &#39;e&#39;, &#39;h&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-10-len-长度" tabindex="-1"><a class="header-anchor" href="#_3-2-10-len-长度" aria-hidden="true">#</a> 3.2.10. len() 长度</h4><p>获取string,list,tuple,set,dict的长度</p><h4 id="_3-2-11-range-整数列表" tabindex="-1"><a class="header-anchor" href="#_3-2-11-range-整数列表" aria-hidden="true">#</a> 3.2.11. range() 整数列表</h4><p>range(start,end,step)</p><p>默认：start=0,step=1</p><p>至少需要1个参数，即end</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>lst <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span> <span class="token comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span>
st <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 2 arguments indicate start and end of the sequence, step set to default 1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span> <span class="token comment"># {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}</span>

lst <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span> <span class="token comment"># [0, 2, 4, 6, 8, 10]</span>
st <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span> <span class="token comment">#  {0, 2, 4, 6, 8, 10}</span>

<span class="token keyword">for</span> number <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span>   <span class="token comment"># prints 0 to 10, not including 11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-12-min-max-sum" tabindex="-1"><a class="header-anchor" href="#_3-2-12-min-max-sum" aria-hidden="true">#</a> 3.2.12. min(),max(),sum()</h4><figure><img src="`+k+`" alt="min(),max(),sum()" tabindex="0" loading="lazy"><figcaption>min(),max(),sum()</figcaption></figure><h2 id="_4-高阶函数" tabindex="-1"><a class="header-anchor" href="#_4-高阶函数" aria-hidden="true">#</a> 4. 高阶函数</h2><h3 id="_4-1-函数作为参数" tabindex="-1"><a class="header-anchor" href="#_4-1-函数作为参数" aria-hidden="true">#</a> 4.1. 函数作为参数</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 函数作为参数</span>
<span class="token keyword">def</span> <span class="token function">square_number</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> n <span class="token operator">*</span> n
<span class="token keyword">def</span> <span class="token function">do_something</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> f<span class="token punctuation">(</span>x<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>do_something<span class="token punctuation">(</span>square_number<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-函数作为返回值" tabindex="-1"><a class="header-anchor" href="#_4-2-函数作为返回值" aria-hidden="true">#</a> 4.2. 函数作为返回值</h3><p>根据不同参数返回不同函数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment"># a square function</span>
    <span class="token keyword">return</span> x <span class="token operator">**</span> <span class="token number">2</span>

<span class="token keyword">def</span> <span class="token function">cube</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># a cube function</span>
    <span class="token keyword">return</span> x <span class="token operator">**</span> <span class="token number">3</span>

<span class="token keyword">def</span> <span class="token function">absolute</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># an absolute value function</span>
    <span class="token keyword">if</span> x <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> x
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">higher_order_function</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># a higher order function returning a function</span>
    <span class="token keyword">if</span> <span class="token builtin">type</span> <span class="token operator">==</span> <span class="token string">&#39;square&#39;</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> square
    <span class="token keyword">elif</span> <span class="token builtin">type</span> <span class="token operator">==</span> <span class="token string">&#39;cube&#39;</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> cube
    <span class="token keyword">elif</span> <span class="token builtin">type</span> <span class="token operator">==</span> <span class="token string">&#39;absolute&#39;</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> absolute

result <span class="token operator">=</span> higher_order_function<span class="token punctuation">(</span><span class="token string">&#39;square&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment"># 9</span>
result <span class="token operator">=</span> higher_order_function<span class="token punctuation">(</span><span class="token string">&#39;cube&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment"># 27</span>
result <span class="token operator">=</span> higher_order_function<span class="token punctuation">(</span><span class="token string">&#39;absolute&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-闭包-python-closures" tabindex="-1"><a class="header-anchor" href="#_4-3-闭包-python-closures" aria-hidden="true">#</a> 4.3. 闭包 Python Closures</h3><p>Python 允许嵌套函数访问封闭函数的外部范围。这就是闭包。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">add_ten</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    ten <span class="token operator">=</span> <span class="token number">10</span>
    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> num <span class="token operator">+</span> ten
    <span class="token keyword">return</span> add

closure_result <span class="token operator">=</span> add_ten<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>closure_result<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 15</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>closure_result<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-装饰器-python-decorators" tabindex="-1"><a class="header-anchor" href="#_4-4-装饰器-python-decorators" aria-hidden="true">#</a> 4.4. 装饰器 Python Decorators</h3><p>不修改object结构的情况下，给object添加新功能</p><h4 id="_4-4-1-应用单个装饰器到一个函数" tabindex="-1"><a class="header-anchor" href="#_4-4-1-应用单个装饰器到一个函数" aria-hidden="true">#</a> 4.4.1. 应用单个装饰器到一个函数</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 定义装饰器</span>
<span class="token keyword">def</span> <span class="token function">uppercase_decorator</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        func <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span>
        make_uppercase <span class="token operator">=</span> func<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> make_uppercase
    <span class="token keyword">return</span> wrapper

<span class="token comment"># 应用装饰器</span>
<span class="token decorator annotation punctuation">@uppercase_decorator</span>
<span class="token keyword">def</span> <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">&#39;Welcome to Python&#39;</span>

<span class="token comment"># 结果展示</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>greeting<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># WELCOME TO PYTHON</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-4-2-应用多个装饰器到一个函数" tabindex="-1"><a class="header-anchor" href="#_4-4-2-应用多个装饰器到一个函数" aria-hidden="true">#</a> 4.4.2. 应用多个装饰器到一个函数</h4><p>Note：装饰器的顺序很重要，靠函数近的装饰器先执行（也就是一个函数上的装饰器，执行顺序是从下到上）</p><p>如果变更两个装饰器的顺序会报错，如下图所示：</p><figure><img src="`+m+`" alt="装饰器的顺序" tabindex="0" loading="lazy"><figcaption>装饰器的顺序</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token triple-quoted-string string">&#39;&#39;&#39;These decorator functions are higher order functions
that take functions as parameters&#39;&#39;&#39;</span>

<span class="token comment"># First Decorator</span>
<span class="token keyword">def</span> <span class="token function">uppercase_decorator</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        func <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span>
        make_uppercase <span class="token operator">=</span> func<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> make_uppercase
    <span class="token keyword">return</span> wrapper

<span class="token comment"># Second decorator</span>
<span class="token keyword">def</span> <span class="token function">split_string_decorator</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        func <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span>
        splitted_string <span class="token operator">=</span> func<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> splitted_string
    <span class="token keyword">return</span> wrapper

<span class="token decorator annotation punctuation">@split_string_decorator</span> <span class="token comment"># 后执行</span>
<span class="token decorator annotation punctuation">@uppercase_decorator</span>    <span class="token comment"># 先执行</span>
<span class="token keyword">def</span> <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">&#39;Welcome to Python&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>greeting<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># WELCOME TO PYTHON</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-4-3-接收参数的装饰器" tabindex="-1"><a class="header-anchor" href="#_4-4-3-接收参数的装饰器" aria-hidden="true">#</a> 4.4.3. 接收参数的装饰器</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">decorator_with_parameters</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">wrapper_accepting_parameters</span><span class="token punctuation">(</span>para1<span class="token punctuation">,</span> para2<span class="token punctuation">,</span> para3<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 此处接收参数，和被装饰函数的参数保持一致</span>
        function<span class="token punctuation">(</span>para1<span class="token punctuation">,</span> para2<span class="token punctuation">,</span> para3<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;I live in {}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>para3<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> wrapper_accepting_parameters

<span class="token decorator annotation punctuation">@decorator_with_parameters</span>
<span class="token keyword">def</span> <span class="token function">print_full_name</span><span class="token punctuation">(</span>first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> country<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;I am {} {}. I love to teach.&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>
        first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> country<span class="token punctuation">)</span><span class="token punctuation">)</span>

print_full_name<span class="token punctuation">(</span><span class="token string">&quot;Asabeneh&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Yetayeh&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;Finland&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-内置高阶函数" tabindex="-1"><a class="header-anchor" href="#_5-内置高阶函数" aria-hidden="true">#</a> 5. 内置高阶函数</h2><h3 id="_5-1-map-function-iterable-把function应用于序列中每一项" tabindex="-1"><a class="header-anchor" href="#_5-1-map-function-iterable-把function应用于序列中每一项" aria-hidden="true">#</a> 5.1. map(function,iterable) ：把function应用于序列中每一项</h3><p>返回结果是一个map object，需要用list等函数转成想要的类型</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token comment"># iterable</span>
<span class="token keyword">def</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x <span class="token operator">**</span> <span class="token number">2</span>
numbers_squared <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span>square<span class="token punctuation">,</span> numbers<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>numbers_squared<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># [1, 4, 9, 16, 25]</span>

<span class="token comment"># Lets apply it with a lambda function</span>
numbers_squared <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x <span class="token punctuation">:</span> x <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">,</span> numbers<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>numbers_squared<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># [1, 4, 9, 16, 25]</span>

names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Asabeneh&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Lidiya&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Ermias&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Abraham&#39;</span><span class="token punctuation">]</span>  <span class="token comment"># iterable</span>
names_upper_cased <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> name<span class="token punctuation">:</span> name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> names<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>names_upper_cased<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># [&#39;ASABENEH&#39;, &#39;LIDIYA&#39;, &#39;ERMIAS&#39;, &#39;ABRAHAM&#39;]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-reduce-function-iterable-返回单个值" tabindex="-1"><a class="header-anchor" href="#_5-2-reduce-function-iterable-返回单个值" aria-hidden="true">#</a> 5.2. reduce(function, iterable)：返回单个值</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>numbers_str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5&#39;</span><span class="token punctuation">]</span>  <span class="token comment"># iterable</span>
<span class="token keyword">def</span> <span class="token function">add_two_nums</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>

total <span class="token operator">=</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span>add_two_nums<span class="token punctuation">,</span> numbers_str<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>    <span class="token comment"># 15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-filter-function-iterable-留下function返回true的序列中的项" tabindex="-1"><a class="header-anchor" href="#_5-3-filter-function-iterable-留下function返回true的序列中的项" aria-hidden="true">#</a> 5.3. filter(function, iterable)：留下function返回True的序列中的项</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Lets filter only even nubers</span>
numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>  <span class="token comment"># iterable</span>

<span class="token keyword">def</span> <span class="token function">is_even</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>
    <span class="token keyword">return</span> <span class="token boolean">False</span>

even_numbers <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span>is_even<span class="token punctuation">,</span> numbers<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>even_numbers<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment"># [2, 4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,68);function f(_,w){const a=t("ExternalLinkIcon");return p(),o("div",null,[b,i(" more "),h,s("p",null,[s("a",g,[c("所有内置函数及解释"),l(a)])]),y])}const A=e(v,[["render",f],["__file","04_python_method.html.vue"]]);export{A as default};
