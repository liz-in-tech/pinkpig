import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as l,c,a as n,b as a,d as t,e}from"./app-dVf4Oob3.js";const o="/pinkpig/assets/基础-1-KrhcCI-7.png",r="/pinkpig/assets/基础-2-MhYS0e0v.png",u="/pinkpig/assets/基础-3-dDEQYOvG.png",d="/pinkpig/assets/基础-4-TvCjZTmh.png",k="/pinkpig/assets/基础-5-yleGDjFi.png",b="/pinkpig/assets/基础-6-WQ31OWzB.png",v="/pinkpig/assets/基础-7-n5v8psFm.png",m="/pinkpig/assets/基础-8-oY4AOohf.png",h="/pinkpig/assets/基础-9-gYZ4LeYH.png",g="/pinkpig/assets/基础-10-_YenZjVg.png",E="/pinkpig/assets/基础-11-5euRGeJq.png",B="/pinkpig/assets/基础-12-6oBTHPVB.png",f="/pinkpig/assets/基础-13-JeihKQFM.png",y="/pinkpig/assets/基础-14-N4tQtAGl.png",_="/pinkpig/assets/基础-15-H2oWAK4D.png",A="/pinkpig/assets/基础-16-8qOUf1nH.png",w="/pinkpig/assets/基础-17-D7H09HUP.png",j="/pinkpig/assets/基础-18-847AUqpT.png",S="/pinkpig/assets/基础-19-tPaFWUX8.png",x={},D=e('<h1 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h1><ul><li><a href="#%E5%9F%BA%E7%A1%80">基础</a></li><li><a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">面向对象</a><ul><li><a href="#1java-%E8%AF%AD%E8%A8%80%E6%9C%89%E5%93%AA%E4%BA%9B%E7%89%B9%E7%82%B9">1、Java 语言有哪些特点？</a></li><li><a href="#2%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">2、面向对象</a><ul><li><a href="#1%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%8E%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E5%A4%84%E7%90%86%E9%97%AE%E9%A2%98%E7%9A%84%E4%B8%8D%E5%90%8C%E8%A7%92%E5%BA%A6">（1）面向对象与面向过程（处理问题的不同角度）</a></li><li><a href="#2%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7%E5%B0%81%E8%A3%85%E7%BB%A7%E6%89%BF%E5%A4%9A%E6%80%81">（2）面向对象三大特性：封装、继承、多态</a></li><li><a href="#3%E5%B0%81%E8%A3%85">（3）封装</a><ul><li><a href="#%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6">访问修饰符</a></li></ul></li><li><a href="#4%E7%BB%A7%E6%89%BF">（4）继承</a></li><li><a href="#5%E5%A4%9A%E6%80%81">（5）多态</a><ul><li><a href="#%E9%87%8D%E8%BD%BD%E4%B8%8E%E9%87%8D%E5%86%99">重载与重写</a></li></ul></li></ul></li><li><a href="#3%E6%8E%A5%E5%8F%A3%E4%B8%8E%E6%8A%BD%E8%B1%A1%E7%B1%BB">3、接口与抽象类</a></li><li><a href="#4object%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95">4、Object类的方法</a></li><li><a href="#5final%E5%85%B3%E9%94%AE%E5%AD%97">5、final关键字</a></li><li><a href="#6finalfinallyfinalize%E7%9A%84%E5%8C%BA%E5%88%AB">6、final、finally、finalize的区别</a></li><li><a href="#7%E4%B8%8Eequals">7、==与equals</a></li><li><a href="#8hashcode%E4%B8%8Eequals">8、hashCode与equals</a></li><li><a href="#9%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D">9、深拷贝与浅拷贝</a></li><li><a href="#10java%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E5%BC%8F">10、Java创建对象的方式</a></li><li><a href="#11new%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%BF%87%E7%A8%8B%E4%BA%86%E8%A7%A3%E5%90%97">11、new创建对象的过程了解吗？</a></li><li><a href="#12%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6">12、反射机制</a></li><li><a href="#13%E5%BA%8F%E5%88%97%E5%8C%96">13、序列化</a><ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">什么是序列化？什么是反序列化？</a></li><li><a href="#%E8%AF%B4%E8%AF%B4%E6%9C%89%E5%87%A0%E7%A7%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%96%B9%E5%BC%8F">说说有几种序列化方式？</a></li></ul></li></ul></li><li><a href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">数据类型</a><ul><li><a href="#1java%E6%9C%89%E5%93%AA%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">1、Java有哪些数据类型</a></li><li><a href="#2%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">2、自动类型转换&amp;强制类型转换</a></li><li><a href="#3%E8%87%AA%E5%8A%A8%E6%8B%86%E7%AE%B1%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1">3、自动拆箱&amp;自动装箱</a></li><li><a href="#4switch-case%E7%9A%84%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%AF%E4%BB%A5%E6%98%AF%E4%BB%80%E4%B9%88%E7%B1%BB%E5%9E%8B">4、switch case的表达式可以是什么类型？</a></li><li><a href="#5string-%E7%B1%BB%E5%8F%AF%E4%BB%A5%E8%A2%AB%E7%BB%A7%E6%89%BF%E5%90%97">5、String 类可以被继承吗？</a></li><li><a href="#6stringstringbuffer%E4%B8%8Estringbuilder">6、String、StringBuffer与StringBuilder</a></li><li><a href="#7string-str1--new-stringabc%E5%92%8C-string-str2--abc-%E7%9A%84%E5%8C%BA%E5%88%AB">7、String str1 = new String(&quot;abc&quot;)和 String str2 = &quot;abc&quot; 的区别？</a></li><li><a href="#8%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5jdk18%E4%BC%98%E5%8C%96">8、字符串拼接jdk1.8优化</a></li><li><a href="#9integer-a-127integer-b--127integer-c-128integer-d--128%E7%9B%B8%E7%AD%89%E5%90%97">9、Integer a= 127，Integer b = 127；Integer c= 128，Integer d = 128；，相等吗?</a></li><li><a href="#10double%E4%B8%8Ebigdecimal">10、double与BigDecimal</a></li><li><a href="#11%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E5%8F%82%E6%95%B0%E5%8C%96">11、泛型（类型参数化）</a></li></ul></li><li><a href="#%E5%BC%82%E5%B8%B8">异常</a><ul><li><a href="#1java%E4%B8%AD%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E4%BD%93%E7%B3%BB">1、Java中异常处理体系</a></li><li><a href="#2%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F">2、异常处理方式</a></li><li><a href="#3%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E8%A6%81%E7%82%B9">3、异常处理要点</a></li><li><a href="#4%E4%B8%89%E9%81%93%E7%BB%8F%E5%85%B8%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E4%BB%A3%E7%A0%81%E9%A2%98">4、三道经典异常处理代码题</a></li></ul></li></ul><h1 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象" aria-hidden="true">#</a> 面向对象</h1><h2 id="_1、java-语言有哪些特点" tabindex="-1"><a class="header-anchor" href="#_1、java-语言有哪些特点" aria-hidden="true">#</a> 1、Java 语言有哪些特点？</h2><p><img src="'+o+'" alt="" loading="lazy"> <br></p><ul><li>面向对象（封装、继承、多态） <br></li><li>平台无关性（JVM） <br></li><li>支持多线程（C++语言没有内置的多线程机制，需调用操作系统的多线程功能） <br></li><li>编译与解释并存（先编译为字节码文件，然后JVM分别为各平台进行解释） <br></li></ul><h2 id="_2、面向对象" tabindex="-1"><a class="header-anchor" href="#_2、面向对象" aria-hidden="true">#</a> 2、面向对象</h2><h3 id="_1-面向对象与面向过程-处理问题的不同角度" tabindex="-1"><a class="header-anchor" href="#_1-面向对象与面向过程-处理问题的不同角度" aria-hidden="true">#</a> （1）面向对象与面向过程（处理问题的不同角度）</h3><p>面向过程更注重事情的每一个步骤及顺序，面向对象更注重事情有哪些参与者（对象）、及各自需要做什么。 <br> 面向过程：性能好（单片机、嵌入式开发、Linux/Unix考虑性能的一般用面向过程开发） <br> 面向对象：易维护（低耦合）、易复写（继承）、易扩展（多态） <br></p><h3 id="_2-面向对象三大特性-封装、继承、多态" tabindex="-1"><a class="header-anchor" href="#_2-面向对象三大特性-封装、继承、多态" aria-hidden="true">#</a> （2）面向对象三大特性：封装、继承、多态</h3><p>封装：访问修饰符，只暴露需要被外界访问的，隐藏细节，保护机制 <br> 继承：复用代码，模板 <br> 多态：父类(或接口)引用指向子类对象。好处：隔离修改；无障碍扩展（修改或扩展都不用动原有的代码） <br></p><h3 id="_3-封装" tabindex="-1"><a class="header-anchor" href="#_3-封装" aria-hidden="true">#</a> （3）封装</h3><h4 id="访问修饰符" tabindex="-1"><a class="header-anchor" href="#访问修饰符" aria-hidden="true">#</a> 访问修饰符</h4><p>Java 支持 4 种不同的访问权限。 <br><img src="'+r+'" alt="" loading="lazy"> <br></p><h3 id="_4-继承" tabindex="-1"><a class="header-anchor" href="#_4-继承" aria-hidden="true">#</a> （4）继承</h3><p>继承有以下三个要点： <br></p><ol><li>⼦类拥有⽗类对象所有的属性和⽅法（包括私有属性和私有⽅法），但是⽗类中的私有属性和⽅法⼦类是⽆法访问，只是拥有。 <br></li><li>⼦类可以拥有⾃⼰属性和⽅法，即⼦类可以对⽗类进⾏扩展。 <br></li><li>⼦类可以⽤⾃⼰的⽅式实现⽗类的⽅法（重写）。 <br></li></ol><h3 id="_5-多态" tabindex="-1"><a class="header-anchor" href="#_5-多态" aria-hidden="true">#</a> （5）多态</h3><p>多态的实现形式：继承和接口 <br></p><h4 id="重载与重写" tabindex="-1"><a class="header-anchor" href="#重载与重写" aria-hidden="true">#</a> 重载与重写</h4><p>方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。 <br></p><table><thead><tr><th>区别点</th><th>重载 overload</th><th>重写 overwrite</th></tr></thead><tbody><tr><td>定义</td><td>同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理</td><td>子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变。</td></tr><tr><td>发生范围</td><td>同一个类</td><td>子类</td></tr><tr><td>返回值，方法名，参数列表</td><td>方法名相同，参数列表必须不同（个数，顺序，类型）<br>返回值可不同</td><td>返回值类型、方法名、参数列表必须相同</td></tr><tr><td>发生阶段</td><td>编译期（重载解析）</td><td>运行期</td></tr><tr><td>异常</td><td>可不同</td><td>比父类更小异常。（里氏代换原则）<br>抛出异常范围要小于等于父类</td></tr><tr><td>访问修饰符</td><td>可不同</td><td>比父类更好访问。<br>访问修饰符范围大于等于父类。如果父类方法访问修饰符为final,static,private，则子类不能重写，但是被static修饰的方法能够被再次声明。</td></tr><tr><td>构造方法</td><td>可重载</td><td>不可重写</td></tr></tbody></table><h2 id="_3、接口与抽象类" tabindex="-1"><a class="header-anchor" href="#_3、接口与抽象类" aria-hidden="true">#</a> 3、接口与抽象类</h2><p>设计层面：抽象类（模板设计，代码复用，概念的归纳），接口（行为规范，功能的归纳） <br> 数量限制：一个类可以实现多个接口，但只能继承一个抽象类。接口可以继承多个接口。 <br> 变量：接口中除了static和final变量，不能有其他变量；抽象类可以有各种变量 <br> 方法修饰符:接口方法默认修饰符是public；抽象类方法除了不能是private，其他修饰符均可 <br> 演变： <br> 抽象类概念的变化： <br> jdk8：抽象类可以有非抽象方法 <br> 接口概念的变化： <br> jdk7及更早版本：接口中只能有常量变量和抽象方法 <br> jdk8：接口中可以有默认方法和静态方法 <br> jdk9：接口中引入了私有方法和私有静态方法 <br></p><h2 id="_4、object类的方法" tabindex="-1"><a class="header-anchor" href="#_4、object类的方法" aria-hidden="true">#</a> 4、Object类的方法</h2><p>Object 类是所有类的父类，也就是说，所有类都可以调用它的方法。 <br> 它主要提供了以下 11 个方法，大概可以分为六类。 <br><img src="'+u+`" alt="" loading="lazy"> <br></p><h2 id="_5、final关键字" tabindex="-1"><a class="header-anchor" href="#_5、final关键字" aria-hidden="true">#</a> 5、final关键字</h2><p>final 表示不可变的意思，可用于修饰类、方法和变量： <br></p><ul><li>被 final 修饰的类不可以被继承 <br></li><li>被 final 修饰的方法不可以被重写 <br></li><li>被 final 修饰的变量不可变，被 final 修饰的变量必须被显式的指定初始值。还得注意的是，这里的不可变指的是变量的引用不可变，不是引用指向的内容的不可变。例如： <br></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//abcd</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一张图说明： <br><img src="`+d+'" alt="" loading="lazy"> <br></p><h2 id="_6、final、finally、finalize的区别" tabindex="-1"><a class="header-anchor" href="#_6、final、finally、finalize的区别" aria-hidden="true">#</a> 6、final、finally、finalize的区别</h2><ul><li>final 用于修饰变量、方法和类：final 修饰的类不可被继承；修饰的方法不可被重写；修饰的变量不可变。 <br></li><li>finally 作为异常处理的一部分，它只能在 try/catch 语句中，并且附带一个语句块表示这段语句最终一定被执行（无论是否抛出异常），经常被用在需要释放资源的情况下，System.exit (0) 可以阻断 finally 执行。 <br></li><li>finalize 是在 java.lang.Object 里定义的方法，也就是说每一个对象都有这么个方法。这个方法在 gc 启动，该对象被回收的时候被调用。一个对象的 finalize 方法只会被调用一次，finalize 被调用不一定会立即回收该对象，所以有可能调用 finalize 后，该对象又不需要被回收了，然后到了真正要被回收的时候，因为前面调用过一次，所以不会再次调用 finalize 了，进而产生问题，因此不推荐使用 finalize 方法。 <br></li></ul><h2 id="_7、-与equals" tabindex="-1"><a class="header-anchor" href="#_7、-与equals" aria-hidden="true">#</a> 7、==与equals</h2><p><mark>：看地址是否一致 <br> 基本数据类型在常量池，JVM做了优化，相同值只保留一份，已经存在就不创建了。引用数据类型在堆，不同对象不一样。 <br> equals：默认也是</mark>，比较地址，只有重写了equals才能比较值 <br> String默认重写了equals，所以是比较值。自定义类需要自己重写equals。 <br></p><h2 id="_8、hashcode与equals" tabindex="-1"><a class="header-anchor" href="#_8、hashcode与equals" aria-hidden="true">#</a> 8、hashCode与equals</h2><p>场景：HashSet检查重复，先用hashCode()获取哈希码（也称散列码，一个int整数，将对象的内存地址转换为整数返回），确定在哈希表（散列表）中的位置，如果此位置没有值，就没有重复。如果此位置有值，用equals()检查值是否相等，如果全都不相等，就表明没有重复。 <br> 作用：大大减少了equals的次数，大大提高了执行速度。 <br> 为什么重写equals时必须重写hashCode方法： hashCode() 的默认⾏为是对堆上的对象产⽣独特值。如果没有重写 hashCode()，则该 class 的两个对象⽆论如何都不会相等。 <br></p><h2 id="_9、深拷贝与浅拷贝" tabindex="-1"><a class="header-anchor" href="#_9、深拷贝与浅拷贝" aria-hidden="true">#</a> 9、深拷贝与浅拷贝</h2><table><thead><tr><th></th><th>浅拷贝</th><th>深拷贝</th></tr></thead><tbody><tr><td>影响</td><td>不安全<br>修改引用对象会影响原对象</td><td>安全 <br>修改引用对象不会影响原对象</td></tr><tr><td>相同点</td><td>对基本数据类型进⾏值传递</td><td></td></tr><tr><td>不同点</td><td>引用同一个对象（只拷贝了引用地址）</td><td>完全拷贝一个对象</td></tr><tr><td>实现</td><td>Object 类提供的clone()方法可以非常简单地实现对象的浅拷贝。</td><td>- 重写clone()方法 <br>- 序列化：可以先将原对象序列化，再反序列化成拷贝对象。 <br></td></tr></tbody></table><p><img src="'+k+'" alt="" loading="lazy"> <br></p><h2 id="_10、java创建对象的方式" tabindex="-1"><a class="header-anchor" href="#_10、java创建对象的方式" aria-hidden="true">#</a> 10、Java创建对象的方式</h2><p>Java 中有以下四种创建对象的方式: <br><img src="'+b+'" alt="" loading="lazy"> <br> 前两者都需要显式地调用构造方法。对于 clone 机制,需要注意浅拷贝和深拷贝的区别，对于序列化机制需要明确其实现原理，在Java 中序列化可以通过实现 Externalizable 或者 Serializable 来实现。 <br></p><h2 id="_11、new创建对象的过程了解吗" tabindex="-1"><a class="header-anchor" href="#_11、new创建对象的过程了解吗" aria-hidden="true">#</a> 11、new创建对象的过程了解吗？</h2><ul><li>首先检查这个指令的参数是否能在常量池中定位到一个类的符号引用 <br></li><li>检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，就先执行相应的类加载过程 <br></li><li>类加载检查通过后，接下来虚拟机将为新生对象分配内存。 <br></li><li>内存分配完成之后，虚拟机将分配到的内存空间（但不包括对象头）进行初始化。 <br></li><li>接下来设置对象头，请求头里包含了对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。 <br></li></ul><p>这个过程大概图示如下： <br><img src="'+v+'" alt="" loading="lazy"> <br></p><h2 id="_12、反射机制" tabindex="-1"><a class="header-anchor" href="#_12、反射机制" aria-hidden="true">#</a> 12、反射机制</h2><p>（1）反射的原理？ <br> 我们都知道 Java 程序的执行分为编译和运行两步，编译之后会生成字节码(.class)文件，JVM 进行类加载的时候，会加载字节码文件，将类型相关的所有信息加载进方法区，反射就是去获取这些信息，然后进行各种操作。 <br> 只要能得到.class字节码文件，那么通过反射机制我们不仅能看到.class所对应Java文件中的属性方法等信息，而且还能调用它所对应Java文件里的方法。 <br> （2）反射常见用法 <br> 查看 clazz.getDeclaredFields()/clazz.getDeclaredMethods() <br> 装载 Class.forName(&quot;全类名&quot;).newInstance(); <br> 调用 <br> 反射最核心的四个类： <br><img src="'+m+'" alt="" loading="lazy"> <br></p><h2 id="_13、序列化" tabindex="-1"><a class="header-anchor" href="#_13、序列化" aria-hidden="true">#</a> 13、序列化</h2><h3 id="什么是序列化-什么是反序列化" tabindex="-1"><a class="header-anchor" href="#什么是序列化-什么是反序列化" aria-hidden="true">#</a> 什么是序列化？什么是反序列化？</h3><p>什么是序列化，序列化就是<strong>把 Java 对象转为二进制流</strong>，方便存储和传输。 <br> 所以<strong>反序列化就是把二进制流恢复成对象</strong>。 <br><img src="'+h+`" alt="" loading="lazy"> <br> 序列化和反序列化 <br> 类比我们生活中一些大件物品的运输，运输的时候把它拆了打包，用的时候再拆包组装。 <br> Serializable 接口有什么用？ <br> 这个接口只是一个标记，没有具体的作用，但是如果不实现这个接口，在有些序列化场景会报错，所以一般建议，创建的 JavaBean 类都实现 Serializable。 <br> serialVersionUID 又有什么用？ <br> serialVersionUID 就是起验证作用。 <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们经常会看到这样的代码，这个 ID 其实就是用来验证序列化的对象和反序列化对应的对象 ID 是否一致。 <br> 这个 ID 的数字其实不重要，无论是 1L 还是 IDE 自动生成的，只要序列化时候对象的 serialVersionUID 和反序列化时候对象的 serialVersionUID 一致的话就行。 <br> 如果没有显示指定 serialVersionUID ，则编译器会根据类的相关信息自动生成一个，可以认为是一个指纹。 <br> 所以如果你没有定义一个 serialVersionUID， 结果序列化一个对象之后，在反序列化之前把对象的类的结构改了，比如增加了一个成员变量，则此时的反序列化会失败。 <br> 因为类的结构变了，所以 serialVersionUID 就不一致。 <br> Java 序列化不包含静态变量？ <br> 序列化的时候是不包含静态变量的。 <br> 如果有些变量不想序列化，怎么办？ <br> 对于不想进行序列化的变量，使用transient关键字修饰。 <br> transient 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 transient 修饰的变量值不会被持久化和恢复。transient 只能修饰变量，不能修饰类和方法。 <br></p><h3 id="说说有几种序列化方式" tabindex="-1"><a class="header-anchor" href="#说说有几种序列化方式" aria-hidden="true">#</a> 说说有几种序列化方式？</h3><p>Java 序列化方式有很多，常见的有三种： <br><img src="`+g+'" alt="" loading="lazy"> <br> Java常见序列化方式 <br></p><ul><li>Java 对象序列化 ：Java 原生序列化方法即通过 Java 原生流(InputStream 和 OutputStream 之间的转化)的方式进行转化，一般是对象输出流 ObjectOutputStream和对象输入流ObjectInputStream。 <br></li><li>Json 序列化：这个可能是我们最常用的序列化方式，Json 序列化的选择很多，一般会使用 jackson 包，通过 ObjectMapper 类来进行一些操作，比如将对象转化为 byte 数组或者将 json 串转化为对象。 <br></li><li>ProtoBuff 序列化：ProtocolBuffer 是一种轻便高效的结构化数据存储格式，ProtoBuff 序列化对象可以很大程度上将其压缩，可以大大减少数据传输大小，提高系统性能。 <br></li></ul><h1 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h1><h2 id="_1、java有哪些数据类型" tabindex="-1"><a class="header-anchor" href="#_1、java有哪些数据类型" aria-hidden="true">#</a> 1、Java有哪些数据类型</h2><p><img src="'+E+'" alt="image.png" loading="lazy"> <br> 8种基本数据类型：byte(1),short(2),int(4),long(8),float(4),double(8),char(2),boolean(1) <br></p><h2 id="_2、自动类型转换-强制类型转换" tabindex="-1"><a class="header-anchor" href="#_2、自动类型转换-强制类型转换" aria-hidden="true">#</a> 2、自动类型转换&amp;强制类型转换</h2><p>自动类型转换：把小的类型赋值给大的类型，会自动转换 <br> 强制类型转换：把大的类型赋值给小的类型，要手动进行强制类型转换 <br><img src="'+B+'" alt="" loading="lazy"> <br> 示例： <br><img src="'+f+'" alt="image.png" loading="lazy"> <br></p><h2 id="_3、自动拆箱-自动装箱" tabindex="-1"><a class="header-anchor" href="#_3、自动拆箱-自动装箱" aria-hidden="true">#</a> 3、自动拆箱&amp;自动装箱</h2><p>拆箱：将包装类转为基本数据类型 <br> 装箱：将基本数据类型转为包装类 <br> Java 可以自动对基本数据类型和它们的包装类进行装箱和拆箱 <br><img src="'+y+`" alt="" loading="lazy"> <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">//装箱</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> i<span class="token punctuation">;</span>   <span class="token comment">//拆箱</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、switch-case的表达式可以是什么类型" tabindex="-1"><a class="header-anchor" href="#_4、switch-case的表达式可以是什么类型" aria-hidden="true">#</a> 4、switch case的表达式可以是什么类型？</h2><p>可以是byte,short,int,char,enum,String类型 <br> 不可以是long,float,double,boolean类型 <br> 新特性：在JDK12后，不再出现case穿透现象，不需要在每个case后加break。还支持用-&gt;替代：。 <br></p><h2 id="_5、string-类可以被继承吗" tabindex="-1"><a class="header-anchor" href="#_5、string-类可以被继承吗" aria-hidden="true">#</a> 5、String 类可以被继承吗？</h2><p>不行。String 类使用 final 修饰，是所谓的不可变类，无法被继承。 <br></p><h2 id="_6、string、stringbuffer与stringbuilder" tabindex="-1"><a class="header-anchor" href="#_6、string、stringbuffer与stringbuilder" aria-hidden="true">#</a> 6、String、StringBuffer与StringBuilder</h2><p>String对象是不可变的，任何修改都会生成新的对象，会造成很大的内存开销，适用操作少量数据 <br> StringBuffer线程安全（加了锁），性能较低，适用多线程下操作大量数据 <br> StringBuilder线程不安全，性能好，适用单线程下操作大量数据 <br></p><h2 id="_7、string-str1-new-string-abc-和-string-str2-abc-的区别" tabindex="-1"><a class="header-anchor" href="#_7、string-str1-new-string-abc-和-string-str2-abc-的区别" aria-hidden="true">#</a> 7、String str1 = new String(&quot;abc&quot;)和 String str2 = &quot;abc&quot; 的区别？</h2><p><img src="`+_+`" alt="" loading="lazy"> <br></p><table><thead><tr><th></th><th>String a = new String(&quot;abc&quot;);</th><th>String b= &quot;abc&quot;;</th></tr></thead><tbody><tr><td>相同点</td><td>两个语句都会去字符串常量池中检查是否已经存在 “abc”，如果有则直接使用，如果没有则会在常量池中创建 “abc” 对象。</td><td></td></tr><tr><td>不同点</td><td>还会在堆里创建一个 &quot;abc&quot; 字符串对象实例</td><td>没有其他操作了</td></tr><tr><td>创建了几个对象</td><td>一个或两个。<br>如果字符串常量池已经有“abc”，则是一个；否则是两个。</td><td>零个或一个。 <br>如果字符串常量池已经有“abc”，则是零个；否则是一个。</td></tr><tr><td>具体处理过程</td><td>在编译阶段JVM先去常量池中查找是否存在“abc”，如果不存在，则在常量池中开辟一个空间存储“abc”。在运行时期，通过String类的构造器在堆内存中new了一个空间，然后将常量池中的“abc”复制一份存放到该堆空间中，在栈中开辟名字为str2的空间，存放堆中new出来的这个String对象的地址值。</td><td>在编译期，JVM会去常量池来查找是否存在“abc”，如果不存在，就在常量池中开辟一个空间来存储“abc”；如果存在，就不用新开辟空间。然后在栈内存中开辟一个名字为str1的空间，来存储“abc”在常量池中的地址值。</td></tr><tr><td>引用指向</td><td>堆</td><td>常量池</td></tr><tr><td>时间、空间使用</td><td>多（性能低，耗内存）</td><td>少（性能高，低内存）</td></tr></tbody></table><p>String st1＝“abc”； <br> String st2＝“abc”；// 常量池里有，就不再创建，指向常量池的那一个 <br> st1＝＝st2 是true <br></p><p>String st3＝new String（“abc”） <br> String st4＝new String（“abc”）// 每写一遍，就会创建一个新对象，指向堆里新创建的对象 <br> st3＝＝st4 是false <br></p><h2 id="_8、字符串拼接jdk1-8优化" tabindex="-1"><a class="header-anchor" href="#_8、字符串拼接jdk1-8优化" aria-hidden="true">#</a> 8、字符串拼接jdk1.8优化</h2><p>String 的确是不可变的，“<strong>+</strong>”的拼接操作，其实是会生成新的对象。 <br> 例如： <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">&quot;hello &quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">&quot;world!&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> ab <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<strong>jdk1.8 之前</strong>，a 和 b 初始化时位于字符串常量池，ab 拼接后的对象位于堆中。经过拼接新生成了 String 对象。如果拼接多次，那么会生成多个中间对象。 <br> 内存如下： <br><img src="`+A+`" alt="" loading="lazy"> <br> jdk1.8之前的字符串拼接 <br> 在<strong>Java8 时</strong>JDK 对“+”号拼接进行了优化，上面所写的拼接方式会被优化为基于 StringBuilder 的 append 方法进行处理。Java 会在编译期对“+”号进行处理。 <br> 下面是通过 javap -verbose 命令反编译字节码的结果，很显然可以看到 StringBuilder 的创建和 append 方法的调用。 <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>
     <span class="token number">0</span><span class="token operator">:</span> ldc           #<span class="token number">2</span>                  <span class="token comment">// String hello</span>
     <span class="token number">2</span><span class="token operator">:</span> astore_1 
     <span class="token number">3</span><span class="token operator">:</span> ldc           #<span class="token number">3</span>                  <span class="token comment">// String world! </span>
     <span class="token number">5</span><span class="token operator">:</span> astore_2 
     <span class="token number">6</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">4</span>                  <span class="token comment">// class java/lang/StringBuilder </span>
     <span class="token number">9</span><span class="token operator">:</span> dup 
    <span class="token number">10</span><span class="token operator">:</span> invokespecial #<span class="token number">5</span>                  <span class="token comment">// Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V </span>
    <span class="token number">13</span><span class="token operator">:</span> aload_1 
    <span class="token number">14</span><span class="token operator">:</span> invokevirtual #<span class="token number">6</span>                  <span class="token comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>
    <span class="token number">17</span><span class="token operator">:</span> aload_2 
    <span class="token number">18</span><span class="token operator">:</span> invokevirtual #<span class="token number">6</span>                  <span class="token comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder; </span>
    <span class="token number">21</span><span class="token operator">:</span> invokevirtual #<span class="token number">7</span>                  <span class="token comment">// Method java/lang/StringBuilder.toString:()Ljava/lang/String; </span>
    <span class="token number">24</span><span class="token operator">:</span> astore_3 
    <span class="token number">25</span><span class="token operator">:</span> <span class="token keyword">return</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说其实上面的代码其实相当于： <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">&quot;hello &quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">&quot;world!&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> 
sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">String</span> ab <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，如果再笼统的回答：通过加号拼接字符串会创建多个 String 对象，因此性能比 StringBuilder 差，就是错误的了。因为本质上加号拼接的效果最终经过编译器处理之后和 StringBuilder 是一致的。 <br> 当然，循环里拼接还是建议用 StringBuilder，为什么，因为循环一次就会创建一个新的 StringBuilder 对象，大家可以自行实验。 <br></p><h2 id="_9、integer-a-127-integer-b-127-integer-c-128-integer-d-128-相等吗" tabindex="-1"><a class="header-anchor" href="#_9、integer-a-127-integer-b-127-integer-c-128-integer-d-128-相等吗" aria-hidden="true">#</a> 9、Integer a= 127，Integer b = 127；Integer c= 128，Integer d = 128；，相等吗?</h2><p>答案是 a 和 b 相等，c 和 d 不相等。 <br> Integer a= 127 这种赋值，是用到了 Integer 自动装箱的机制。 <br> 自动装箱的时候会判断缓存里是否有（即整型字面量的值在-128 到 127 之间），有的话直接引用缓存池中的 Integer 对象，没有才会创建新的对象。 <br> 什么是 Integer 缓存？ <br> 根据实践发现大部分的数据操作都集中在值比较小的范围，因此 Integer 搞了个缓存池，默认范围是 -128 到 127，可以修改缓存的最大值，但最小值改不了。 <br></p><h2 id="_10、double与bigdecimal" tabindex="-1"><a class="header-anchor" href="#_10、double与bigdecimal" aria-hidden="true">#</a> 10、double与BigDecimal</h2>`,85),q=n("br",null,null,-1),J=n("br",null,null,-1),C=n("br",null,null,-1),z=n("br",null,null,-1),F=n("br",null,null,-1),I=n("strong",null,"float和double的精度是由尾数的位数来决定的",-1),V=n("br",null,null,-1),L={href:"https://cloud.tencent.com/developer/article/1468551",target:"_blank",rel:"noopener noreferrer"},T=n("br",null,null,-1),M=n("br",null,null,-1),O=n("br",null,null,-1),U=n("strong",null,"声明BigDecimal对象的时候一定要使用它构造参数为String的类型的构造器",-1),G=n("br",null,null,-1),K=n("br",null,null,-1),H={href:"https://zhuanlan.zhihu.com/p/147993987",target:"_blank",rel:"noopener noreferrer"},N=n("br",null,null,-1),P=e(`<h2 id="_11、泛型-类型参数化" tabindex="-1"><a class="header-anchor" href="#_11、泛型-类型参数化" aria-hidden="true">#</a> 11、泛型（类型参数化）</h2><p>Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？ <br> 什么是泛型？ <br> Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。 <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//这里直接添加会报错</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">List</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Method</span> add <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">&quot;add&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//但是通过反射添加，是可以的</span>
add<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">&quot;kl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>泛型一般有三种使用方式:<strong>泛型类</strong>、<strong>泛型接口</strong>、<strong>泛型方法</strong>。 <br><img src="`+w+`" alt="" loading="lazy"> <br> 泛型类、泛型接口、泛型方法 <br><strong>1.泛型类</strong>： <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span>
<span class="token comment">//在实例化泛型类时，必须指定T的具体类型</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> 

    <span class="token keyword">private</span> <span class="token class-name">T</span> key<span class="token punctuation">;</span> 

    <span class="token keyword">public</span> <span class="token class-name">Generic</span><span class="token punctuation">(</span><span class="token class-name">T</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 

    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
        <span class="token keyword">return</span> key<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何实例化泛型类： <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> genericInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>2.泛型接口</strong> ： <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Generator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span> 
    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现泛型接口，指定类型： <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">GeneratorImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Generator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span> 
    <span class="token annotation punctuation">@Override</span> 
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">return</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.泛型方法</strong> ： <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span> <span class="token class-name">E</span> <span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span> <span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inputArray <span class="token punctuation">)</span> 
   <span class="token punctuation">{</span> 
         <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token class-name">E</span> element <span class="token operator">:</span> inputArray <span class="token punctuation">)</span><span class="token punctuation">{</span> 
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;%s &quot;</span><span class="token punctuation">,</span> element <span class="token punctuation">)</span><span class="token punctuation">;</span> 
         <span class="token punctuation">}</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用： <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建不同类型数组： Integer, Double 和 Character </span>
<span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> 
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stringArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;World&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> 
<span class="token function">printArray</span><span class="token punctuation">(</span> intArray  <span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token function">printArray</span><span class="token punctuation">(</span> stringArray  <span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>泛型常用的通配符有哪些？ <br><strong>常用的通配符为： T，E，K，V，？</strong> <br></p><ul><li>？ 表示不确定的 java 类型 <br></li><li>T (type) 表示具体的一个 java 类型 <br></li><li>K V (key value) 分别代表 java 键值中的 Key Value <br></li><li>E (element) 代表 Element <br></li></ul><p>什么是泛型擦除？ <br> 所谓的泛型擦除，官方名叫“类型擦除”。 <br> Java 的泛型是伪泛型，这是因为 Java 在编译期间，所有的类型信息都会被擦掉。 <br> 也就是说，在运行的时候是没有泛型的。 <br> 例如这段代码，往一群猫里放条狗： <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cat</span><span class="token punctuation">&gt;</span></span> cats <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cat</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token class-name">LinkedList</span> list <span class="token operator">=</span> cats<span class="token punctuation">;</span>  <span class="token comment">// 注意我在这里把范型去掉了，但是list和cats是同一个链表！</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 完全没问题！ </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 Java 的范型只存在于源码里，编译的时候给你静态地检查一下范型类型是否正确，而到了运行时就不检查了。上面这段代码在 JRE（Java<strong>运行</strong>环境）看来和下面这段没区别： <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">LinkedList</span> cats <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 注意：没有范型！ &lt;br/&gt;</span>
<span class="token class-name">LinkedList</span> list <span class="token operator">=</span> cats<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么要类型擦除呢？ <br> 主要是为了向下兼容，因为 JDK5 之前是没有泛型的，为了让 JVM 保持向下兼容，就出了类型擦除这个策略。 <br></p><h1 id="异常" tabindex="-1"><a class="header-anchor" href="#异常" aria-hidden="true">#</a> 异常</h1><h2 id="_1、java中异常处理体系" tabindex="-1"><a class="header-anchor" href="#_1、java中异常处理体系" aria-hidden="true">#</a> 1、Java中异常处理体系</h2><p>Java 的异常体系是分为多层的。 <br><img src="`+j+'" alt="" loading="lazy"> <br> Java异常体系 <br> Throwable是 Java 语言中所有错误或异常的基类，又分为Error和Exception。 <br> Error 是系统内部错误，比如虚拟机异常，是程序无法处理的。 <br> Exception是程序问题导致的异常，又分为两种： <br></p><ul><li>RuntimeException 运行时异常：程序运行中出现异常 <br></li></ul><p>Java编译器不会强制必须用try从句捕获它，编译可通过。 <br> eg.索引越界异常，空指针异常 <br></p><ul><li>CheckedException 受检异常：编译器会强制检查并要求处理的异常。 <br></li></ul><p>必须进行处理，捕获或抛出，否则报错，编译不通过 <br> eg.文件未发现异常 <br></p><h2 id="_2、异常处理方式" tabindex="-1"><a class="header-anchor" href="#_2、异常处理方式" aria-hidden="true">#</a> 2、异常处理方式</h2><p>针对异常的处理主要有两种方式： <br><img src="'+S+`" alt="" loading="lazy"> <br></p><ul><li><strong>遇到异常不进行具体处理，而是继续抛给调用者 （throw，throws）</strong> <br></li></ul><p>抛出异常有三种形式，一是 throw,一个 throws，还有一种系统自动抛异常。 <br> throws 用在方法上，后面跟的是异常类，可以跟多个；而 throw 用在方法内，后面跟的是异常对象。 <br></p><ul><li><strong>try catch 捕获异常</strong> <br></li></ul><p>在 catch 语句块中补货发生的异常，并进行处理。 <br></p><h2 id="_3、异常处理要点" tabindex="-1"><a class="header-anchor" href="#_3、异常处理要点" aria-hidden="true">#</a> 3、异常处理要点</h2><p>（1）try <br> 应该用多个try.catch.finally来包围应该被监控的代码，对于无须监控的代码，不应受try的影响。 <br> 反例：try包围了所有代码 <br> （2）catch <br> 在catch中不要只简单地抛出异常，要尽可能地处理异常，尽可能保证业务流程能正常运行，如果是在无法保证，也应友好的告诉用户当前的状况。 <br> （3）finally <br> finally应当尽可能的回收内存资源：关闭连接对象；关闭IO对象；clear方法清空集合；指向比较大内存空间的obj=null; <br> finally一定会执行，之前有return也会执行，除非之前通过System.exit(0);语句终止程序。 <br> （4）Exception <br> 先用专业的异常来处理，最后用Exception异常来处理。如果不用专业的异常处理类，就无法知道异常的具体信息。 <br> 反例：直接用Exception处理。 <br> （5）for循环异常处理 <br> 要从csv文件中读100条数据，把它们依次插入数据库，即使其中一条有错，也不影响其他插入，从而把影响降到最低。异常处理时不能把for循环包到try里，而是把每次插入动作包到try里。 <br></p><h2 id="_4、三道经典异常处理代码题" tabindex="-1"><a class="header-anchor" href="#_4、三道经典异常处理代码题" aria-hidden="true">#</a> 4、三道经典异常处理代码题</h2><p>题目 1 <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TryDemo</span> <span class="token punctuation">{</span> 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">try</span> <span class="token punctuation">{</span> 
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span> 
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：31。 <br> try、catch。finally 的基础用法，在 return 前会先执行 finally 语句块，所以是先输出 finally 里的 3，再输出 return 的 1。 <br> 题目 2 <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TryDemo</span> <span class="token punctuation">{</span> 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：3。 <br> try 返回前先执行 finally，结果 finally 里不按套路出牌，直接 return 了，自然也就走不到 try 里面的 return 了。 <br> finally 里面使用 return 仅存在于面试题中，实际开发这么写要挨吊的。 <br> 题目 3 <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TryDemo</span> <span class="token punctuation">{</span> 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
        <span class="token keyword">try</span> <span class="token punctuation">{</span> 
            i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> 
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span> 
            i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：2。 <br> 大家可能会以为结果应该是 3，因为在 return 前会执行 finally，而 i 在 finally 中被修改为 3 了，那最终返回 i 不是应该为 3 吗？ <br> 但其实，在执行 finally 之前，JVM 会先将 i 的结果暂存起来，然后 finally 执行完毕后，会返回之前暂存的结果，而不是返回 i，所以即使 i 已经被修改为 3，最终返回的还是之前暂存起来的结果 2。 <br></p>`,45);function Y(W,Q){const s=i("ExternalLinkIcon");return l(),c("div",null,[D,n("p",null,[a("double "),q,a(" 科学计数法存储 "),J,a(" float 符号位(1bit) 指数(8 bit) 尾数（有效数字）(23 bit) "),C,a(" double 符号位(1bit) 指数(11 bit) 尾数(52 bit) "),z,a(" Java中float的精度为6-7位有效数字。double的精度为15-16位。 "),F,I,a(",其整数部分始终是一个隐含着的“1”，由于它是不变的，故不能对精度造成影响。float：2^23 = 8388608，一共七位，由于最左为1的一位省略了，这意味着最多能表示8位数：28388608 = 16777216 。有8位有效数字，但绝对能保证的为7位，也即float的精度为7-8位有效数字；double：2^52 = 4503599627370496，一共16位，同理，double的精度为16-17位。 "),V,n("a",L,[a("double为什么丢失精度"),t(s)]),a(),T]),n("p",null,[a("BigDecimal "),M,a(" 我们在使用BigDecimal时，使用它的BigDecimal(String)构造器创建对象才有意义。其他的如BigDecimal b = new BigDecimal(1)这种，还是会发生精度丢失的问题。 "),O,a(" 我们一般使用BigDecimal来解决商业运算上丢失精度的问题的时候，"),U,a("。 "),G,a(" BigDecimal(String)如何做到不丢失精度：String转成字符数组来进行计算的 "),K,n("a",H,[a("BigDecimal 一定不会丢失精度吗"),t(s)]),a(),N]),P])}const X=p(x,[["render",Y],["__file","基础.html.vue"]]);export{X as default};
