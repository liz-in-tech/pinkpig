import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o as l,c,a as n,b as s,e as t,f as p}from"./app-Gq6XPTBq.js";const r="/pinkpig/assets/2.二进制_位运算-1-sZTeormV.png",i="/pinkpig/assets/2.二进制_位运算-2-bn8diQtk.png",u={},k=n("h1",{id:"二进制与位运算",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#二进制与位运算","aria-hidden":"true"},"#"),s(" 二进制与位运算")],-1),b={href:"https://www.runoob.com/w3cnote/bit-operation.html",target:"_blank",rel:"noopener noreferrer"},d=n("br",null,null,-1),m=n("br",null,null,-1),v=n("br",null,null,-1),g=n("br",null,null,-1),x=n("br",null,null,-1),h=n("br",null,null,-1),_=n("br",null,null,-1),f=p('<h2 id="位运算" tabindex="-1"><a class="header-anchor" href="#位运算" aria-hidden="true">#</a> 位运算</h2><p><img src="'+r+'" alt="image.png" loading="lazy"> <br> 基本原理 <br></p><p>0s 表示一串 0，1s 表示一串 1。 <br></p><p>x ^ 0s = x x &amp; 0s = 0 x | 0s = x <br> x ^ 1s = ~x x &amp; 1s = x x | 1s = 1s <br> x ^ x = 0 x &amp; x = x x | x = x <br> 利用 x ^ 1s = ~x 的特点，可以将一个数的位级表示翻转；利用 x ^ x = 0 的特点，可以将三个数中重复的两个数去除，只留下另一个数。 <br></p><p>1<sup>1</sup>2 = 2 <br> 利用 x &amp; 0s = 0 和 x &amp; 1s = x 的特点，可以实现掩码操作。一个数 num 与 mask：00111100 进行位与操作，只保留 num 中与 mask 的 1 部分相对应的位。 <br></p><p>01011011 &amp; <br> 00111100 <br> -------- <br> 00011000 <br> 利用 x | 0s = x 和 x | 1s = 1s 的特点，可以实现设值操作。一个数 num 与 mask：00111100 进行位或操作，将 num 中与 mask 的 1 部分相对应的位都设置为 1。 <br></p><p>01011011 | <br> 00111100 <br> -------- <br> 01111111 <br> 位与运算技巧 <br></p><p>n&amp;(n-1) 去除 n 的位级表示中最低的那一位 1。例如对于二进制表示 01011011，减去 1 得到 01011010，这两个数相与得到 01011010。 <br></p><p>01011011 &amp; <br> 01011010 <br> -------- <br> 01011010 <br> n&amp;(-n) 得到 n 的位级表示中最低的那一位 1。-n 得到 n 的反码加 1，也就是 -n=~n+1。例如对于二进制表示 10110100，-n 得到 01001100，相与得到 00000100。 <br></p><p>10110100 &amp; <br> 01001100 <br> -------- <br> 00000100 <br> n-(n&amp;(-n)) 则可以去除 n 的位级表示中最低的那一位 1，和 n&amp;(n-1) 效果一样。 <br></p><p>移位运算 <br> (Java 中无符号右移为 &quot;&gt;&gt;&gt;&quot;，有符号右移为&quot;&gt;&gt;&quot; ) <br></p><blockquote><blockquote><p>n 为算术右移，相当于除以 2n，例如 -7 &gt;&gt; 2 = -2。 <br></p></blockquote></blockquote><p>11111111111111111111111111111001 &gt;&gt; 2 <br> -------- <br> 11111111111111111111111111111110 <br></p><blockquote><blockquote><blockquote><p>n 为无符号右移，左边会补上 0。例如 -7 &gt;&gt;&gt; 2 = 1073741822。 <br></p></blockquote></blockquote></blockquote><p>11111111111111111111111111111001 &gt;&gt;&gt; 2 <br> -------- <br> 00111111111111111111111111111111 <br> &lt;&lt; n 为算术左移，相当于乘以 2n。-7 &lt;&lt; 2 = -28。 <br></p><p>11111111111111111111111111111001 &lt;&lt; 2 <br> -------- <br> 11111111111111111111111111100100 <br> mask 计算 <br></p><p>要获取 111111111，将 0 取反即可，~0。 <br></p><p>要得到只有第 i 位为 1 的 mask，将 1 向左移动 i-1 位即可，1&lt;&lt;(i-1) 。例如 1&lt;&lt;4 得到只有第 5 位为 1 的 mask ：00010000。 <br></p><p>要得到 1 到 i 位为 1 的 mask，(1&lt;&lt;i)-1 即可，例如将 (1&lt;&lt;4)-1 = 00010000-1 = 00001111。 <br></p><p>要得到 1 到 i 位为 0 的 mask，只需将 1 到 i 位为 1 的 mask 取反，即 ~((1&lt;&lt;i)-1)。 <br></p><p>Java 中的位操作 <br></p><p>static int Integer.bitCount(); // 统计 1 的数量 <br> static int Integer.highestOneBit(); // 获得最高位 <br> static String Integer.toBinaryString(int i); // 转换为二进制表示的字符串 <br></p><h2 id="进制转换" tabindex="-1"><a class="header-anchor" href="#进制转换" aria-hidden="true">#</a> 进制转换</h2><h3 id="十进制转其他进制" tabindex="-1"><a class="header-anchor" href="#十进制转其他进制" aria-hidden="true">#</a> 十进制转其他进制</h3><p><img src="'+i+`" alt="image.png" loading="lazy"> <br></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">import</span> java.util.*<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>

// 注意类名必须为 Main, 不要有任何 package xxx 信息 <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
public class Main <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        Scanner <span class="token keyword">in</span> <span class="token operator">=</span> new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        // 注意 hasNext 和 hasNextLine 的区别 <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>in.hasNextInt<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">{</span> // 注意 <span class="token keyword">while</span> 处理多个 <span class="token keyword">case</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
            int m <span class="token operator">=</span> in.nextInt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
            int n <span class="token operator">=</span> in.nextInt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
            boolean flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
            if<span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                System.out.print<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> if<span class="token punctuation">(</span>m <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                m <span class="token operator">=</span> -m<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
            <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
            List<span class="token operator">&lt;</span>Integer<span class="token operator">&gt;</span> r <span class="token operator">=</span> new ArrayList<span class="token operator">&lt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
            while<span class="token punctuation">(</span>m <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                r.add<span class="token punctuation">(</span>m%n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                m /<span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
            <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
            if<span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                System.out.print<span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
            <span class="token punctuation">}</span>              <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
            for<span class="token punctuation">(</span>int i <span class="token operator">=</span> r.size<span class="token punctuation">(</span><span class="token punctuation">)</span>-1<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i--<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                if<span class="token punctuation">(</span>r.get<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                    System.out.print<span class="token punctuation">(</span>r.get<span class="token punctuation">(</span>i<span class="token punctuation">))</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                    switch<span class="token punctuation">(</span>r.get<span class="token punctuation">(</span>i<span class="token punctuation">))</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                        <span class="token keyword">case</span> <span class="token number">10</span> <span class="token builtin class-name">:</span> System.out.print<span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                        <span class="token keyword">case</span> <span class="token number">11</span> <span class="token builtin class-name">:</span> System.out.print<span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                        <span class="token keyword">case</span> <span class="token number">12</span> <span class="token builtin class-name">:</span> System.out.print<span class="token punctuation">(</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                        <span class="token keyword">case</span> <span class="token number">13</span> <span class="token builtin class-name">:</span> System.out.print<span class="token punctuation">(</span><span class="token string">&quot;D&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                        <span class="token keyword">case</span> <span class="token number">14</span> <span class="token builtin class-name">:</span> System.out.print<span class="token punctuation">(</span><span class="token string">&quot;E&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                        <span class="token keyword">case</span> <span class="token number">15</span> <span class="token builtin class-name">:</span> System.out.print<span class="token punctuation">(</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span>                    <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                    <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
            <span class="token punctuation">}</span>             <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
    <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),q={id:"前置知识-原码、反码、补码-参考-注意-计算机底层运算都靠补码进行",tabindex:"-1"},w=n("a",{class:"header-anchor",href:"#前置知识-原码、反码、补码-参考-注意-计算机底层运算都靠补码进行","aria-hidden":"true"},"#",-1),y={href:"https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/computercode.html",target:"_blank",rel:"noopener noreferrer"},S=p(`<p>正数： 原码=反码=补码 <br> 负数： <br> 反码=原码除符号位取反 <br> 补码=反码+1 <br> 为什么用补码：为了只进行加法运算，且符号位一同进行运算 <br></p><p>为什么-x的补码计算方式是~x + 1: <br> -x = 0 - x，0减去一个数需要向前借1位，即100...00 - x <br> 哪个数加上x能产生这种进位的效果呢? <br> 首先x + (~x)，那么x的所有位就都为1了，再加上1 相当于进了1位的同时x所在位全为0 <br> 所以<sub>x+1能做到进位效果，所以-x的补码表示为</sub>x+1 <br> 常用二进制计算技巧: <br></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 1. n的二进制表示中第k位是0还是1 &lt;br/&gt;</span>
n <span class="token operator">&gt;&gt;</span> k <span class="token operator">&amp;</span> <span class="token number">1</span>  <span class="token comment">// n &gt;&gt; k 可把第k位移到个位，然后 x &amp; 1 可知个位是0还是1 &lt;br/&gt;</span>
    
<span class="token comment">// 2. lowbit，返回x的二进制表示中最右边的1及之后的0 &lt;br/&gt;</span>
<span class="token comment">// 原数a: 1... 1 0 0 &lt;br/&gt;</span>
<span class="token comment">// 取反b: 0... 0 1 1 &lt;br/&gt;</span>
<span class="token comment">// 加一c: 0... 1 0 0 &lt;br/&gt;</span>
<span class="token comment">// a &amp; c: 0000 1 0 0 &lt;br/&gt;</span>
<span class="token function">lowbit</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> x <span class="token operator">&amp;</span> <span class="token operator">-</span>x<span class="token punctuation">;</span> <span class="token comment">// 或 x &amp; (~x + 1) &lt;br/&gt;</span>
<span class="token comment">// 应用:  &lt;br/&gt;</span>
<span class="token comment">// 1. 统计x中1的个数: 循环x -= lowbit(x) 统计x为0时减了几次 &lt;br/&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function I(N,B){const a=e("ExternalLinkIcon");return l(),c("div",null,[k,n("p",null,[n("a",b,[s("链接"),t(a)]),s(),d,s(" 左移变大 （*2） "),m,s(" 右移变小（/2） "),v,s(" 奇数（二进制末位是1） "),g,s(" 偶数（二进制末位是0） "),x,s(" x&1 == 1 可以判断末位是否是1 "),h,s(" x >>= 1 末位去掉一位 "),_]),f,n("h2",q,[w,s(" 前置知识: 原码、反码、补码 "),n("a",y,[s("参考"),t(a)]),s(" (注意: 计算机底层运算都靠补码进行")]),S])}const V=o(u,[["render",I],["__file","2.二进制_位运算.html.vue"]]);export{V as default};
