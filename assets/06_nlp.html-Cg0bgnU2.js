import{_ as N}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as r,c as e,e as n}from"./app-dh4YKh5Y.js";const l={},a=n('<h1 id="nlp" tabindex="-1"><a class="header-anchor" href="#nlp" aria-hidden="true">#</a> NLP</h1><h2 id="nlp三大特征抽取器比较-cnn-rnn-transformer" tabindex="-1"><a class="header-anchor" href="#nlp三大特征抽取器比较-cnn-rnn-transformer" aria-hidden="true">#</a> NLP三大特征抽取器比较(CNN/RNN/Transformer)</h2><p>结论：RNN已经基本完成它的历史使命，将来会逐步退出历史舞台；CNN如果改造得当，将来还是有希望有自己在NLP领域的一席之地；而Transformer明显会很快成为NLP里担当大任的最主流的特征抽取器。</p><p>NLP任务的特点：输入是个一维线性序列；输入不定长；单词或句子的位置关系很重要；句子中长距离特征对于语义理解也很重要。</p><p>三大抽取器比较</p><ul><li>语义特征提取能力：TF &gt; RNN/CNN <ul><li>Transformer在这方面的能力非常显著地超过RNN和CNN，RNN和CNN两者能力差不太多。</li></ul></li><li>长距离特征捕获能力：TF/RNN &gt; CNN <ul><li>原生CNN特征抽取器在这方面极为显著地弱于RNN和Transformer</li></ul></li><li>任务综合特征抽取能力（机器翻译）：TF &gt; RNN/CNN <ul><li>Transformer综合能力要明显强于RNN和CNN，而RNN和CNN看上去表现基本相当，貌似CNN表现略好一些。</li></ul></li><li>并行计算能力及运行效率：TF/CNN &gt; RNN <ul><li>RNN在并行计算方面有严重缺陷，这是它本身的序列依赖特性导致的；对于CNN和Transformer来说，因为它们不存在网络中间状态不同时间步输入的依赖关系，所以可以非常方便及自由地做并行计算改造。Transformer和CNN差不多，都远远远远强于RNN。</li></ul></li></ul><p>综合排名: TF &gt; CNN &gt; RNN</p><p>单从任务综合效果方面来说，Transformer明显优于CNN，CNN略微优于RNN。速度方面Transformer和CNN明显占优，RNN在这方面劣势非常明显。</p><p>三者的结合：向Transformer靠拢</p>',9),i=[a];function t(o,s){return r(),e("div",null,i)}const f=N(l,[["render",t],["__file","06_nlp.html.vue"]]);export{f as default};
