import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as t,d as e,f as n}from"./app-xqJ9qOxH.js";const p="/pinkpig/assets/The_inheritance_relationship_of_the_base_class-L3NWhGxP.png",i="/pinkpig/assets/Subclass_of_RunnableSerializable-hqAJYss9.png",l="/pinkpig/assets/AgentExecutor_Source_Code-7gqiVw6M.jpg",o={},u=n('<h1 id="从源码视角-窥探langchain的运行逻辑" tabindex="-1"><a class="header-anchor" href="#从源码视角-窥探langchain的运行逻辑" aria-hidden="true">#</a> 从源码视角，窥探LangChain的运行逻辑</h1><blockquote><p>通过解读Chain的源码和AgentExecutor的源码，带你了解各个模块是如何关联在一起的</p></blockquote><ul><li><ol><li>LangChain的基类</li></ol></li><li><ol start="2"><li>LCEL与Runnable</li></ol></li><li><ol start="3"><li>Chain</li></ol></li><li><ol start="4"><li>AgentExecutor</li></ol></li></ul>',3),c=n('<h2 id="_1-langchain的基类" tabindex="-1"><a class="header-anchor" href="#_1-langchain的基类" aria-hidden="true">#</a> 1. LangChain的基类</h2><p>Python的抽象基类是ABC，LangChain的基类是其子类Runnable。</p><p>基类的继承关系如下图：</p><figure><img src="'+p+'" alt="基类的继承关系" tabindex="0" loading="lazy"><figcaption>基类的继承关系</figcaption></figure><p>RunnableSerializable的子类如下：</p><figure><img src="'+i+`" alt="RunnableSerializable的子类" tabindex="0" loading="lazy"><figcaption>RunnableSerializable的子类</figcaption></figure><p>抽取出重要的类，就有如下的继承关系：</p><ul><li>ABC <ul><li>Runnable <ul><li>Chain <ul><li>AgentExecutor</li></ul></li><li>BasePromptTemplate</li><li>BaseLanguageModel</li><li>BaseOutputParser</li><li>BaseRetriever</li><li>BaseTool</li></ul></li></ul></li></ul><h2 id="_2-lcel与runnable" tabindex="-1"><a class="header-anchor" href="#_2-lcel与runnable" aria-hidden="true">#</a> 2. LCEL与Runnable</h2><p>直观理解：</p><ul><li>Runnable是一个零件</li><li>LCEL是将零件组装为成品的方式</li></ul><h3 id="_2-1-lcel-langchain的表达式语言" tabindex="-1"><a class="header-anchor" href="#_2-1-lcel-langchain的表达式语言" aria-hidden="true">#</a> 2.1. LCEL(LangChain的表达式语言)</h3><p>LCEL，是LangChain Expression Language的缩写，即LangChain的表达式语言。</p><p>LCEL是一种轻松地将Runnable组合为Chain的声明性方式。</p><h4 id="_2-1-1-组合runnable的方式" tabindex="-1"><a class="header-anchor" href="#_2-1-1-组合runnable的方式" aria-hidden="true">#</a> 2.1.1. 组合Runnable的方式</h4><h5 id="_2-1-1-1-串行-runnablesequence" tabindex="-1"><a class="header-anchor" href="#_2-1-1-1-串行-runnablesequence" aria-hidden="true">#</a> 2.1.1.1. 串行(RunnableSequence)</h5><ul><li>特点 <ul><li>顺序调用一系列Runnable</li><li>上一个Runnable的输出作为下一个Runnable的输入</li></ul></li><li>实现 <ul><li>使用管道操作符&quot;|&quot;</li><li>向RunnableSequence传递runnable列表</li></ul></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> langchain_core<span class="token punctuation">.</span>runnables <span class="token keyword">import</span> RunnableLambda

<span class="token comment"># 使用\`|\`操作符构建的RunnableSequence</span>
sequence <span class="token operator">=</span> RunnableLambda<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> RunnableLambda<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
sequence<span class="token punctuation">.</span>invoke<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 输出 4</span>
sequence<span class="token punctuation">.</span>batch<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 输出 [4, 6, 8]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-1-1-2-并行-runnableparallel" tabindex="-1"><a class="header-anchor" href="#_2-1-1-2-并行-runnableparallel" aria-hidden="true">#</a> 2.1.1.2. 并行(RunnableParallel)</h5><ul><li>特点 <ul><li>并行Runnable有同一个输入</li><li>并行Runnable有各自的输出</li></ul></li><li>实现 <ul><li>使用dict</li><li>向RunnableParallel传递dict</li></ul></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> langchain_core<span class="token punctuation">.</span>runnables <span class="token keyword">import</span> RunnableLambda

<span class="token comment"># 包含用字典字面量构建的RunnableParallel的序列</span>
sequence <span class="token operator">=</span> RunnableLambda<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;mul_2&#39;</span><span class="token punctuation">:</span> RunnableLambda<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&#39;mul_5&#39;</span><span class="token punctuation">:</span> RunnableLambda<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
sequence<span class="token punctuation">.</span>invoke<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 输出 {&#39;mul_2&#39;: 4, &#39;mul_5&#39;: 10}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-runnable" tabindex="-1"><a class="header-anchor" href="#_2-2-runnable" aria-hidden="true">#</a> 2.2. Runnable</h3><h4 id="_2-2-1-what" tabindex="-1"><a class="header-anchor" href="#_2-2-1-what" aria-hidden="true">#</a> 2.2.1. What</h4><p>Runnable是一个可以被调用、批处理、流式处理、转换和组合的工作单元，也就是可以组合成链(Chain)的零件。</p><h4 id="_2-2-2-功能" tabindex="-1"><a class="header-anchor" href="#_2-2-2-功能" aria-hidden="true">#</a> 2.2.2. 功能</h4><ul><li>支持同步和异步</li><li>支持批处理</li><li>支持流式处理</li></ul><h4 id="_2-2-3-关键方法" tabindex="-1"><a class="header-anchor" href="#_2-2-3-关键方法" aria-hidden="true">#</a> 2.2.3. 关键方法</h4><ul><li>invoke/ainvoke：一个输入=&gt;一个输出</li><li>batch/abatch：多个输入=&gt;多个输出</li><li>stream/astream：一个输入=&gt;流式输出</li><li>astream_log：一个输入=&gt;流式输出和选定的中间结果</li></ul><h3 id="_2-3-runnable的子类" tabindex="-1"><a class="header-anchor" href="#_2-3-runnable的子类" aria-hidden="true">#</a> 2.3. Runnable的子类</h3><ul><li>Chain <ul><li>AgentExecutor</li></ul></li><li>BasePromptTemplate</li><li>BaseLanguageModel <ul><li>BaseLLM</li><li>BaseChatModel</li></ul></li><li>BaseOutputParser</li><li>BaseRetriever</li><li>BaseTool</li></ul><h3 id="_2-4-runnable子类的输入和输出类型" tabindex="-1"><a class="header-anchor" href="#_2-4-runnable子类的输入和输出类型" aria-hidden="true">#</a> 2.4. Runnable子类的输入和输出类型</h3><h4 id="_2-4-1-chain" tabindex="-1"><a class="header-anchor" href="#_2-4-1-chain" aria-hidden="true">#</a> 2.4.1. Chain</h4><ul><li>invoke <ul><li>input:Dict[str, Any]</li><li>output:Dict[str, Any]</li></ul></li><li>__call__ <ul><li>input:Union[Dict[str, Any], Any]</li><li>output:Dict[str, Any]</li></ul></li><li>run <ul><li>input:Any</li><li>output:Any</li></ul></li></ul><h4 id="_2-4-2-baseprompttemplate" tabindex="-1"><a class="header-anchor" href="#_2-4-2-baseprompttemplate" aria-hidden="true">#</a> 2.4.2. BasePromptTemplate</h4><ul><li>invoke <ul><li>input:Dict</li><li>output:PromptValue</li></ul></li></ul><h4 id="_2-4-3-basellm" tabindex="-1"><a class="header-anchor" href="#_2-4-3-basellm" aria-hidden="true">#</a> 2.4.3. BaseLLM</h4><ul><li>invoke <ul><li>input:Union[PromptValue, str, Sequence[BaseMessage]]</li><li>output:str</li></ul></li></ul><h4 id="_2-4-4-basechatmodel" tabindex="-1"><a class="header-anchor" href="#_2-4-4-basechatmodel" aria-hidden="true">#</a> 2.4.4. BaseChatModel</h4><ul><li>invoke <ul><li>input:Union[PromptValue, str, Sequence[BaseMessage]]</li><li>output:BaseMessage</li></ul></li></ul><h4 id="_2-4-5-baseoutputparser" tabindex="-1"><a class="header-anchor" href="#_2-4-5-baseoutputparser" aria-hidden="true">#</a> 2.4.5. BaseOutputParser</h4><ul><li>invoke <ul><li>input:Union[str, BaseMessage]</li><li>output:T</li></ul></li></ul><h4 id="_2-4-6-baseretriever" tabindex="-1"><a class="header-anchor" href="#_2-4-6-baseretriever" aria-hidden="true">#</a> 2.4.6. BaseRetriever</h4><ul><li>invoke <ul><li>input:str</li><li>output:List[Document]</li></ul></li></ul><h4 id="_2-4-7-basetool" tabindex="-1"><a class="header-anchor" href="#_2-4-7-basetool" aria-hidden="true">#</a> 2.4.7. BaseTool</h4><ul><li>invoke <ul><li>input:Union[str, Dict]</li><li>output:Any</li></ul></li></ul><h2 id="_3-chain" tabindex="-1"><a class="header-anchor" href="#_3-chain" aria-hidden="true">#</a> 3. Chain</h2><h3 id="_3-1-what" tabindex="-1"><a class="header-anchor" href="#_3-1-what" aria-hidden="true">#</a> 3.1. What</h3><ul><li>抽象基类</li><li>作用：构造组件的调用序列</li><li>特点 <ul><li>有状态（Stateful）：为任何 Chain 添加 Memory，即可为其赋予状态。</li><li>可观察（Observable）：为任何 Chain 添加 Callbacks，即可在组件调用序列外附加额外的功能，如日志记录。</li><li>可组合（Composable）：Chain API 足够灵活，便于将 Chain 与其他组件结合，包括其他 Chain。</li></ul></li></ul><h3 id="_3-2-chain的属性" tabindex="-1"><a class="header-anchor" href="#_3-2-chain的属性" aria-hidden="true">#</a> 3.2. Chain的属性</h3><ul><li>Memory：在chain开始的时候组装inputs，在chain结束的时候保存inputs和outputs。</li><li>Callbacks：在Chain的调用生命周期中，从on_chain_start开始，以on_chain_end或on_chain_error结束，都会调用Callbacks处理程序。</li></ul><h3 id="_3-3-chain的源码解读" tabindex="-1"><a class="header-anchor" href="#_3-3-chain的源码解读" aria-hidden="true">#</a> 3.3. Chain的源码解读</h3><p>源码入口：Chain的invoke方法</p><p>源码位置：langchain.chains.base.py中</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">invoke</span><span class="token punctuation">(</span>
    self<span class="token punctuation">,</span>
    <span class="token builtin">input</span><span class="token punctuation">:</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">,</span>
    config<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>RunnableConfig<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
    <span class="token operator">**</span>kwargs<span class="token punctuation">:</span> Any<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">:</span>
    config <span class="token operator">=</span> ensure_config<span class="token punctuation">(</span>config<span class="token punctuation">)</span>
    callbacks <span class="token operator">=</span> config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;callbacks&quot;</span><span class="token punctuation">)</span>
    tags <span class="token operator">=</span> config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;tags&quot;</span><span class="token punctuation">)</span>
    metadata <span class="token operator">=</span> config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;metadata&quot;</span><span class="token punctuation">)</span>
    run_name <span class="token operator">=</span> config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;run_name&quot;</span><span class="token punctuation">)</span>
    include_run_info <span class="token operator">=</span> kwargs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;include_run_info&quot;</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>
    return_only_outputs <span class="token operator">=</span> kwargs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;return_only_outputs&quot;</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>

    inputs <span class="token operator">=</span> self<span class="token punctuation">.</span>prep_inputs<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span> <span class="token comment"># 验证和准备chain的输入，包括添加来自memory的输入</span>
    callback_manager <span class="token operator">=</span> CallbackManager<span class="token punctuation">.</span>configure<span class="token punctuation">(</span>
        callbacks<span class="token punctuation">,</span>
        self<span class="token punctuation">.</span>callbacks<span class="token punctuation">,</span>
        self<span class="token punctuation">.</span>verbose<span class="token punctuation">,</span>
        tags<span class="token punctuation">,</span>
        self<span class="token punctuation">.</span>tags<span class="token punctuation">,</span>
        metadata<span class="token punctuation">,</span>
        self<span class="token punctuation">.</span>metadata<span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    new_arg_supported <span class="token operator">=</span> inspect<span class="token punctuation">.</span>signature<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_call<span class="token punctuation">)</span><span class="token punctuation">.</span>parameters<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;run_manager&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 看是否支持run_manager，即看_call的参数是否有run_manager</span>
    run_manager <span class="token operator">=</span> callback_manager<span class="token punctuation">.</span>on_chain_start<span class="token punctuation">(</span>
        dumpd<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">,</span>
        inputs<span class="token punctuation">,</span>
        name<span class="token operator">=</span>run_name<span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        outputs <span class="token operator">=</span> <span class="token punctuation">(</span>
            self<span class="token punctuation">.</span>_call<span class="token punctuation">(</span>inputs<span class="token punctuation">,</span> run_manager<span class="token operator">=</span>run_manager<span class="token punctuation">)</span> <span class="token comment"># chain的子类实现</span>
            <span class="token keyword">if</span> new_arg_supported
            <span class="token keyword">else</span> self<span class="token punctuation">.</span>_call<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
    <span class="token keyword">except</span> BaseException <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        run_manager<span class="token punctuation">.</span>on_chain_error<span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        <span class="token keyword">raise</span> e
    run_manager<span class="token punctuation">.</span>on_chain_end<span class="token punctuation">(</span>outputs<span class="token punctuation">)</span>
    final_outputs<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>prep_outputs<span class="token punctuation">(</span> <span class="token comment"># 验证和准备chain的输出，并将此次运行的信息保存到memory中</span>
        inputs<span class="token punctuation">,</span> outputs<span class="token punctuation">,</span> return_only_outputs
    <span class="token punctuation">)</span>
    <span class="token keyword">if</span> include_run_info<span class="token punctuation">:</span>
        final_outputs<span class="token punctuation">[</span>RUN_KEY<span class="token punctuation">]</span> <span class="token operator">=</span> RunInfo<span class="token punctuation">(</span>run_id<span class="token operator">=</span>run_manager<span class="token punctuation">.</span>run_id<span class="token punctuation">)</span>
    <span class="token keyword">return</span> final_outputs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>invoke源码逻辑：</p><ul><li>prep_inputs: 验证和准备chain的输入，包括添加来自memory的输入 <ul><li>memory.load_memory_variables: memory相关</li></ul></li><li>callback.on_chain_start: callback相关</li><li><strong>self._call: 抽象方法,由Chain的子类实现</strong></li><li>callback.on_chain_error: callback相关</li><li>callback.on_chain_end: callback相关</li><li>prep_outputs: 验证和准备chain的输出，并将此次运行的信息保存到memory中 <ul><li>memory.save_context: memory相关，将inputs, outputs保存到memory</li></ul></li></ul><h2 id="_4-agentexecutor" tabindex="-1"><a class="header-anchor" href="#_4-agentexecutor" aria-hidden="true">#</a> 4. AgentExecutor</h2><h3 id="_4-1-what" tabindex="-1"><a class="header-anchor" href="#_4-1-what" aria-hidden="true">#</a> 4.1. What</h3><ul><li>Chain的子类</li><li>可以使用工具、拥有记忆、动态决策的智能体</li><li>AgentExecutor = Agent + Memory + Tools</li><li>对用户的问题，进行多轮迭代执行，最终返回结果</li></ul><h3 id="_4-2-agentexecutor的属性" tabindex="-1"><a class="header-anchor" href="#_4-2-agentexecutor的属性" aria-hidden="true">#</a> 4.2. AgentExecutor的属性</h3><ul><li>Memory：继承自父类Chain</li><li>Callbacks：继承自父类Chain</li><li>Agent：决定迭代执行的每一步的行为</li><li>Tools：可以使用的工具</li><li>Max Iterations：最大迭代轮次</li><li>Max Execution Time：最大执行时间</li></ul><h3 id="_4-3-agentexecutor的源码解读" tabindex="-1"><a class="header-anchor" href="#_4-3-agentexecutor的源码解读" aria-hidden="true">#</a> 4.3. AgentExecutor的源码解读</h3><h4 id="step1-chain-invoke" tabindex="-1"><a class="header-anchor" href="#step1-chain-invoke" aria-hidden="true">#</a> Step1：Chain.invoke</h4><p>AgentExecutor没有重写invoke方法，会调用父类的invoke方法。</p><h4 id="step2-agentexecutor-call-迭代器-循环迭代执行" tabindex="-1"><a class="header-anchor" href="#step2-agentexecutor-call-迭代器-循环迭代执行" aria-hidden="true">#</a> Step2：AgentExecutor._call(迭代器，循环迭代执行)</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token keyword">def</span> <span class="token function">_call</span><span class="token punctuation">(</span>
        self<span class="token punctuation">,</span>
        inputs<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        run_manager<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>CallbackManagerForChainRun<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;Run text through and get agent response.&quot;&quot;&quot;</span>
        <span class="token comment"># Construct a mapping of tool name to tool for easy lookup</span>
        name_to_tool_map <span class="token operator">=</span> <span class="token punctuation">{</span>tool<span class="token punctuation">.</span>name<span class="token punctuation">:</span> tool <span class="token keyword">for</span> tool <span class="token keyword">in</span> self<span class="token punctuation">.</span>tools<span class="token punctuation">}</span>
        <span class="token comment"># We construct a mapping from each tool to a color, used for logging.</span>
        color_mapping <span class="token operator">=</span> get_color_mapping<span class="token punctuation">(</span>
            <span class="token punctuation">[</span>tool<span class="token punctuation">.</span>name <span class="token keyword">for</span> tool <span class="token keyword">in</span> self<span class="token punctuation">.</span>tools<span class="token punctuation">]</span><span class="token punctuation">,</span> excluded_colors<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;green&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">]</span>
        <span class="token punctuation">)</span>
        intermediate_steps<span class="token punctuation">:</span> List<span class="token punctuation">[</span>Tuple<span class="token punctuation">[</span>AgentAction<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token comment"># Let&#39;s start tracking the number of iterations and time elapsed</span>
        iterations <span class="token operator">=</span> <span class="token number">0</span>
        time_elapsed <span class="token operator">=</span> <span class="token number">0.0</span>
        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># We now enter the agent loop (until it returns something).</span>
        <span class="token keyword">while</span> self<span class="token punctuation">.</span>_should_continue<span class="token punctuation">(</span>iterations<span class="token punctuation">,</span> time_elapsed<span class="token punctuation">)</span><span class="token punctuation">:</span>
            next_step_output <span class="token operator">=</span> self<span class="token punctuation">.</span>_take_next_step<span class="token punctuation">(</span>
                name_to_tool_map<span class="token punctuation">,</span>
                color_mapping<span class="token punctuation">,</span>
                inputs<span class="token punctuation">,</span>
                intermediate_steps<span class="token punctuation">,</span>
                run_manager<span class="token operator">=</span>run_manager<span class="token punctuation">,</span>
            <span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>next_step_output<span class="token punctuation">,</span> AgentFinish<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> self<span class="token punctuation">.</span>_return<span class="token punctuation">(</span>
                    next_step_output<span class="token punctuation">,</span> intermediate_steps<span class="token punctuation">,</span> run_manager<span class="token operator">=</span>run_manager
                <span class="token punctuation">)</span>

            intermediate_steps<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>next_step_output<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>next_step_output<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
                next_step_action <span class="token operator">=</span> next_step_output<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
                <span class="token comment"># See if tool should return directly</span>
                tool_return <span class="token operator">=</span> self<span class="token punctuation">.</span>_get_tool_return<span class="token punctuation">(</span>next_step_action<span class="token punctuation">)</span>
                <span class="token keyword">if</span> tool_return <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                    <span class="token keyword">return</span> self<span class="token punctuation">.</span>_return<span class="token punctuation">(</span>
                        tool_return<span class="token punctuation">,</span> intermediate_steps<span class="token punctuation">,</span> run_manager<span class="token operator">=</span>run_manager
                    <span class="token punctuation">)</span>
            iterations <span class="token operator">+=</span> <span class="token number">1</span>
            time_elapsed <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time
        output <span class="token operator">=</span> self<span class="token punctuation">.</span>agent<span class="token punctuation">.</span>return_stopped_response<span class="token punctuation">(</span>
            self<span class="token punctuation">.</span>early_stopping_method<span class="token punctuation">,</span> intermediate_steps<span class="token punctuation">,</span> <span class="token operator">**</span>inputs
        <span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_return<span class="token punctuation">(</span>output<span class="token punctuation">,</span> intermediate_steps<span class="token punctuation">,</span> run_manager<span class="token operator">=</span>run_manager<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_call源码逻辑：</p><ul><li>while _should_continue：迭代器 <ul><li>_take_next_step：迭代方法</li></ul></li></ul><h4 id="step3-迭代停止条件" tabindex="-1"><a class="header-anchor" href="#step3-迭代停止条件" aria-hidden="true">#</a> Step3：迭代停止条件</h4><ul><li>迭代次数限制：iterations&gt;=self.max_iterations</li><li>迭代时间限制：time_elapsed&gt;=self.max_execution_time</li><li>停止信号AgentFinish：isinstance(next_step_output, AgentFinish)</li></ul><h4 id="step4-take-next-step-迭代方法" tabindex="-1"><a class="header-anchor" href="#step4-take-next-step-迭代方法" aria-hidden="true">#</a> Step4：_take_next_step(迭代方法)</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token keyword">def</span> <span class="token function">_take_next_step</span><span class="token punctuation">(</span>
        self<span class="token punctuation">,</span>
        name_to_tool_map<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> BaseTool<span class="token punctuation">]</span><span class="token punctuation">,</span>
        color_mapping<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        inputs<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        intermediate_steps<span class="token punctuation">:</span> List<span class="token punctuation">[</span>Tuple<span class="token punctuation">[</span>AgentAction<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        run_manager<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>CallbackManagerForChainRun<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Union<span class="token punctuation">[</span>AgentFinish<span class="token punctuation">,</span> List<span class="token punctuation">[</span>Tuple<span class="token punctuation">[</span>AgentAction<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_consume_next_step<span class="token punctuation">(</span>
            <span class="token punctuation">[</span>
                a
                <span class="token keyword">for</span> a <span class="token keyword">in</span> self<span class="token punctuation">.</span>_iter_next_step<span class="token punctuation">(</span>
                    name_to_tool_map<span class="token punctuation">,</span>
                    color_mapping<span class="token punctuation">,</span>
                    inputs<span class="token punctuation">,</span>
                    intermediate_steps<span class="token punctuation">,</span>
                    run_manager<span class="token punctuation">,</span>
                <span class="token punctuation">)</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_take_next_step源码逻辑：</p><ul><li>_iter_next_step <ul><li>agent.plan</li><li>tool.run</li></ul></li><li>_consume_next_step</li></ul><h4 id="step5-iter-next-step" tabindex="-1"><a class="header-anchor" href="#step5-iter-next-step" aria-hidden="true">#</a> Step5：_iter_next_step</h4><p>_iter_next_step源码逻辑：</p><ul><li>1.调LLM生成一个计划plan（plan要么是AgentFinish，要么是AgentAction）</li><li>2.如果是AgentFinish则返回，结束</li><li>3.如果是AgentAction则调对应的工具</li><li>4.调对应工具生成observation</li><li>5.生成并返回AgentStep(action=agent_action, observation=observation)，结束</li></ul><h4 id="step6-consume-next-step" tabindex="-1"><a class="header-anchor" href="#step6-consume-next-step" aria-hidden="true">#</a> Step6：_consume_next_step</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">_consume_next_step</span><span class="token punctuation">(</span>
    self<span class="token punctuation">,</span> values<span class="token punctuation">:</span> NextStepOutput
<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Union<span class="token punctuation">[</span>AgentFinish<span class="token punctuation">,</span> List<span class="token punctuation">[</span>Tuple<span class="token punctuation">[</span>AgentAction<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> AgentFinish<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>
        <span class="token keyword">return</span> values<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token punctuation">(</span>a<span class="token punctuation">.</span>action<span class="token punctuation">,</span> a<span class="token punctuation">.</span>observation<span class="token punctuation">)</span> <span class="token keyword">for</span> a <span class="token keyword">in</span> values <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> AgentStep<span class="token punctuation">)</span>
        <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_consume_next_step源码逻辑：</p><ul><li>如果是AgentFinish，直接返回</li><li>如果是AgentStep，则转换为List[Tuple[AgentAction,str]]后返回</li></ul><h3 id="_4-4-agentexecutor的源码总结" tabindex="-1"><a class="header-anchor" href="#_4-4-agentexecutor的源码总结" aria-hidden="true">#</a> 4.4. AgentExecutor的源码总结</h3><figure><img src="`+l+'" alt="AgentExecutor Source Code" tabindex="0" loading="lazy"><figcaption>AgentExecutor Source Code</figcaption></figure>',83);function r(d,k){return s(),t("div",null,[u,e(" more "),c])}const h=a(o,[["render",r],["__file","langchain_source_code.html.vue"]]);export{h as default};
