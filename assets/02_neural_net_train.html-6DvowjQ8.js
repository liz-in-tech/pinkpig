import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as t,f as p,e as n}from"./app-eTVGMpLM.js";const o="/pinkpig/assets/clf-ZioYgcq-.png",e={},c=n('<h1 id="神经网络训练要点解读" tabindex="-1"><a class="header-anchor" href="#神经网络训练要点解读" aria-hidden="true">#</a> 神经网络训练要点解读</h1><ul><li><ol><li>整体目标</li></ol></li><li><ol start="2"><li>损失函数：量化模型的有效性</li></ol></li><li><ol start="3"><li>优化算法（梯度下降,gradient descent）：调整模型参数以优化目标函数的算法</li></ol></li><li><ol start="4"><li>Schedule</li></ol></li><li><ol start="5"><li>超参数</li></ol></li><li><ol start="6"><li>训练整体流程</li></ol></li></ul>',2),l=n('<h2 id="_1-整体目标" tabindex="-1"><a class="header-anchor" href="#_1-整体目标" aria-hidden="true">#</a> 1. 整体目标</h2><p>用数据不断调整神经网络模型的参数，使得模型行为更符合预期。</p><h2 id="_2-损失函数-量化模型的有效性" tabindex="-1"><a class="header-anchor" href="#_2-损失函数-量化模型的有效性" aria-hidden="true">#</a> 2. 损失函数：量化模型的有效性</h2><table><thead><tr><th>场景</th><th>最常见损失函数</th><th>特点</th></tr></thead><tbody><tr><td>回归</td><td>平方误差SE，squared error，即预测值与实际值之差的平方</td><td>很容易被优化</td></tr><tr><td>分类</td><td>交叉熵cross-entropy最小化错误率，即预测与实际情况不符的样本比例</td><td>难以直接优化，通常会优化替代目标</td></tr></tbody></table><h2 id="_3-优化算法-梯度下降-gradient-descent-调整模型参数以优化目标函数的算法" tabindex="-1"><a class="header-anchor" href="#_3-优化算法-梯度下降-gradient-descent-调整模型参数以优化目标函数的算法" aria-hidden="true">#</a> 3. 优化算法（梯度下降,gradient descent）：调整模型参数以优化目标函数的算法</h2><p>梯度下降（gradient descent）， 这种方法几乎可以优化所有深度学习模型。 它通过不断地在损失函数递减的方向上更新参数来降低误差。</p><p>梯度，是对每一个特征求偏导组成的向量</p><p>梯度下降最简单的用法是计算损失函数（数据集中所有样本的损失均值） 关于模型参数的导数（在这里也可以称为梯度）。 但实际中的执行可能会非常慢：因为在每一次更新参数之前，我们必须遍历整个数据集。 因此，我们通常会在每次需要计算更新的时候随机抽取一小批样本， 这种变体叫做<strong>小批量随机梯度下降</strong>（minibatch stochastic gradient descent）。</p><p>梯度下降：对每个样本求梯度</p><p>随机梯度下降：随机找一个样本求梯度</p><p>小批量随机梯度下降：随机找b个样本求梯度，然后再求平均值</p><p>批量很小：收敛快，计算慢</p><p>批量很大：相反</p><p>批量要取合适的大小，不能太小，也不能太大</p><p>冲量法：使用平滑过的梯度对权重更新</p><p>冲量法会将之间时刻的梯度也给一定权重，也就是不完全考虑当前时刻的梯度，会考虑之前时刻的梯度</p><figure><img src="'+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>beta取值越小，之前时刻的梯度权重越小；取值越大，之前时刻的梯度权重越大</p><p>0.5大概看过去2-3个的样子</p><p>0.99大概看以前的50个梯度做平均，如果样本量大也可以用</p><p>Adam</p><p>sgd+moment效果也挺好了，可以不用adam，因为adam不一定比sgd+moment效果好</p><p>但是adam最好的一点是，对学习率没那么敏感，它做了非常多的平滑，可以认为是一个非常非常平滑的sgd，一旦平滑了，对学习率就没那么敏感了</p><p>如果没有太多时间调参的话，用adam是一个不错的选项</p><h2 id="_4-schedule" tabindex="-1"><a class="header-anchor" href="#_4-schedule" aria-hidden="true">#</a> 4. Schedule</h2><p>模型训练中的scheduler（调度器）用于调整优化器的学习率或其他超参数，以便在训练过程中更有效地优化模型参数。学习率是优化算法中的一个重要超参数，它控制着参数更新的步长，对模型的收敛速度和性能有着重要影响。</p><p>调度器的主要作用是<strong>在训练过程中动态地调整学习率</strong>或其他超参数，以适应模型训练的不同阶段或遇到的问题。常见的调度策略包括：</p><ol><li><strong>学习率衰减（Learning Rate Decay）</strong>：随着训练的进行，逐渐减小学习率，以便在接近最优解时更加精细地调整参数。</li><li><strong>学习率步骤调度（Learning Rate Step Schedule）</strong>：在预定的训练步数或 epoch 之后，将学习率降低一个预定的因子。</li><li><strong>学习率余弦退火（Learning Rate Cosine Annealing）</strong>：以余弦函数的形式调整学习率，在训练过程中逐渐减小学习率，以实现更平滑的优化过程。</li><li><strong>自适应调整（Adaptive Adjustment）</strong>：根据模型的性能指标或其他因素动态地调整学习率或其他超参数。</li><li><strong>指数衰减（Exponential Decay）</strong>：以指数函数的形式衰减学习率，通常用于快速收敛到一个较低的学习率。</li></ol><p>通过使用调度器，可以使模型在训练过程中更加稳健地收敛，并且能够更好地适应不同的数据分布或训练目标。</p><h2 id="_5-超参数" tabindex="-1"><a class="header-anchor" href="#_5-超参数" aria-hidden="true">#</a> 5. 超参数</h2><p>|B|表示每个小批量中的样本数，这也称为<strong>批量大小</strong>（batch size）。</p><p>η表示<em>学习率</em>（learning rate）。</p><p>批量大小和学习率的值通常是手动预先指定，而不是通过模型训练得到的。 这些可以调整但不在训练过程中更新的参数称为<strong>超参数</strong>（hyperparameter）。</p><p><strong>调参</strong>（hyperparameter tuning）是选择超参数的过程。 超参数通常是我们根据训练迭代结果来调整的， 而训练迭代结果是在独立的<strong>验证数据集</strong>（validation dataset）上评估得到的。</p><p>深度学习实践者很少会去花费大力气寻找这样一组参数，使得在<strong>训练集</strong>上的损失达到最小。 事实上，更难做到的是找到一组参数，这组参数能够在我们从未见过的数据上实现较低的损失， 这一挑战被称为<strong>泛化</strong>（generalization）。</p><h2 id="_6-训练整体流程" tabindex="-1"><a class="header-anchor" href="#_6-训练整体流程" aria-hidden="true">#</a> 6. 训练整体流程</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 步骤1：准备数据集</span>
train_loader
validate_loader
test_loader

<span class="token comment"># 步骤2：定义模型</span>
<span class="token keyword">class</span> <span class="token class-name">MyModel</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
			<span class="token keyword">pass</span>			
		<span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
			<span class="token keyword">pass</span>	
			
<span class="token comment"># 步骤3：定义损失函数和优化器</span>
model <span class="token operator">=</span> MyModel<span class="token punctuation">(</span><span class="token punctuation">)</span>
criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 步骤4：定义训练函数</span>
<span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> loader<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">pass</span>

<span class="token comment"># 步骤5：定义评估函数</span>
<span class="token keyword">def</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> loader<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">pass</span>

<span class="token comment"># 步骤6：定义训练循环</span>
<span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    train_loss<span class="token punctuation">,</span> train_acc <span class="token operator">=</span> train<span class="token punctuation">(</span>model<span class="token punctuation">,</span> train_loader<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span>
    validate_loss<span class="token punctuation">,</span> validate_acc <span class="token operator">=</span> evaluate<span class="token punctuation">(</span>model<span class="token punctuation">,</span> validate_loader<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;Epoch [</span><span class="token interpolation"><span class="token punctuation">{</span>epoch<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>epochs<span class="token punctuation">}</span></span><span class="token string">], Train Loss: </span><span class="token interpolation"><span class="token punctuation">{</span>train_loss<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">, Train Acc: </span><span class="token interpolation"><span class="token punctuation">{</span>train_acc<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">, &#39;</span></span>
          <span class="token string-interpolation"><span class="token string">f&#39;Validate Loss: </span><span class="token interpolation"><span class="token punctuation">{</span>validate_loss<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">, Validate Acc: </span><span class="token interpolation"><span class="token punctuation">{</span>validate_acc<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>

<span class="token comment"># 步骤7：测试模型</span>
test_loss<span class="token punctuation">,</span> test_acc <span class="token operator">=</span> evaluate<span class="token punctuation">(</span>model<span class="token punctuation">,</span> test_loader<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;Test Loss: </span><span class="token interpolation"><span class="token punctuation">{</span>test_loss<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">, Test Acc: </span><span class="token interpolation"><span class="token punctuation">{</span>test_acc<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整案例</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> torch
<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn
<span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader
<span class="token keyword">from</span> torchvision<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> MNIST
<span class="token keyword">from</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">import</span> ToTensor
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> random_split
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> precision_score<span class="token punctuation">,</span> recall_score<span class="token punctuation">,</span> f1_score<span class="token punctuation">,</span> roc_auc_score

<span class="token comment"># 步骤1：准备数据集</span>
<span class="token comment"># 加载MNIST数据集并进行预处理</span>
dataset <span class="token operator">=</span> MNIST<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">&#39;./data&#39;</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
train_set<span class="token punctuation">,</span> validate_set <span class="token operator">=</span> random_split<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">50000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 划分训练集和验证集</span>
test_set <span class="token operator">=</span> MNIST<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">&#39;./data&#39;</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
train_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_set<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
validate_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>validate_set<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>
test_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>test_set<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>

<span class="token comment"># 步骤2：定义模型</span>
<span class="token keyword">class</span> <span class="token class-name">SimpleNN</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>SimpleNN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>flatten <span class="token operator">=</span> nn<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 将图片展平</span>
        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">28</span> <span class="token operator">*</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span> <span class="token comment"># 第一个全连接层，输入维度为28*28，输出维度为512</span>
        self<span class="token punctuation">.</span>relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># ReLU激活函数</span>
        self<span class="token punctuation">.</span>dropout <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span> <span class="token comment"># Dropout层，用于防止过拟合</span>
        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment"># 第二个全连接层，输入维度为512，输出维度为10，对应10个类别</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment"># 展平输入</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment"># 第一个全连接层</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment"># ReLU激活</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment"># Dropout层</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment"># 第二个全连接层</span>
        <span class="token keyword">return</span> x

<span class="token comment"># 步骤3：定义损失函数和优化器</span>
model <span class="token operator">=</span> SimpleNN<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 实例化模型</span>
criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 交叉熵损失函数</span>
optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># Adam优化器</span>

<span class="token comment"># 步骤4：定义训练函数</span>
<span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> loader<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span><span class="token punctuation">:</span>
    model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 切换到训练模式</span>
    running_loss <span class="token operator">=</span> <span class="token number">0.0</span>
    correct <span class="token operator">=</span> <span class="token number">0</span>
    total <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> inputs<span class="token punctuation">,</span> labels <span class="token keyword">in</span> loader<span class="token punctuation">:</span>
        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 梯度清零</span>
        outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span> <span class="token comment"># 前向传播</span>
        loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> labels<span class="token punctuation">)</span> <span class="token comment"># 计算损失</span>
        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 反向传播</span>
        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 更新参数</span>

        running_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 记录损失</span>
        _<span class="token punctuation">,</span> predicted <span class="token operator">=</span> torch<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 获取预测结果</span>
        total <span class="token operator">+=</span> labels<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 计算样本总数</span>
        correct <span class="token operator">+=</span> <span class="token punctuation">(</span>predicted <span class="token operator">==</span> labels<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 计算预测正确的样本数</span>

    <span class="token keyword">return</span> running_loss <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>loader<span class="token punctuation">)</span><span class="token punctuation">,</span> correct <span class="token operator">/</span> total <span class="token comment"># 返回平均损失和准确率</span>

<span class="token comment"># 步骤5：定义评估函数</span>
<span class="token keyword">def</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> loader<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span><span class="token punctuation">:</span>
    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 切换到评估模式</span>
    running_loss <span class="token operator">=</span> <span class="token number">0.0</span>
    correct <span class="token operator">=</span> <span class="token number">0</span>
    total <span class="token operator">=</span> <span class="token number">0</span>
    predictions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    actuals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> inputs<span class="token punctuation">,</span> labels <span class="token keyword">in</span> loader<span class="token punctuation">:</span>
            outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span> <span class="token comment"># 前向传播</span>
            loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> labels<span class="token punctuation">)</span> <span class="token comment"># 计算损失</span>

            running_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 记录损失</span>
            _<span class="token punctuation">,</span> predicted <span class="token operator">=</span> torch<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 获取预测结果</span>
            predictions<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>predicted<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            actuals<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>labels<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            total <span class="token operator">+=</span> labels<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 计算样本总数</span>
            correct <span class="token operator">+=</span> <span class="token punctuation">(</span>predicted <span class="token operator">==</span> labels<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 计算预测正确的样本数</span>
		
		precision <span class="token operator">=</span> precision_score<span class="token punctuation">(</span>actuals<span class="token punctuation">,</span> predictions<span class="token punctuation">,</span> average<span class="token operator">=</span><span class="token string">&#39;macro&#39;</span><span class="token punctuation">)</span>
    recall <span class="token operator">=</span> recall_score<span class="token punctuation">(</span>actuals<span class="token punctuation">,</span> predictions<span class="token punctuation">,</span> average<span class="token operator">=</span><span class="token string">&#39;macro&#39;</span><span class="token punctuation">)</span>
    f1 <span class="token operator">=</span> f1_score<span class="token punctuation">(</span>actuals<span class="token punctuation">,</span> predictions<span class="token punctuation">,</span> average<span class="token operator">=</span><span class="token string">&#39;macro&#39;</span><span class="token punctuation">)</span>
    roc_auc <span class="token operator">=</span> roc_auc_score<span class="token punctuation">(</span>actuals<span class="token punctuation">,</span> predictions<span class="token punctuation">)</span>
    
    <span class="token comment"># 计算特异性</span>
    conf_matrix <span class="token operator">=</span> confusion_matrix<span class="token punctuation">(</span>actuals<span class="token punctuation">,</span> predictions<span class="token punctuation">)</span>
    TN<span class="token punctuation">,</span> FP<span class="token punctuation">,</span> FN<span class="token punctuation">,</span> TP <span class="token operator">=</span> conf_matrix<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span>
    specificity <span class="token operator">=</span> TN <span class="token operator">/</span> <span class="token punctuation">(</span>TN <span class="token operator">+</span> FP<span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> running_loss <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>loader<span class="token punctuation">)</span><span class="token punctuation">,</span> correct <span class="token operator">/</span> total<span class="token punctuation">,</span> precision<span class="token punctuation">,</span> recall<span class="token punctuation">,</span> specificity<span class="token punctuation">,</span> f1<span class="token punctuation">,</span> roc_auc

<span class="token comment"># 步骤6：定义训练循环</span>
epochs <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    train_loss<span class="token punctuation">,</span> train_acc <span class="token operator">=</span> train<span class="token punctuation">(</span>model<span class="token punctuation">,</span> train_loader<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span> <span class="token comment"># 训练模型</span>
    validate_loss<span class="token punctuation">,</span> validate_acc<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _ <span class="token operator">=</span> evaluate<span class="token punctuation">(</span>model<span class="token punctuation">,</span> validate_loader<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span> <span class="token comment"># 在验证集上评估模型</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;Epoch [</span><span class="token interpolation"><span class="token punctuation">{</span>epoch<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>epochs<span class="token punctuation">}</span></span><span class="token string">], Train Loss: </span><span class="token interpolation"><span class="token punctuation">{</span>train_loss<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">, Train Acc: </span><span class="token interpolation"><span class="token punctuation">{</span>train_acc<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">, &#39;</span></span>
          <span class="token string-interpolation"><span class="token string">f&#39;Validate Loss: </span><span class="token interpolation"><span class="token punctuation">{</span>validate_loss<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">, Validate Acc: </span><span class="token interpolation"><span class="token punctuation">{</span>validate_acc<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>

<span class="token comment"># 步骤7：测试模型</span>
test_loss<span class="token punctuation">,</span> test_acc<span class="token punctuation">,</span> test_precision<span class="token punctuation">,</span> test_recall<span class="token punctuation">,</span> test_specificity<span class="token punctuation">,</span> test_f1<span class="token punctuation">,</span> test_roc_auc <span class="token operator">=</span> self<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>test_loader<span class="token punctuation">)</span> <span class="token comment"># 所有轮次的训练结束后，用test数据集进行评估</span>
logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;[Test] Loss: </span><span class="token interpolation"><span class="token punctuation">{</span>test_loss<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">, Accuracy: </span><span class="token interpolation"><span class="token punctuation">{</span>test_acc<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">, Precision: </span><span class="token interpolation"><span class="token punctuation">{</span>test_precision<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">, &#39;</span></span>
            <span class="token string-interpolation"><span class="token string">f&#39;Recall: </span><span class="token interpolation"><span class="token punctuation">{</span>test_recall<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">, Specificity: </span><span class="token interpolation"><span class="token punctuation">{</span>test_specificity<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">, F1_Score: </span><span class="token interpolation"><span class="token punctuation">{</span>test_f1<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">, ROC_AUC: </span><span class="token interpolation"><span class="token punctuation">{</span>test_roc_auc<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,39);function i(u,r){return a(),t("div",null,[c,p(" more "),l])}const m=s(e,[["render",i],["__file","02_neural_net_train.html.vue"]]);export{m as default};
