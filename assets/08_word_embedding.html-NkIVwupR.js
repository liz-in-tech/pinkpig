const e=JSON.parse('{"key":"v-64582d3c","path":"/llm/03_llm_training/08_word_embedding.html","title":"Word Embedding（“词嵌入”，分布式词向量，稠密向量的非零表征，隐含语义的特征表示）","lang":"en-US","frontmatter":{"description":"Word Embedding（“词嵌入”，分布式词向量，稠密向量的非零表征，隐含语义的特征表示） what 词转为对应的向量，用于在后续任务中提取语义特征 词向量表即词和向量一一对应的字典 how 独热编码（One-hot向量，One-hot编码，One-Hot Representation，基于词典空间的稀疏词向量表示） 举例：假如词典中共有10000个词，则这个one-hot向量长度就是10000，该词在词典中所处位置对应的值为1，其他值为0 优点：简单 缺点 向量维度非常大，且每个向量是稀疏的 不同词的one-hot编码向量是正交的，在向量空间中无法表示近似关系，即使两个含义相近的词，它们的词向量点积也为0 Embedding (词嵌入，词向量) 主要方法包括 Word2Vec、GloVe 和 FastText 用维度有限的稠密的向量来表示所有的词汇，传统的Transformer中，词嵌入有512维；BERT中，词嵌入有768维和1024维两个版本。 one-hot与embedding的关系 词向量就是one hot的全连接层的权重矩阵参数 例如，对于一个有30000个词汇量的词典V，每一个词都是30000维的一个稀疏向量。对于每一个词，我们给他乘一个30000*512的权重矩阵，最终就得到一个512维的向量了 词向量算法代表：word2vec word2vec是一个具有代表性的词嵌入学习模型，它构建了一个简化的浅层神经网络来学习词表示 两种训练方式/两种模型 连续词袋模型 CBOW （Continuous Bag of Words） CBOW模型根据上下文单词的平均向量来预测中心单词 思想：如果两个词的上下文很相似，那么这两个词很相似 Skip-gram模型 根据一个中心单词来预测它周围的上下文单词 思想：如果两个词很相似，那么这两个词的上下文也会很相似","head":[["meta",{"property":"og:url","content":"https://liz-in-tech.github.io/pinkpig/llm/03_llm_training/08_word_embedding.html"}],["meta",{"property":"og:site_name","content":"Liz"}],["meta",{"property":"og:title","content":"Word Embedding（“词嵌入”，分布式词向量，稠密向量的非零表征，隐含语义的特征表示）"}],["meta",{"property":"og:description","content":"Word Embedding（“词嵌入”，分布式词向量，稠密向量的非零表征，隐含语义的特征表示） what 词转为对应的向量，用于在后续任务中提取语义特征 词向量表即词和向量一一对应的字典 how 独热编码（One-hot向量，One-hot编码，One-Hot Representation，基于词典空间的稀疏词向量表示） 举例：假如词典中共有10000个词，则这个one-hot向量长度就是10000，该词在词典中所处位置对应的值为1，其他值为0 优点：简单 缺点 向量维度非常大，且每个向量是稀疏的 不同词的one-hot编码向量是正交的，在向量空间中无法表示近似关系，即使两个含义相近的词，它们的词向量点积也为0 Embedding (词嵌入，词向量) 主要方法包括 Word2Vec、GloVe 和 FastText 用维度有限的稠密的向量来表示所有的词汇，传统的Transformer中，词嵌入有512维；BERT中，词嵌入有768维和1024维两个版本。 one-hot与embedding的关系 词向量就是one hot的全连接层的权重矩阵参数 例如，对于一个有30000个词汇量的词典V，每一个词都是30000维的一个稀疏向量。对于每一个词，我们给他乘一个30000*512的权重矩阵，最终就得到一个512维的向量了 词向量算法代表：word2vec word2vec是一个具有代表性的词嵌入学习模型，它构建了一个简化的浅层神经网络来学习词表示 两种训练方式/两种模型 连续词袋模型 CBOW （Continuous Bag of Words） CBOW模型根据上下文单词的平均向量来预测中心单词 思想：如果两个词的上下文很相似，那么这两个词很相似 Skip-gram模型 根据一个中心单词来预测它周围的上下文单词 思想：如果两个词很相似，那么这两个词的上下文也会很相似"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-04-23T13:53:11.000Z"}],["meta",{"property":"article:author","content":"Liz"}],["meta",{"property":"article:modified_time","content":"2025-04-23T13:53:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Word Embedding（“词嵌入”，分布式词向量，稠密向量的非零表征，隐含语义的特征表示）\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-23T13:53:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Liz\\",\\"url\\":\\"https://github.com/liz-in-tech\\"}]}"]]},"headers":[],"git":{"createdTime":1745416391000,"updatedTime":1745416391000,"contributors":[{"name":"liz","email":"liz@MacBook-Pro-6.local","commits":1}]},"readingTime":{"minutes":1.76,"words":528},"filePathRelative":"llm/03_llm_training/08_word_embedding.md","localizedDate":"April 23, 2025","excerpt":"<h1> Word Embedding（“词嵌入”，分布式词向量，稠密向量的非零表征，隐含语义的特征表示）</h1>\\n<ul>\\n<li>what\\n<ul>\\n<li>词转为对应的向量，用于在后续任务中提取语义特征</li>\\n<li>词向量表即词和向量一一对应的字典</li>\\n</ul>\\n</li>\\n<li>how\\n<ul>\\n<li>独热编码（One-hot向量，One-hot编码，One-Hot Representation，基于词典空间的稀疏词向量表示）\\n<ul>\\n<li>举例：假如词典中共有10000个词，则这个one-hot向量长度就是10000，该词在词典中所处位置对应的值为1，其他值为0</li>\\n<li>优点：简单</li>\\n<li>缺点\\n<ul>\\n<li>向量维度非常大，且每个向量是稀疏的</li>\\n<li>不同词的one-hot编码向量是正交的，在向量空间中无法表示近似关系，即使两个含义相近的词，它们的词向量点积也为0</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>Embedding (词嵌入，词向量)\\n<ul>\\n<li>主要方法包括 Word2Vec、GloVe 和 FastText</li>\\n<li>用维度有限的稠密的向量来表示所有的词汇，传统的Transformer中，词嵌入有512维；BERT中，词嵌入有768维和1024维两个版本。</li>\\n<li>one-hot与embedding的关系\\n<ul>\\n<li>词向量就是one hot的全连接层的权重矩阵参数</li>\\n<li>例如，对于一个有30000个词汇量的词典V，每一个词都是30000维的一个稀疏向量。对于每一个词，我们给他乘一个30000*512的权重矩阵，最终就得到一个512维的向量了</li>\\n</ul>\\n</li>\\n<li>词向量算法代表：word2vec\\n<ul>\\n<li>word2vec是一个具有代表性的词嵌入学习模型，它构建了一个简化的浅层神经网络来学习词表示</li>\\n<li>两种训练方式/两种模型\\n<ul>\\n<li>连续词袋模型 CBOW （Continuous Bag of Words）\\n<ul>\\n<li>CBOW模型根据上下文单词的平均向量来预测中心单词</li>\\n<li>思想：如果两个词的上下文很相似，那么这两个词很相似</li>\\n</ul>\\n</li>\\n<li>Skip-gram模型\\n<ul>\\n<li>根据一个中心单词来预测它周围的上下文单词</li>\\n<li>思想：如果两个词很相似，那么这两个词的上下文也会很相似</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{e as data};
