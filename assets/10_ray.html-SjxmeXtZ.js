import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as l,c as a,e}from"./app-5kh03Iqc.js";const r="/pinkpig/assets/ray-do5sm7b2.png",t={},o=e('<h1 id="ray-分布式计算框架" tabindex="-1"><a class="header-anchor" href="#ray-分布式计算框架" aria-hidden="true">#</a> Ray 分布式计算框架</h1><ul><li>Github: https://github.com/ray-project/ray</li><li>官方文档：https://docs.ray.io/en/latest/index.html</li><li>Paper：https://arxiv.org/abs/1712.09381</li></ul><p>ray概念：https://segmentfault.com/a/1190000046195156</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="分布式计算概念" tabindex="-1"><a class="header-anchor" href="#分布式计算概念" aria-hidden="true">#</a> 分布式计算概念</h2><ul><li>全局进程编号 rank <ul><li>全局进程号且全局唯一，从0开始，如果一个GPU上分配一个进程的话，rank0指0卡上的进程</li></ul></li><li>局部进程编号 local_rank <ul><li>在单个node上进程的相对序号,从0开始,local_rank在node之间相互独立,全局不唯一，node里唯一</li></ul></li><li>node: 节点(容器/物理节点)，一个node上通常有多个GPU <ul><li>节点编号 node_rank: 标识第几台node</li><li>nnodes: 节点数量</li><li>nproc_per_node: 每个节点上的进程数</li><li>ngprus_per_node: 每个节点上可用的GPU卡数</li></ul></li><li>全局总进程数 world_size <ul><li>全局进程总个数，即在一个分布式任务中rank的数量</li></ul></li><li>Group: 进程组，一个分布式任务对应了一个进程组。只有用户需要创立多个进程组时才会用到group来管理，默认情况下只有一个group</li><li>主节点 master (master_ip+master_port) <ul><li>主节点负责协调所有其他节点和进程的工作</li><li>主节点还负责监控系统状态、处理任务分配和结果汇总等任务，因此是整个系统的关键部分</li><li>为了确定主节点，我们需要知道它的IP地址和端口号</li></ul></li></ul>',6),n=[o];function s(d,c){return l(),a("div",null,n)}const p=i(t,[["render",s],["__file","10_ray.html.vue"]]);export{p as default};
