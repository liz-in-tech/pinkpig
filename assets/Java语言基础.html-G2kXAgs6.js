import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o,c,a as n,b as s,d as l,e as a}from"./app-CV1ZlhnZ.js";const i="/pinkpig/assets/Java语言基础-1-2h1xFydn.png",u="/pinkpig/assets/Java语言基础-2-K8TkTZ_D.png",r="/pinkpig/assets/Java语言基础-3-hG0PCvUm.png",k="/pinkpig/assets/Java语言基础-4-e56_EYpD.png",d="/pinkpig/assets/Java语言基础-5-SYLRvPLS.png",v="/pinkpig/assets/Java语言基础-6-pcqR52b0.png",m="/pinkpig/assets/Java语言基础-8-mB-jTF-J.png",b="/pinkpig/assets/Java语言基础-10-BynpmlCS.png",g={},h=a(`<h1 id="java语言基础" tabindex="-1"><a class="header-anchor" href="#java语言基础" aria-hidden="true">#</a> Java语言基础</h1><p>&quot;对语言的熟悉程度&quot; <br></p><ul><li><a href="#java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80">Java语言基础</a><ul><li><a href="#%E5%AF%BC%E5%8C%85%E6%B1%87%E6%80%BB">导包汇总</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E5%8C%85%E8%A3%85%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">基本/包装数据类型</a></li><li><a href="#%E7%BB%A7%E6%89%BF">继承</a></li><li><a href="#%E5%A4%9A%E6%80%81-%E7%88%B6%E7%B1%BB%E5%BC%95%E7%94%A8%E6%8C%87%E5%90%91%E5%AD%90%E7%B1%BB%E5%AF%B9%E8%B1%A1">多态-父类引用指向子类对象</a></li><li><a href="#%E6%8E%A5%E5%8F%A3">接口</a></li><li><a href="#%E6%B3%9B%E5%9E%8B-%E7%B1%BB%E5%9E%8B%E5%8F%82%E6%95%B0%E5%8C%96">泛型-类型参数化</a></li><li><a href="#lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F--%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%8C%96">lambda表达式- 函数参数化</a></li><li><a href="#io">IO</a><ul><li><a href="#%E8%BE%93%E5%87%BA">输出</a></li><li><a href="#%E8%BE%93%E5%85%A5">输入</a></li></ul></li><li><a href="#biginteger">BigInteger</a></li><li><a href="#character">Character*</a></li><li><a href="#string">String*</a></li><li><a href="#stringbuilder">StringBuilder*</a></li><li><a href="#sort">sort</a></li><li><a href="#arrays">Arrays</a></li><li><a href="#collections-%E9%80%9A%E7%94%A8">Collections 通用*</a></li><li><a href="#list">List*</a></li><li><a href="#queuestackpirorityqueue%E5%A0%86%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97">Queue&amp;Stack*&amp;PirorityQueue（堆==优先队列）</a></li><li><a href="#map">Map</a></li><li><a href="#set">Set</a></li><li><a href="#objects">Objects</a></li></ul></li><li><a href="#%E7%BD%91%E6%98%93%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93">网易语法总结</a></li><li><a href="#%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83">编码规范</a></li></ul></li></ul><h2 id="导包汇总" tabindex="-1"><a class="header-anchor" href="#导包汇总" aria-hidden="true">#</a> 导包汇总</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span> <span class="token comment">// 可以用普通IO和所有数组、集合以及工具类 &lt;br/&gt;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span> <span class="token comment">// 需要BigInteger导入此，一般算术运算无须此，例如Math.sqrt(n)，是在java.lang.math包里 &lt;br/&gt;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token comment">//需要快速IO导入此 &lt;br/&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基本-包装数据类型" tabindex="-1"><a class="header-anchor" href="#基本-包装数据类型" aria-hidden="true">#</a> 基本/包装数据类型</h3><p><img src="`+i+'" alt="image.png" loading="lazy"> <br></p><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h3><p>除了构造方法，子类<strong>继承</strong>父类的所有成员变量和成员方法，但子类<strong>使用</strong>父类的变量或方法需要看父类的访问权限，如下图。 <br><img src="'+u+'" alt="image.png" loading="lazy"> <br></p><h3 id="多态-父类引用指向子类对象" tabindex="-1"><a class="header-anchor" href="#多态-父类引用指向子类对象" aria-hidden="true">#</a> 多态-父类引用指向子类对象</h3><p>父类/接口 = 子类/实现类 <br></p><h3 id="接口" tabindex="-1"><a class="header-anchor" href="#接口" aria-hidden="true">#</a> 接口</h3><p>除非实现接口的类是抽象类，否则该类要实现接口内的所有方法。 <br></p><h3 id="泛型-类型参数化" tabindex="-1"><a class="header-anchor" href="#泛型-类型参数化" aria-hidden="true">#</a> 泛型-类型参数化</h3><p><strong>定义时</strong>不设具体类型 <br><strong>使用时</strong>指定具体类型 <br> 泛型本质是类型参数化，即所操作的数据类型被指定为一个参数。 <br></p><h3 id="lambda表达式-函数参数化" tabindex="-1"><a class="header-anchor" href="#lambda表达式-函数参数化" aria-hidden="true">#</a> lambda表达式- 函数参数化</h3><p>lambda表达式又称闭包 <br><img src="'+r+'" alt="image.png" loading="lazy"> <br> 函数式接口是只包含一个抽象方法的接口，这个可以用lambda表达式进行实现。 <br><img src="'+k+`" alt="image.png" loading="lazy"> <br></p><h3 id="io" tabindex="-1"><a class="header-anchor" href="#io" aria-hidden="true">#</a> IO</h3><h4 id="输出" tabindex="-1"><a class="header-anchor" href="#输出" aria-hidden="true">#</a> 输出</h4><p>非格式化输出 <br><strong>println</strong> <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>格式化输出 <br><strong>printf</strong> <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;总价：%.2f,折扣：%.2f，满减：%.2f\\n&quot;</span><span class="token punctuation">,</span>total<span class="token punctuation">,</span>discount<span class="token punctuation">,</span>mj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="输入" tabindex="-1"><a class="header-anchor" href="#输入" aria-hidden="true">#</a> 输入</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 非快速IO &lt;br/&gt;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token keyword">int</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token class-name">String</span> in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token keyword">boolean</span> in<span class="token punctuation">.</span><span class="token function">hasNextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token keyword">boolean</span> in<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 快速IO &lt;br/&gt;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token class-name">BufferedReader</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token class-name">BufferedWriter</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token keyword">int</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token class-name">String</span> in<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token comment">// 关闭 &lt;br/&gt;</span>
in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="biginteger" tabindex="-1"><a class="header-anchor" href="#biginteger" aria-hidden="true">#</a> BigInteger</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token class-name">BigInteger</span> bi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token class-name">BigInteger</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">&quot;12345678910&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将字符串以十进制的形式创建 BigInteger 对象 &lt;br/&gt;</span>
<span class="token class-name">BigInteger</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">&quot;1E&quot;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将字符串以指定进制的形式创建 BigInteger 对象 &lt;br/&gt;</span>

<span class="token class-name">BigInteger</span> bi<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token class-name">BigInteger</span> bi<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token class-name">BigInteger</span> bi<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token class-name">BigInteger</span> bi<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token class-name">BigInteger</span> bi<span class="token punctuation">.</span><span class="token function">remainder</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token class-name">BigInteger</span> bi<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 绝对值 &lt;br/&gt;</span>
<span class="token class-name">BigInteger</span> bi<span class="token punctuation">.</span><span class="token function">negate</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相反数 &lt;br/&gt;</span>
<span class="token class-name">BigInteger</span> bi<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 幂 &lt;br/&gt;</span>
<span class="token class-name">BigInteger</span> bi<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token class-name">BigInteger</span> bi<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token class-name">BigInteger</span> bi<span class="token punctuation">.</span><span class="token function">gcd</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 两数绝对值的最大公约数 &lt;br/&gt;</span>
<span class="token class-name">BigInteger</span> bi<span class="token punctuation">.</span><span class="token function">nextProbablePrime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 比bi大的第一个素数  &lt;br/&gt;</span>

<span class="token keyword">boolean</span> bi<span class="token punctuation">.</span><span class="token function">isProbablePrime</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否是素数  //写死参数值取1即可，想要精度大一点，可取值&gt;1   // 基于米勒罗宾判定该数是否是素数，参数越大准确性越高，复杂度越高。 &lt;br/&gt;</span>
<span class="token keyword">boolean</span> bi<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token keyword">long</span> bi<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token class-name">String</span> bi<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token class-name">String</span> bi<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">int</span> radix<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  raidx 进制字符串表示形式 &lt;br/&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+d+'" alt="image.png" loading="lazy"><img src="'+v+`" alt="image.png" loading="lazy"> <br></p><h3 id="character" tabindex="-1"><a class="header-anchor" href="#character" aria-hidden="true">#</a> Character*</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Character.isDigit<span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
Character.isLetter<span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
Character.isLetterOrDigit<span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
Character.isLowerCase<span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
Character.isUpperCase<span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String*</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// String和StringBuilder通用
s.length<span class="token punctuation">(</span><span class="token punctuation">)</span>
s.substring<span class="token punctuation">(</span>start<span class="token punctuation">)</span>
s.substring<span class="token punctuation">(</span>start,end<span class="token punctuation">)</span>
s.charAt<span class="token punctuation">(</span>index<span class="token punctuation">)</span>
s.indexOf<span class="token punctuation">(</span>str<span class="token punctuation">)</span>
s.indexOf<span class="token punctuation">(</span>str,fromIndex<span class="token punctuation">)</span>
s.lastIndexOf<span class="token punctuation">(</span>str<span class="token punctuation">)</span> 
s.lastIndexOf<span class="token punctuation">(</span>str,fromIndex<span class="token punctuation">)</span> 

// 特有的
s.toCharArray<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s.split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 特殊字符要用2个反斜杠转义,如<span class="token string">&quot;<span class="token entity" title="\\\\">\\\\</span>|&quot;</span>
s.toLowerCase<span class="token punctuation">(</span><span class="token punctuation">)</span>
s.toUpperCase<span class="token punctuation">(</span><span class="token punctuation">)</span>
s.trim<span class="token punctuation">(</span><span class="token punctuation">)</span>
startsWith<span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span> //注意start后有s
endsWith<span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span> //注意end后有s
contains<span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span>
boolean matches<span class="token punctuation">(</span>String regix<span class="token punctuation">)</span><span class="token punctuation">;</span> // 正则匹配
//注意区分
replaceAll<span class="token punctuation">(</span>oldStr,newStr<span class="token punctuation">)</span>
replaceFirst<span class="token punctuation">(</span>oldStr,newStr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stringbuilder" tabindex="-1"><a class="header-anchor" href="#stringbuilder" aria-hidden="true">#</a> StringBuilder*</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// 构造函数
StringBuilder sb <span class="token operator">=</span> new StringBuilder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
StringBuilder sb <span class="token operator">=</span> new StringBuilder<span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

// String和StringBuilder通用
sb.length<span class="token punctuation">(</span><span class="token punctuation">)</span>
sb.substring<span class="token punctuation">(</span>start<span class="token punctuation">)</span>
sb.substring<span class="token punctuation">(</span>start,end<span class="token punctuation">)</span>
sb.charAt<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> 
sb.indexOf<span class="token punctuation">(</span>str<span class="token punctuation">)</span>
sb.indexOf<span class="token punctuation">(</span>str,fromIndex<span class="token punctuation">)</span>
sb.lastIndexOf<span class="token punctuation">(</span>str<span class="token punctuation">)</span>
sb.lastIndexOf<span class="token punctuation">(</span>str,fromIndex<span class="token punctuation">)</span>  

// 特有的，增，删，改，反转
sb.reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb.append<span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
s.insert<span class="token punctuation">(</span>index,<span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s.delete<span class="token punctuation">(</span>fromIndex, endIndex<span class="token punctuation">)</span>
//注意区分
sb.replace<span class="token punctuation">(</span>fromIndex,endIndex,<span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sort" tabindex="-1"><a class="header-anchor" href="#sort" aria-hidden="true">#</a> sort</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// int compare(T o1, T o2) “比较o1和o2的大小”。
升序：当o1&lt;o2时return -1， o1=o2时return 0， o1 &gt; o2时return 1。
降序：当o1&lt;o2时return 1， o1=o2时return 0， o1 &gt; o2时return -1。

// 默认是升序
Arrays.sort(arr); 等价于 Arrays.sort(arr,(a,b)-&gt;(a&lt;b?-1:1));
Collections.sort(list);


// 降序
Collections.sort(list,(o1,o2)-&gt;(o1.getValue() &lt; o2.getValue()?1:-1));
// Arrays.sort(arr,(a,b)-&gt;b-a); // 最好不要用减法，而要用比较符，避免减法结果越界
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arrays" tabindex="-1"><a class="header-anchor" href="#arrays" aria-hidden="true">#</a> Arrays</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token comment">// 新建 &lt;br/&gt;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token comment">// 长度 &lt;br/&gt;</span>
a<span class="token punctuation">.</span>length <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token comment">// 数组转字符串 &lt;br/&gt;</span>
<span class="token comment">// [1, 3, 9, 27, 81, 243, 729] &lt;br/&gt;</span>
<span class="token comment">// 转换好的左右有[],每个元素后有,和空格 &lt;br/&gt;</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 快速打印 int[] &lt;br/&gt;</span>

<span class="token comment">// int[] 转 List &lt;br/&gt;</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token comment">// 二分查找 &lt;br/&gt;</span>
<span class="token comment">// 前提是数组必须有序 &lt;br/&gt;</span>
<span class="token comment">// 存在则返回下标，不存在返回负数 &lt;br/&gt;</span>
<span class="token keyword">int</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token keyword">int</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> firstIdx<span class="token punctuation">,</span> lastIdx<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token comment">// 填充 &lt;br/&gt;</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>fromIndex<span class="token punctuation">,</span>endIndex<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="collections-通用" tabindex="-1"><a class="header-anchor" href="#collections-通用" aria-hidden="true">#</a> Collections 通用*</h3><p><img src="`+m+`" alt="" loading="lazy"> <br> Java 中的 Collection 元素类型定义时必须为对象，不能为基本数据类型。 <br></p><p>注意 java.util.Collections 是个工具类，而java.util.Collection是个接口 <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span> 

<span class="token comment">// Collection 通用 </span>
<span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> 
<span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> 
<span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// Collections工具 </span>
<span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 反转</span>
<span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 二分查找List</span>
<span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 交换 </span>
<span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 随机洗牌</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="list" tabindex="-1"><a class="header-anchor" href="#list" aria-hidden="true">#</a> List*</h3><p>ArrayList是动态扩容的数组 <br> LinkedList是双向链表 <br></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">import</span> java.util.*<span class="token punctuation">;</span> 

// 创建list 
//前面List加泛型，后面LinkedList，ArrayList不加泛型 
List<span class="token operator">&lt;</span>Long<span class="token operator">&gt;</span> list <span class="token operator">=</span> new LinkedList<span class="token operator">&lt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
List<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> list <span class="token operator">=</span> new ArrayList<span class="token operator">&lt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

// 增 
add<span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> // 在末尾添加元素 
void add<span class="token punctuation">(</span>int index,Object o<span class="token punctuation">)</span> // 在指定位置添加元素 
// 删 
Object remove<span class="token punctuation">(</span>int index<span class="token punctuation">)</span> // 删除指定位置元素并返回 
// 改 
Object set<span class="token punctuation">(</span>int index, Object o<span class="token punctuation">)</span> // 修改指定位置的值并返回旧值 
// 查 
int indexOf<span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> // 返回某元素第一次出现的索引 
Object get<span class="token punctuation">(</span>int index<span class="token punctuation">)</span> // 获取指定位置的元素 

// LinkedList特有 
addFirst<span class="token punctuation">(</span><span class="token punctuation">)</span>
addLast<span class="token punctuation">(</span><span class="token punctuation">)</span>
removeFirst<span class="token punctuation">(</span><span class="token punctuation">)</span>
removeLast<span class="token punctuation">(</span><span class="token punctuation">)</span>
getFirst<span class="token punctuation">(</span><span class="token punctuation">)</span>
getLast<span class="token punctuation">(</span><span class="token punctuation">)</span>


// 迭代器遍历与迭代器删除元素（不要在 for/foreach 遍历 List 的过程中删除其中的元素，否则会抛出并发修改异常。 可以用迭代器来删除元素）    
Iterator<span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span> iterator <span class="token operator">=</span> students.iterator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">while</span> <span class="token punctuation">(</span>iterator.hasNext<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>   
    Student student <span class="token operator">=</span> iterator.next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>iterator.getId<span class="token punctuation">(</span><span class="token punctuation">)</span> % <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> 
        iterator.remove<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//这里要使用Iterator的remove方法移除当前对象，如果使用List的remove方法，则同样会出现ConcurrentModificationException
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="queue-stack-pirorityqueue-堆-优先队列" tabindex="-1"><a class="header-anchor" href="#queue-stack-pirorityqueue-堆-优先队列" aria-hidden="true">#</a> Queue&amp;Stack*&amp;PirorityQueue（堆==优先队列）</h3><p>Deque是 Java 中的双端队列，我们通常用其进行队列的操作以及栈的操作。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">import</span> java.util.*<span class="token punctuation">;</span> 

// 创建Queue<span class="token operator">&amp;</span>Stack
Deque<span class="token operator">&lt;</span>Integer<span class="token operator">&gt;</span> stack/queue <span class="token operator">=</span> new ArrayDeque<span class="token operator">&lt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment"># 力扣官方题解采用，底层是数组</span>
Deque<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> stack/queue <span class="token operator">=</span> new LinkedList<span class="token operator">&lt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment"># 力扣官方题解采用，底层是双向链表</span>
<span class="token comment"># 不要用Stack&lt;Integer&gt; s = new Stack();了。底层是vector，vector底层是动态数组，线程安全的，效率低</span>


// 创建PriorityQueue - 堆（优先队列） 优先队列的入队出队，时间复杂度为O<span class="token punctuation">(</span>logn<span class="token punctuation">)</span>
PriorityQueue<span class="token operator">&lt;</span>Integer<span class="token operator">&gt;</span> queue <span class="token operator">=</span> new PriorityQueue<span class="token operator">&lt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //默认是小根堆
PriorityQueue<span class="token operator">&lt;</span>Integer<span class="token operator">&gt;</span> queue <span class="token operator">=</span> new PriorityQueue<span class="token operator">&lt;&gt;</span><span class="token punctuation">((</span>a,b<span class="token punctuation">)</span>-<span class="token operator">&gt;</span>b-a<span class="token punctuation">)</span><span class="token punctuation">;</span> // 大根堆

// stack API <span class="token punctuation">(</span>只对队尾元素进行操作<span class="token punctuation">)</span>
stack.push<span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span> 
stack.pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
stack.peek<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

// queue<span class="token operator">&amp;</span>priorityQueue API （在队尾添加，在队头查看和删除）
queue.offer<span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span> 
queue.poll<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
queue.peek<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

// deque 特有API <span class="token punctuation">(</span>Note:priorityQueue没有这些API<span class="token punctuation">)</span>
deque.offerFirst<span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>
deque.offerLast<span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>
deque.pollFirst<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
deque.pollLast<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
deque.peekFirst<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
deque.peekLast<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> Map</h3><p>HashMap 随机位置插入的 Map <br> LinkedHashMap 保持插入顺序或访问顺序的 Map <br> TreeMap 保持容器中元素有序的 Map，默认为升序 <br></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">import</span> java.util.*<span class="token punctuation">;</span>

Map<span class="token operator">&lt;</span>Character,Double<span class="token operator">&gt;</span> map <span class="token operator">=</span> new HashMap<span class="token operator">&lt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

map.containsKey<span class="token punctuation">(</span>k<span class="token punctuation">)</span>
map.containsValue<span class="token punctuation">(</span>v<span class="token punctuation">)</span>
map.put<span class="token punctuation">(</span>k,v<span class="token punctuation">)</span>
map.get<span class="token punctuation">(</span>k<span class="token punctuation">)</span>
map.remove<span class="token punctuation">(</span>k<span class="token punctuation">)</span>

// 遍历Map
// 遍历Map:需要key信息或map全部信息
<span class="token keyword">for</span> <span class="token punctuation">(</span>Integer key <span class="token builtin class-name">:</span> map1.keySet<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>
    System.out.println<span class="token punctuation">(</span>key + <span class="token string">&quot; &quot;</span> + map1.get<span class="token punctuation">(</span>key<span class="token punctuation">))</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
// 遍历Map:仅需要value信息
<span class="token keyword">for</span> <span class="token punctuation">(</span>Integer value <span class="token builtin class-name">:</span> map1.values<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>
    System.out.println<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

// 与Collection通用的
size<span class="token punctuation">(</span><span class="token punctuation">)</span>
isEmpty<span class="token punctuation">(</span><span class="token punctuation">)</span>
clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
 
// map 转 list <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
List<span class="token operator">&lt;</span>Map.Entry<span class="token operator">&lt;</span>Character,Double<span class="token operator">&gt;</span> <span class="token operator">&gt;</span> mapList <span class="token operator">=</span> new ArrayList<span class="token operator">&lt;&gt;</span><span class="token punctuation">(</span>map.entrySet<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> Set</h3><p>HashSet 随机位置插入的 Set <br> LinkedHashSet 保持插入顺序的 Set <br> TreeSet 保持容器中元素有序的 Set，默认为升序 <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token comment">// TreeSet有些特殊方法，所以引用也用TreeSet &lt;br/&gt;</span>
<span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 升序 &lt;br/&gt;</span>
<span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token keyword">return</span> y <span class="token operator">-</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 降序 &lt;br/&gt;</span>

s3<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 排序后的第一个元素 &lt;br/&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintWriter</span></span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedHashSet</span></span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token keyword">static</span> <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token keyword">static</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token keyword">static</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        s1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 判断 set 中是否有元素值为 2，有则返回 true，否则返回 false  &lt;br/&gt;</span>
        s1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// s1 与 s2 的并集  &lt;br/&gt;</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        res<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        res<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// s1 与 s2 的交集  &lt;br/&gt;</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        res<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        res<span class="token punctuation">.</span><span class="token function">retainAll</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 差集：s1 - s2  &lt;br/&gt;</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        res<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        res<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TreeSet特有方法 <br><img src="`+b+`" alt="image.png" loading="lazy"> <br> // 将List排序并去重 <br> new TreeSet&lt;&gt;(list); <br></p><h3 id="objects" tabindex="-1"><a class="header-anchor" href="#objects" aria-hidden="true">#</a> Objects</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token comment">// 判空 &lt;br/&gt;</span>
<span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="网易语法总结" tabindex="-1"><a class="header-anchor" href="#网易语法总结" aria-hidden="true">#</a> 网易语法总结</h2><p>1.数据库 <br> //获取Example的Criteria <br> TestExample.Criteria criteria = example.createCriteria(); <br> 等价于 <br> TestExample.Criteria criteria = example.or(); <br> 2.集合 <br></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//映射到不完全一一对应的实体 &lt;br/&gt;
List&lt;TestEntity&gt; list = mapper.selectByExample(example).stream().map(TestEntity::of).collect(Collectors.toList()); &lt;br/&gt;
//筛选过滤 &lt;br/&gt;
List&lt;TestEntity&gt; list = list.stream().filter(this::checkExist).collect(Collectors.toList()); &lt;br/&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,62),f=n("br",null,null,-1),y=n("br",null,null,-1),x=n("br",null,null,-1),w=n("br",null,null,-1),B=n("br",null,null,-1),S=n("br",null,null,-1),E=n("br",null,null,-1),I=n("br",null,null,-1),j={href:"https://blog.csdn.net/pzjtian/article/details/106910046?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163826295216780274154225%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163826295216780274154225&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-106910046.first_rank_v2_pc_rank_v29&utm_term=guava&spm=1018.2226.3001.4187",target:"_blank",rel:"noopener noreferrer"},q=n("br",null,null,-1),_=a(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;!-- guava--&gt; &lt;br/&gt;
&lt;dependency&gt; &lt;br/&gt;
    &lt;groupId&gt;com.google.guava&lt;/groupId&gt; &lt;br/&gt;
    &lt;artifactId&gt;guava&lt;/artifactId&gt; &lt;br/&gt;
&lt;/dependency&gt; &lt;br/&gt;
//新建list &lt;br/&gt;
List list = Lists.newArrayList(); &lt;br/&gt;
//新建set &lt;br/&gt;
Set set = Sets.newTreeSet(); &lt;br/&gt;
Set&lt;String&gt; set = Sets.newHashSet(Splitter.on(&quot;,&quot;).split(&quot;test1,test2,test3&quot;)); &lt;br/&gt;
Table &lt;br/&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>//通过rowKey获取columnKey-&gt;value的映射关系 <br> System.out.println(table.row(&quot;a1&quot;)); <br> //通过columnKey获取rowKey -&gt;value的映射关系 <br> System.out.println(table.column(&quot;c2&quot;)); <br> 5.时间 <br> long now = System.currentTimeMillis(); <br> 6.字符串比较（区分大小写和不区分大小写） <br><strong>compareTo()方法</strong> <br> int n1 = str1.compareTo(str2);//比较的是str1和str2的大小，返回两者之间的差值 <br><strong>compareToIgnoreCase方法</strong> <br> int n1 = str1.compareToIgnoreCase(str2);//按字典比较两个字符串，不区分大小写 <br></p><h2 id="编码规范" tabindex="-1"><a class="header-anchor" href="#编码规范" aria-hidden="true">#</a> 编码规范</h2><p>1、包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。 <br> 2、为达到望文知义，代码自解释，任何自定义编程元素在命名时，使用尽量完整的单词。 <br> 3、组合来表达其意，不要怕长。 <br></p>`,4);function A(L,C){const t=e("ExternalLinkIcon");return o(),c("div",null,[h,n("p",null,[s("//list转map "),f,s(" //若使Map的value 为对象本身，valueMapper写为 t->t 或Functions.identity() "),y,s(" list.stream().collect(Collectors.toMap(TestEntity::getName, Function.identity())); "),x,s(" 3.校验 "),w,s(" boolean bool = StringUtils.isBlank(str); "),B,s(" boolean bool = StringUtils.isNotBlank(str); "),S,s(" 4.guava（全局搜索总结一下） "),E,s(" Guava是谷歌提供的一个核心Java类库，其中包括新的集合类型、不可变集合、图库，以及用于并发、I/O、Hash、缓存、字符串等的实用工具。它在谷歌中的大多数Java项目中被广泛使用，也被许多其他公司广泛使用，熟练掌握这些工具类能帮助我们快速的处理日常开发中的一些问题，比如，不可变集合、集合的转换、字符串处理、本地缓存等。 "),I,n("a",j,[s("想学Google Guava看这篇就够了"),l(t)]),s(),q]),_])}const F=p(g,[["render",A],["__file","Java语言基础.html.vue"]]);export{F as default};
