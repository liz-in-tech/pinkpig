import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as p,c as l,d as c,a as n,b as a,e as t,f as s}from"./app-EbGAoSn5.js";const r="/pinkpig/assets/LangChain_Architecture_Diagram-WCASrFus.png",u={},d=s('<h1 id="一文带你了解langchain-使用大语言模型构建强大的应用程序" tabindex="-1"><a class="header-anchor" href="#一文带你了解langchain-使用大语言模型构建强大的应用程序" aria-hidden="true">#</a> 一文带你了解LangChain: 使用大语言模型构建强大的应用程序</h1><blockquote><p>从架构图入手，一步步带你了解LangChain的方方面面</p></blockquote><ul><li><ol><li>LangChain是什么</li></ol></li><li><ol start="2"><li>LangChain的架构图告诉了我们什么信息</li></ol></li><li><ol start="3"><li>你不得不知的一些核心模块</li></ol></li><li><ol start="4"><li>通过简单的示例代码感受下各模块的作用</li></ol></li></ul>',3),m=s('<h2 id="_1-langchain是什么" tabindex="-1"><a class="header-anchor" href="#_1-langchain是什么" aria-hidden="true">#</a> 1. LangChain是什么</h2><p>LangChain是一个用于快速构建LLM应用的开源框架。</p><p>它将一些使用LLM时的通用行为进行了抽象，封装为API，统一了使用方式，简化了开发流程。</p><h2 id="_2-langchain的架构图告诉了我们什么信息" tabindex="-1"><a class="header-anchor" href="#_2-langchain的架构图告诉了我们什么信息" aria-hidden="true">#</a> 2. LangChain的架构图告诉了我们什么信息</h2><p>LangChain的架构图如下：</p><figure><img src="'+r+'" alt="LangChain的架构图" tabindex="0" loading="lazy"><figcaption>LangChain的架构图</figcaption></figure><p>从架构图中, 我们可以获取什么信息呢？</p><h3 id="_2-1-langchain的生态" tabindex="-1"><a class="header-anchor" href="#_2-1-langchain的生态" aria-hidden="true">#</a> 2.1. LangChain的生态</h3><p>LangChain的生态除了LangChain本身，还包括LangServe和LangSmith。</p><ul><li>LangChain聚焦于开发</li><li>LangServe用于部署</li><li>LangSmith是作为可观测平台</li></ul><p>LangChain已发展成为开发、部署、管理一站式的平台。</p><h3 id="_2-2-langchain源码的开发语言" tabindex="-1"><a class="header-anchor" href="#_2-2-langchain源码的开发语言" aria-hidden="true">#</a> 2.2. LangChain源码的开发语言</h3><p>LangChain的源码有两种开发语言，分别是Python和JavaScript。</p>',13),h={href:"https://github.com/langchain-ai/langchain",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/langchain-ai/langchainjs",target:"_blank",rel:"noopener noreferrer"},k=s(`<p>Note：本文将以LangChain的Python源码进行讲解。</p><h3 id="_2-3-langchain源码的组织结构" tabindex="-1"><a class="header-anchor" href="#_2-3-langchain源码的组织结构" aria-hidden="true">#</a> 2.3. LangChain源码的组织结构</h3><p>LangChain源码的libs目录为主要的目录，其中包含三个主要的包，分别是LangChain包、LangChain-Community包和LangChain-Core包。</p><ul><li>Langchain-Core包：框架的基础</li><li>LangChain-Community包：集成组件/第三方组件</li><li>LangChain包：核心组件，Langchain-Core包和LangChain-Community包中的内容都会引入到此LangChain包里，由LangChain包作为入口，调用Langchain-Core包和LangChain-Community包的组件</li></ul><h2 id="_3-你不得不知的一些核心模块" tabindex="-1"><a class="header-anchor" href="#_3-你不得不知的一些核心模块" aria-hidden="true">#</a> 3. 你不得不知的一些核心模块</h2><h3 id="_3-1-model-i-o-模型交互模块" tabindex="-1"><a class="header-anchor" href="#_3-1-model-i-o-模型交互模块" aria-hidden="true">#</a> 3.1. Model I/O(模型交互模块)</h3><p>作用：与LLM进行交互的抽象，细分为Prompts模块、Language Model模块(LLM模块)和Output Parsers模块。</p><h4 id="_3-1-1-prompts" tabindex="-1"><a class="header-anchor" href="#_3-1-1-prompts" aria-hidden="true">#</a> 3.1.1. Prompts</h4><p>作用：使用Prompt模板作为LLM的输入。</p><h4 id="_3-1-2-language-model-llm" tabindex="-1"><a class="header-anchor" href="#_3-1-2-language-model-llm" aria-hidden="true">#</a> 3.1.2. Language Model(LLM)</h4><p>作用：语言模型的一个抽象，通过通用接口调用LLM。</p><h4 id="_3-1-3-output-parsers" tabindex="-1"><a class="header-anchor" href="#_3-1-3-output-parsers" aria-hidden="true">#</a> 3.1.3. Output Parsers</h4><p>作用：将LLM的输出结果进行解析，可以解析为不同格式。</p><h3 id="_3-2-chains-链-工作流模块" tabindex="-1"><a class="header-anchor" href="#_3-2-chains-链-工作流模块" aria-hidden="true">#</a> 3.2. Chains(链，工作流模块)</h3><p>作用：将多个组件组合在一起以创建一个单一连贯的任务，可以将多个Chain嵌套使用，或将Chain与其他组件组合来构建更复杂的Chain。</p><h3 id="_3-3-agents-代理模块" tabindex="-1"><a class="header-anchor" href="#_3-3-agents-代理模块" aria-hidden="true">#</a> 3.3. Agents(代理模块)</h3><p>作用：根据用户的输入, 由LLM进行规划与决策，可以将任务细分，也可以决定每一步的行为，集成了各类工具，动态的选择要不要使用工具以及使用什么工具。</p><p>核心概念：</p><ul><li><strong>Agent</strong>：Agent为一次决策，根据当前的情形，Agent会动态做出决策，决定是否直接答复还是调用工具，如果调用工具是选择哪个工具</li><li><strong>AgentExecutor</strong>：AgentExecutor本质是一个Chain，它是Agent的迭代器，会反复调Agent进行决策，直到达到规定上限或返回满意的结果为止</li></ul><p>可以把AgentExecutor视为一个智能体，Agent视为智能体的大脑，用户询问一个问题，AgentExecutor会进行一次或多次思考，即调用Agent进行决策，直到达到规定的上限或返回满意的结果为止。</p><h3 id="_3-4-retrieval-检索模块" tabindex="-1"><a class="header-anchor" href="#_3-4-retrieval-检索模块" aria-hidden="true">#</a> 3.4. Retrieval(检索模块)</h3><p>作用：集成数据源的抽象，包括数据加载、数据处理、数据向量化、数据存储以及数据检索等，使用户可以有自己的知识库。</p><h3 id="_3-5-callbacks-回调模块" tabindex="-1"><a class="header-anchor" href="#_3-5-callbacks-回调模块" aria-hidden="true">#</a> 3.5. Callbacks(回调模块)</h3><p>作用：在执行Chain的过程中，记录下一些执行的相关信息，一般用于记录日志、记录执行的中间步骤、记录用于计费的token使用量以及进行流速控制。</p><h3 id="_3-6-memory-记忆模块" tabindex="-1"><a class="header-anchor" href="#_3-6-memory-记忆模块" aria-hidden="true">#</a> 3.6. Memory(记忆模块)</h3><p>作用：记录历史对话，以便在之后的对话中补充历史上下文，使模型能够连续对话。</p><h2 id="_4-通过简单的示例代码感受下各模块的作用" tabindex="-1"><a class="header-anchor" href="#_4-通过简单的示例代码感受下各模块的作用" aria-hidden="true">#</a> 4. 通过简单的示例代码感受下各模块的作用</h2><p>Note：不必关注代码细节，只关注代码流程即可。</p><h3 id="_4-1-model-i-o模块与chains模块的应用-将prompt-llm和output-parser组合为一个chain" tabindex="-1"><a class="header-anchor" href="#_4-1-model-i-o模块与chains模块的应用-将prompt-llm和output-parser组合为一个chain" aria-hidden="true">#</a> 4.1. Model I/O模块与Chains模块的应用：将Prompt，LLM和Output Parser组合为一个Chain</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> langchain_core<span class="token punctuation">.</span>prompts <span class="token keyword">import</span> ChatPromptTemplate
<span class="token keyword">from</span> langchain_openai <span class="token keyword">import</span> ChatOpenAI
<span class="token keyword">from</span> langchain_core<span class="token punctuation">.</span>output_parsers <span class="token keyword">import</span> StrOutputParser

<span class="token comment"># 设置Prompt</span>
prompt <span class="token operator">=</span> ChatPromptTemplate<span class="token punctuation">.</span>from_messages<span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">(</span><span class="token string">&quot;system&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;You are world class technical documentation writer.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;{input}&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 设置LLM</span>
llm <span class="token operator">=</span> ChatOpenAI<span class="token punctuation">(</span>openai_api_key<span class="token operator">=</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 设置Output Parser</span>
output_parser <span class="token operator">=</span> StrOutputParser<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 将Prompt，LLM和Output Parser组合为一个Chain</span>
chain <span class="token operator">=</span> prompt <span class="token operator">|</span> llm <span class="token operator">|</span> output_parser

<span class="token comment"># Chain的调用</span>
chain<span class="token punctuation">.</span>invoke<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;how can langsmith help with testing?&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-retrieval模块的应用-建立知识库并检索相关信息作为prompt的一部分" tabindex="-1"><a class="header-anchor" href="#_4-2-retrieval模块的应用-建立知识库并检索相关信息作为prompt的一部分" aria-hidden="true">#</a> 4.2. Retrieval模块的应用：建立知识库并检索相关信息作为Prompt的一部分</h3><ul><li>本案例可以看到Chain的嵌套组合使用</li><li>Retrieval Chain将接收用户的输入，查找相关的文档， 然后将这些文档连同原始用户的输入组合为一个Prompt, 一起传递给大语言模型（LLM），并请它回答原始问题</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> langchain_community<span class="token punctuation">.</span>document_loaders <span class="token keyword">import</span> WebBaseLoader
<span class="token keyword">from</span> langchain_openai <span class="token keyword">import</span> OpenAIEmbeddings
<span class="token keyword">from</span> langchain_community<span class="token punctuation">.</span>vectorstores <span class="token keyword">import</span> FAISS
<span class="token keyword">from</span> langchain<span class="token punctuation">.</span>text_splitter <span class="token keyword">import</span> RecursiveCharacterTextSplitter
<span class="token keyword">from</span> langchain<span class="token punctuation">.</span>chains<span class="token punctuation">.</span>combine_documents <span class="token keyword">import</span> create_stuff_documents_chain
<span class="token keyword">from</span> langchain<span class="token punctuation">.</span>chains <span class="token keyword">import</span> create_retrieval_chain

<span class="token comment"># 数据加载器</span>
loader <span class="token operator">=</span> WebBaseLoader<span class="token punctuation">(</span><span class="token string">&quot;https://docs.smith.langchain.com/overview&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 加载数据</span>
docs <span class="token operator">=</span> loader<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 文档分割器</span>
text_splitter <span class="token operator">=</span> RecursiveCharacterTextSplitter<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 分割文档</span>
documents <span class="token operator">=</span> text_splitter<span class="token punctuation">.</span>split_documents<span class="token punctuation">(</span>docs<span class="token punctuation">)</span>

<span class="token comment"># 嵌入模型（向量化模型）</span>
embeddings <span class="token operator">=</span> OpenAIEmbeddings<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 将文档向量化并存储到向量数据库中</span>
vector <span class="token operator">=</span> FAISS<span class="token punctuation">.</span>from_documents<span class="token punctuation">(</span>documents<span class="token punctuation">,</span> embeddings<span class="token punctuation">)</span>

<span class="token comment"># 将向量数据库作为检索器</span>
retriever <span class="token operator">=</span> vector<span class="token punctuation">.</span>as_retriever<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 设置Prompt</span>
prompt <span class="token operator">=</span> ChatPromptTemplate<span class="token punctuation">.</span>from_template<span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;Answer the following question based only on the provided context:
&lt;context&gt;
{context}
&lt;/context&gt;
Question: {input}&quot;&quot;&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 将LLM与Prompt组合为一个Chain，其中llm为第一个案例的</span>
document_chain <span class="token operator">=</span> create_stuff_documents_chain<span class="token punctuation">(</span>llm<span class="token punctuation">,</span> prompt<span class="token punctuation">)</span>

<span class="token comment"># 将检索器和其他Chain组合为一个可以检索的Chain</span>
retrieval_chain <span class="token operator">=</span> create_retrieval_chain<span class="token punctuation">(</span>retriever<span class="token punctuation">,</span> document_chain<span class="token punctuation">)</span>

<span class="token comment"># 可检索的Chain的调用</span>
response <span class="token operator">=</span> retrieval_chain<span class="token punctuation">.</span>invoke<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;how can langsmith help with testing?&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># 输出结果</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">[</span><span class="token string">&quot;answer&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-agents模块的应用-将检索知识库的能力和搜索能力以及其他的能力作为一个个工具供agentexecutor使用-agentexecutor根据用户的问题-拆解为多个步骤-由agent决定每一步做什么" tabindex="-1"><a class="header-anchor" href="#_4-3-agents模块的应用-将检索知识库的能力和搜索能力以及其他的能力作为一个个工具供agentexecutor使用-agentexecutor根据用户的问题-拆解为多个步骤-由agent决定每一步做什么" aria-hidden="true">#</a> 4.3. Agents模块的应用：将检索知识库的能力和搜索能力以及其他的能力作为一个个工具供AgentExecutor使用，AgentExecutor根据用户的问题，拆解为多个步骤，由Agent决定每一步做什么</h3><ul><li>retriever可以作为一个工具</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> langchain<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>retriever <span class="token keyword">import</span> create_retriever_tool
<span class="token keyword">from</span> langchain_community<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>tavily_search <span class="token keyword">import</span> TavilySearchResults
<span class="token keyword">from</span> langchain<span class="token punctuation">.</span>agents <span class="token keyword">import</span> create_openai_functions_agent
<span class="token keyword">from</span> langchain<span class="token punctuation">.</span>agents <span class="token keyword">import</span> AgentExecutor
<span class="token keyword">from</span> langchain <span class="token keyword">import</span> hub

<span class="token comment"># 检索工具（检索向量数据库），其中retriever为第二个案例的</span>
retriever_tool <span class="token operator">=</span> create_retriever_tool<span class="token punctuation">(</span>
    retriever<span class="token punctuation">,</span>
    <span class="token string">&quot;langsmith_search&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;Search for information about LangSmith. For any questions about LangSmith, you must use this tool!&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment"># 搜索工具（浏览器搜索实时信息）</span>
search_tool <span class="token operator">=</span> TavilySearchResults<span class="token punctuation">(</span>tavily_api_key<span class="token operator">=</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 工具列表</span>
tools <span class="token operator">=</span> <span class="token punctuation">[</span>retriever_tool<span class="token punctuation">,</span> search_tool<span class="token punctuation">]</span>

<span class="token comment"># 获取langchain hub预定义的prompt</span>
prompt <span class="token operator">=</span> hub<span class="token punctuation">.</span>pull<span class="token punctuation">(</span><span class="token string">&quot;hwchase17/openai-functions-agent&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 设置Agent，其中llm为第一个案例的，其中tools用于告诉Agent有哪些工具可用以及每个工具是做什么的</span>
agent <span class="token operator">=</span> create_openai_functions_agent<span class="token punctuation">(</span>llm<span class="token punctuation">,</span> tools<span class="token punctuation">,</span> prompt<span class="token punctuation">)</span>

<span class="token comment"># 设置AgentExecutor，拆解任务为多个步骤，每一步由agent决策做什么</span>
agent_executor <span class="token operator">=</span> AgentExecutor<span class="token punctuation">(</span>agent<span class="token operator">=</span>agent<span class="token punctuation">,</span> tools<span class="token operator">=</span>tools<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token comment"># 询问langsmith</span>
agent_executor<span class="token punctuation">.</span>invoke<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;how can langsmith help with testing?&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># 询问天气</span>
agent_executor<span class="token punctuation">.</span>invoke<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;what is the weather in SF?&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36);function g(b,_){const e=o("ExternalLinkIcon");return p(),l("div",null,[d,c(" more "),m,n("ul",null,[n("li",null,[a("Python源码对应的Github仓库："),n("a",h,[a("https://github.com/langchain-ai/langchain"),t(e)])]),n("li",null,[a("JavaScript源码对应的Github仓库："),n("a",v,[a("https://github.com/langchain-ai/langchainjs"),t(e)])])]),k])}const f=i(u,[["render",g],["__file","langchain.html.vue"]]);export{f as default};
