const n=JSON.parse('{"key":"v-6f028910","path":"/cs/code/%E5%BF%AB%E9%80%9F%E6%81%A2%E5%A4%8D30%E9%A2%98%E6%80%9D%E8%B7%AF%E5%A4%A7%E7%BA%B2.html","title":"快速恢复30题思路大纲","lang":"en-US","frontmatter":{"icon":"lightbulb","description":"快速恢复30题思路大纲 92 反转链表 II (Done) # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -&gt; Optional[ListNode]: \\"\\"\\" h：哨兵节点 pre：上一段最后一个 begin为pre的下一个 end：反转段的最后一个 nxt为end的下一个 \\"\\"\\" def reverse_listnode(head): pre = None while head: nxt = head.next head.next = pre pre = head head = nxt return pre h = pre = ListNode(0, head) for _ in range(left-1): pre = pre.next begin = end = pre.next for _ in range(right-left): end = end.next nxt = end.next end.next = None pre.next = reverse_listnode(begin) begin.next = nxt return h.next","head":[["meta",{"property":"og:url","content":"https://liz-in-tech.github.io/pinkpig/cs/code/%E5%BF%AB%E9%80%9F%E6%81%A2%E5%A4%8D30%E9%A2%98%E6%80%9D%E8%B7%AF%E5%A4%A7%E7%BA%B2.html"}],["meta",{"property":"og:site_name","content":"Liz"}],["meta",{"property":"og:title","content":"快速恢复30题思路大纲"}],["meta",{"property":"og:description","content":"快速恢复30题思路大纲 92 反转链表 II (Done) # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -&gt; Optional[ListNode]: \\"\\"\\" h：哨兵节点 pre：上一段最后一个 begin为pre的下一个 end：反转段的最后一个 nxt为end的下一个 \\"\\"\\" def reverse_listnode(head): pre = None while head: nxt = head.next head.next = pre pre = head head = nxt return pre h = pre = ListNode(0, head) for _ in range(left-1): pre = pre.next begin = end = pre.next for _ in range(right-left): end = end.next nxt = end.next end.next = None pre.next = reverse_listnode(begin) begin.next = nxt return h.next"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-04-28T12:04:56.000Z"}],["meta",{"property":"article:author","content":"Liz"}],["meta",{"property":"article:modified_time","content":"2025-04-28T12:04:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"快速恢复30题思路大纲\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-28T12:04:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Liz\\",\\"url\\":\\"https://github.com/liz-in-tech\\"}]}"]]},"headers":[{"level":2,"title":"92 反转链表 II (Done)","slug":"_92-反转链表-ii-done","link":"#_92-反转链表-ii-done","children":[]},{"level":2,"title":"25 K个一组翻转链表 (Done)","slug":"_25-k个一组翻转链表-done","link":"#_25-k个一组翻转链表-done","children":[]},{"level":2,"title":"142 环形链表 II (Done)","slug":"_142-环形链表-ii-done","link":"#_142-环形链表-ii-done","children":[]},{"level":2,"title":"143 重排链表 (Done)","slug":"_143-重排链表-done","link":"#_143-重排链表-done","children":[]},{"level":2,"title":"70 爬楼梯 (方法一：动态规划，方法二：记忆递归) (Done)","slug":"_70-爬楼梯-方法一-动态规划-方法二-记忆递归-done","link":"#_70-爬楼梯-方法一-动态规划-方法二-记忆递归-done","children":[]},{"level":2,"title":"1143 最长公共子序列 (Done)","slug":"_1143-最长公共子序列-done","link":"#_1143-最长公共子序列-done","children":[]},{"level":2,"title":"64 最小路径和 (Done)","slug":"_64-最小路径和-done","link":"#_64-最小路径和-done","children":[]},{"level":2,"title":"5 最长回文子串 (Done)","slug":"_5-最长回文子串-done","link":"#_5-最长回文子串-done","children":[]},{"level":2,"title":"300 最长上升子序列 (方法一：动态规划，方法二：单调栈) (Done)","slug":"_300-最长上升子序列-方法一-动态规划-方法二-单调栈-done","link":"#_300-最长上升子序列-方法一-动态规划-方法二-单调栈-done","children":[]},{"level":2,"title":"102 二叉树的层次遍历 (Done)","slug":"_102-二叉树的层次遍历-done","link":"#_102-二叉树的层次遍历-done","children":[]},{"level":2,"title":"103 二叉树的锯齿形层序遍历 (Done)","slug":"_103-二叉树的锯齿形层序遍历-done","link":"#_103-二叉树的锯齿形层序遍历-done","children":[]},{"level":2,"title":"236 二叉树的最近公共祖先 (Done)","slug":"_236-二叉树的最近公共祖先-done","link":"#_236-二叉树的最近公共祖先-done","children":[]},{"level":2,"title":"46 全排列 (Done)","slug":"_46-全排列-done","link":"#_46-全排列-done","children":[]},{"level":2,"title":"51 N皇后 (Done)","slug":"_51-n皇后-done","link":"#_51-n皇后-done","children":[]},{"level":2,"title":"200 岛屿数量（方法一：DFS，方法二：BFS） (Done)","slug":"_200-岛屿数量-方法一-dfs-方法二-bfs-done","link":"#_200-岛屿数量-方法一-dfs-方法二-bfs-done","children":[]},{"level":2,"title":"1926 迷宫中离入口最近的出口 (Done)","slug":"_1926-迷宫中离入口最近的出口-done","link":"#_1926-迷宫中离入口最近的出口-done","children":[]},{"level":2,"title":"210 课程表 II (Done)","slug":"_210-课程表-ii-done","link":"#_210-课程表-ii-done","children":[]},{"level":2,"title":"127 单词接龙 (方法一：邻接表+单向BFS，方法二：邻接表+双向BFS) (Done)","slug":"_127-单词接龙-方法一-邻接表-单向bfs-方法二-邻接表-双向bfs-done","link":"#_127-单词接龙-方法一-邻接表-单向bfs-方法二-邻接表-双向bfs-done","children":[]},{"level":2,"title":"多层迷宫 (Done)","slug":"多层迷宫-done","link":"#多层迷宫-done","children":[]},{"level":2,"title":"239 滑动窗口最大值（方法一：单调队列，方法二：优先队列/堆）(Done)","slug":"_239-滑动窗口最大值-方法一-单调队列-方法二-优先队列-堆-done","link":"#_239-滑动窗口最大值-方法一-单调队列-方法二-优先队列-堆-done","children":[]},{"level":2,"title":"739 每日温度 (方法：单调栈) (Done)","slug":"_739-每日温度-方法-单调栈-done","link":"#_739-每日温度-方法-单调栈-done","children":[]},{"level":2,"title":"155 最小栈 (Done)","slug":"_155-最小栈-done","link":"#_155-最小栈-done","children":[]},{"level":2,"title":"224 基本计算器（方法：计算器=多位数+加减+乘除+括号）(Done)","slug":"_224-基本计算器-方法-计算器-多位数-加减-乘除-括号-done","link":"#_224-基本计算器-方法-计算器-多位数-加减-乘除-括号-done","children":[]},{"level":2,"title":"1 两数之和（方法一：哈希表，方法二：双重for循环） (Done)","slug":"_1-两数之和-方法一-哈希表-方法二-双重for循环-done","link":"#_1-两数之和-方法一-哈希表-方法二-双重for循环-done","children":[]},{"level":2,"title":"3 无重复字符的最长子串（方法：滑动窗口+set）(Done)","slug":"_3-无重复字符的最长子串-方法-滑动窗口-set-done","link":"#_3-无重复字符的最长子串-方法-滑动窗口-set-done","children":[]},{"level":2,"title":"146 LRU 缓存 (方法一：双向链表+哈希表，方法二：OrderedDict) (Done)","slug":"_146-lru-缓存-方法一-双向链表-哈希表-方法二-ordereddict-done","link":"#_146-lru-缓存-方法一-双向链表-哈希表-方法二-ordereddict-done","children":[]},{"level":2,"title":"381 O(1) 时间插入、删除和获取随机元素 - 允许重复 (Done)","slug":"_381-o-1-时间插入、删除和获取随机元素-允许重复-done","link":"#_381-o-1-时间插入、删除和获取随机元素-允许重复-done","children":[]},{"level":2,"title":"33 旋转过的排序数组 (Done)","slug":"_33-旋转过的排序数组-done","link":"#_33-旋转过的排序数组-done","children":[]},{"level":2,"title":"215 数组中的第K个最大元素（编程实现 O(n) 时间复杂度内找到一组数据的第 K 大元素）（方法一：堆，方法二：快排+二分，方法三：排序）(Done)","slug":"_215-数组中的第k个最大元素-编程实现-o-n-时间复杂度内找到一组数据的第-k-大元素-方法一-堆-方法二-快排-二分-方法三-排序-done","link":"#_215-数组中的第k个最大元素-编程实现-o-n-时间复杂度内找到一组数据的第-k-大元素-方法一-堆-方法二-快排-二分-方法三-排序-done","children":[]},{"level":2,"title":"912 排序数组 （方法一：归并排序，方法二：快排）(Done)","slug":"_912-排序数组-方法一-归并排序-方法二-快排-done","link":"#_912-排序数组-方法一-归并排序-方法二-快排-done","children":[]}],"git":{"createdTime":1745841896000,"updatedTime":1745841896000,"contributors":[{"name":"liz","email":"liz@MacBook-Pro-6.local","commits":1}]},"readingTime":{"minutes":20.19,"words":6058},"filePathRelative":"cs/code/快速恢复30题思路大纲.md","localizedDate":"April 28, 2025","excerpt":"<h1> 快速恢复30题思路大纲</h1>\\n<h2> 92 反转链表 II (Done)</h2>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token comment\\"># Definition for singly-linked list.</span>\\n<span class=\\"token comment\\"># class ListNode:</span>\\n<span class=\\"token comment\\">#     def __init__(self, val=0, next=None):</span>\\n<span class=\\"token comment\\">#         self.val = val</span>\\n<span class=\\"token comment\\">#         self.next = next</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Solution</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">reverseBetween</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> head<span class=\\"token punctuation\\">:</span> Optional<span class=\\"token punctuation\\">[</span>ListNode<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> left<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">,</span> right<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> Optional<span class=\\"token punctuation\\">[</span>ListNode<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token triple-quoted-string string\\">\\"\\"\\"\\n        h：哨兵节点\\n        pre：上一段最后一个    begin为pre的下一个\\n        end：反转段的最后一个  nxt为end的下一个\\n        \\"\\"\\"</span>\\n        <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">reverse_listnode</span><span class=\\"token punctuation\\">(</span>head<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n            pre <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">None</span>\\n            <span class=\\"token keyword\\">while</span> head<span class=\\"token punctuation\\">:</span>\\n                nxt <span class=\\"token operator\\">=</span> head<span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">next</span>\\n                head<span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">next</span> <span class=\\"token operator\\">=</span> pre\\n                pre <span class=\\"token operator\\">=</span> head\\n                head <span class=\\"token operator\\">=</span> nxt\\n            <span class=\\"token keyword\\">return</span> pre\\n\\n        h <span class=\\"token operator\\">=</span> pre <span class=\\"token operator\\">=</span> ListNode<span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> head<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">for</span> _ <span class=\\"token keyword\\">in</span> <span class=\\"token builtin\\">range</span><span class=\\"token punctuation\\">(</span>left<span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n            pre <span class=\\"token operator\\">=</span> pre<span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">next</span>\\n        begin <span class=\\"token operator\\">=</span> end <span class=\\"token operator\\">=</span> pre<span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">next</span>\\n        <span class=\\"token keyword\\">for</span> _ <span class=\\"token keyword\\">in</span> <span class=\\"token builtin\\">range</span><span class=\\"token punctuation\\">(</span>right<span class=\\"token operator\\">-</span>left<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n            end <span class=\\"token operator\\">=</span> end<span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">next</span>\\n        nxt <span class=\\"token operator\\">=</span> end<span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">next</span>\\n        end<span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">next</span> <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">None</span>\\n        pre<span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">next</span> <span class=\\"token operator\\">=</span> reverse_listnode<span class=\\"token punctuation\\">(</span>begin<span class=\\"token punctuation\\">)</span>\\n        begin<span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">next</span> <span class=\\"token operator\\">=</span> nxt\\n        <span class=\\"token keyword\\">return</span> h<span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">next</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
