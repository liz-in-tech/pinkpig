import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as t,c as r,f as d,a,b as p,d as l,e}from"./app-K2payoM4.js";const o="/pinkpig/assets/conda-lA5AupHP.png",c="/pinkpig/assets/conda1-N3ArY2ne.png",u="/pinkpig/assets/pypi_filter_search-GXKUc_3T.png",h="/pinkpig/assets/requests_package_info-5CCXC8KT.png",v="/pinkpig/assets/limit_version-gxHHg3ld.png",m={},b=e('<h1 id="python开发环境" tabindex="-1"><a class="header-anchor" href="#python开发环境" aria-hidden="true">#</a> Python开发环境</h1><ul><li><ol><li>适用范围</li></ol></li><li><ol start="2"><li>Python开发环境</li></ol></li><li><ol start="3"><li>包管理工具pip</li></ol></li><li><ol start="4"><li>pip 命令</li></ol></li><li><ol start="5"><li>Poetry</li></ol></li></ul>',2),g=e(`<h2 id="_1-适用范围" tabindex="-1"><a class="header-anchor" href="#_1-适用范围" aria-hidden="true">#</a> 1. 适用范围</h2><p>首选是网络应用，包括网站、后台服务等等；</p><p>其次是许多日常需要的小工具，包括系统管理员需要的脚本任务等等；</p><p>另外就是把其他语言开发的程序再包装起来，方便使用。</p><p>许多大型网站就是用Python开发的，例如YouTube、Instagram，还有国内的豆瓣。很多大公司，包括Google、Yahoo等，甚至NASA都大量地使用Python。</p><p>用极简单的工具完成大部分工作。在其他公司都在向更复杂的生态系统迁移的时候，YouTube一直保持着简单的技术栈。他们主要用Python编码，用MySQL做数据库，用Apache做web服务器。在这样一个庞大的网站中，新功能都是从一个简单的Python脚本开始，慢慢演化的。</p><h2 id="_2-python开发环境" tabindex="-1"><a class="header-anchor" href="#_2-python开发环境" aria-hidden="true">#</a> 2. Python开发环境</h2><h3 id="_2-1-下载、安装python、配置环境变量、验证" tabindex="-1"><a class="header-anchor" href="#_2-1-下载、安装python、配置环境变量、验证" aria-hidden="true">#</a> 2.1. 下载、安装python、配置环境变量、验证</h3><p>配置环境变量：安装时勾选，或自己配置</p><p>验证成功：在桌面打开命令行窗口</p><p>输入python --version，会出现python版本</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python --version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输入python，会出现python版本，还会展现&gt;&gt;&gt;可供输入python命令</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进入&gt;&gt;&gt;后，退出python，用exit()或quit()</p><h3 id="_2-2-ide和jupyter" tabindex="-1"><a class="header-anchor" href="#_2-2-ide和jupyter" aria-hidden="true">#</a> 2.2. IDE和Jupyter</h3><h4 id="_2-2-1-ide" tabindex="-1"><a class="header-anchor" href="#_2-2-1-ide" aria-hidden="true">#</a> 2.2.1. IDE</h4><p>pycharm</p><p>vscode</p><h4 id="_2-2-2-jupyter" tabindex="-1"><a class="header-anchor" href="#_2-2-2-jupyter" aria-hidden="true">#</a> 2.2.2. Jupyter</h4><h5 id="_2-2-2-1-安装jupyter" tabindex="-1"><a class="header-anchor" href="#_2-2-2-1-安装jupyter" aria-hidden="true">#</a> 2.2.2.1. 安装Jupyter</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pip install jupyterlab
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2-2-2-2-浏览器中打开jupyter" tabindex="-1"><a class="header-anchor" href="#_2-2-2-2-浏览器中打开jupyter" aria-hidden="true">#</a> 2.2.2.2. 浏览器中打开Jupyter</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>jupyter lab
jupyter notebook
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-2-2-3-jupyter查阅文档" tabindex="-1"><a class="header-anchor" href="#_2-2-2-3-jupyter查阅文档" aria-hidden="true">#</a> 2.2.2.3. Jupyter查阅文档</h5><p>1、查找模块中<strong>所有</strong>函数和类：调用dir函数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、查找<strong>特定</strong>函数和类的用法：调用help函数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">help</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3、使用?和??查看API的用法文档</p><p>在Jupyter记事本中，我们可以使用?指令在另一个浏览器窗口中显示文档。 例如，list?指令将创建与help(list)指令几乎相同的内容，并在新的浏览器窗口中显示它。 此外，如果我们使用两个问号，如list??，将显示实现该函数的Python代码。</p><h3 id="_2-3-python虚拟环境" tabindex="-1"><a class="header-anchor" href="#_2-3-python虚拟环境" aria-hidden="true">#</a> 2.3. Python虚拟环境</h3><h4 id="_2-3-1-使用虚拟环境的好处" tabindex="-1"><a class="header-anchor" href="#_2-3-1-使用虚拟环境的好处" aria-hidden="true">#</a> 2.3.1. 使用虚拟环境的好处</h4><p>使用单独的虚拟环境确实可能导致一些重复的库安装，从而占用更多的磁盘空间。然而，这种方法有几个重要的优点，使得它在大多数情况下是值得的：</p><ol><li>依赖隔离：每个项目都有自己的依赖环境，确保项目之间不会因为依赖版本冲突而导致问题。这对于开发和部署多个项目尤其重要。</li><li>版本控制：您可以在不同的项目中使用不同版本的库，而不必担心它们之间的兼容性问题。</li><li>可移植性：通过使用 requirements.txt 文件，您可以轻松地在不同的环境中重现项目的依赖关系。</li><li>安全性：隔离的环境可以减少项目之间的相互影响，降低安全风险。</li></ol><h4 id="_2-3-2-venv-和-conda" tabindex="-1"><a class="header-anchor" href="#_2-3-2-venv-和-conda" aria-hidden="true">#</a> 2.3.2. venv 和 conda</h4><p>都是用于创建和管理虚拟环境的工具，但它们有一些关键的区别：</p><ul><li>venv <ul><li>内置工具: venv 是 Python 自带的模块，从 Python 3.3 开始就内置在标准库中。它不需要额外安装。</li><li>依赖管理: venv 主要用于隔离 Python 包的安装。它使用 pip 来安装和管理包。 轻量级: venv 是一个轻量级的工具，适合需要简单隔离 Python 包的场景。</li><li>Python 版本: venv 只能创建与系统 Python 版本相同的虚拟环境。</li></ul></li><li>conda <ul><li>独立工具: conda 是 Anaconda 和 Miniconda 的一部分，需要单独安装。它不仅支持 Python，还支持其他语言（如 R）。</li><li>依赖管理: conda 是一个包管理器和环境管理器，能够管理 Python 包和其他软件包。它有自己的包管理系统，不依赖于 pip。</li><li>跨平台: conda 可以在 Windows、macOS 和 Linux 上使用，并且可以管理不同平台的依赖。 多版本支持: conda 可以创建不同 Python 版本的虚拟环境，这对于需要测试不同 Python 版本的项目非常有用。</li><li>更强的依赖解决能力: conda 使用 SAT 求解器来解决依赖关系，通常在处理复杂依赖时比 pip 更加可靠。</li></ul></li></ul><h4 id="_2-3-3-conda操作" tabindex="-1"><a class="header-anchor" href="#_2-3-3-conda操作" aria-hidden="true">#</a> 2.3.3. conda操作</h4><h5 id="_2-3-3-1-what" tabindex="-1"><a class="header-anchor" href="#_2-3-3-1-what" aria-hidden="true">#</a> 2.3.3.1. what</h5><ul><li>Conda：conda是一个包管理器，也是一个可执行命令，其核心功能是包管理和环境管理，环境管理允许用户方便地安装不同版本的python并可以快速切换</li><li>Miniconda：它只包含最基本的内容——python与conda，以及相关的必须依赖项，对于空间要求严格的用户，Miniconda是一种选择</li><li>Anaconda拥有众多包和工具，，还有GUI界面</li></ul><p>conda与anaconda、miniconda的区别: <img src="`+o+'" alt="alt text" loading="lazy"><img src="'+c+`" alt="alt text" loading="lazy"></p><h5 id="_2-3-3-2-how" tabindex="-1"><a class="header-anchor" href="#_2-3-3-2-how" aria-hidden="true">#</a> 2.3.3.2. How</h5><h6 id="_2-3-3-2-1-下载和安装" tabindex="-1"><a class="header-anchor" href="#_2-3-3-2-1-下载和安装" aria-hidden="true">#</a> 2.3.3.2.1. 下载和安装</h6><p>下载地址：https://docs.conda.io/projects/conda/en/stable/</p><p>mac也可以用Homebrew安装：brew install miniconda</p><p>验证</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>conda --version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="_2-3-3-2-2-查看虚拟环境列表" tabindex="-1"><a class="header-anchor" href="#_2-3-3-2-2-查看虚拟环境列表" aria-hidden="true">#</a> 2.3.3.2.2. 查看虚拟环境列表</h6><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>conda env list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h6 id="_2-3-3-2-3-环境管理-创建、激活、退出虚拟环境" tabindex="-1"><a class="header-anchor" href="#_2-3-3-2-3-环境管理-创建、激活、退出虚拟环境" aria-hidden="true">#</a> 2.3.3.2.3. 环境管理：创建、激活、退出虚拟环境</h6><p>创建</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 注：-n或--name可替代

conda create -n {env_name} {python==3.7.5}

示例
conda create --name my_venv 
conda create --name my_venv python=3.12
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>激活</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>conda activate my_venv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>退出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>conda deactivate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>conda remove -n my_venv --all
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-3-4-venv操作" tabindex="-1"><a class="header-anchor" href="#_2-3-4-venv操作" aria-hidden="true">#</a> 2.3.4. venv操作</h4><p>创建虚拟环境，命名为venv_name，其中venv_name可以替换为其他名称</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python -m venv venv_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>激活虚拟环境，激活的标志是前面多了(venv_name)标识，此时即可在虚拟环境中进行各种操作</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>source venv_name/bin/activate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>退出虚拟环境</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>deactivate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-3-5-ide的run按钮使用虚拟环境配置" tabindex="-1"><a class="header-anchor" href="#_2-3-5-ide的run按钮使用虚拟环境配置" aria-hidden="true">#</a> 2.3.5. IDE的RUN按钮使用虚拟环境配置</h4><p>Visual Studio Code (VSCode)<br> 选择解释器：<br> 打开命令面板（Ctrl+Shift+P 或 Cmd+Shift+P）。<br> 输入并选择 Python: Select Interpreter。<br> 从列表中选择您的虚拟环境的 Python 解释器。</p><h2 id="_3-包管理工具pip" tabindex="-1"><a class="header-anchor" href="#_3-包管理工具pip" aria-hidden="true">#</a> 3. 包管理工具pip</h2><h3 id="_3-1-什么是包-package" tabindex="-1"><a class="header-anchor" href="#_3-1-什么是包-package" aria-hidden="true">#</a> 3.1. 什么是包(Package)</h3><p>包是一个文件夹，包含有一个或多个模块</p><p>模块是一个文件，里面包含类，变量，函数等</p><h3 id="_3-2-如何创建一个包" tabindex="-1"><a class="header-anchor" href="#_3-2-如何创建一个包" aria-hidden="true">#</a> 3.2. 如何创建一个包</h3><p>在文件夹mypackage下创建一个空的__init__.py文件。</p><p>Note：<strong>init</strong>.py是一个特殊的文件，可以帮助识别该文件夹为包。一个空的__init__.py文件使得该包下所有模块可用。</p><p>创建模块arithmetic.py和greet.py。</p><p>文件结构如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>─ mypackage
    ├── __init__<span class="token punctuation">.</span>py
    ├── arithmetic<span class="token punctuation">.</span>py
    └── greet<span class="token punctuation">.</span>py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开Python交互模式，就可以导入使用了。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> mypackage <span class="token keyword">import</span> arithmetics
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> arithmetics<span class="token punctuation">.</span>add_numbers<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token number">11</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> arithmetics<span class="token punctuation">.</span>subtract<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token number">2</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> arithmetics<span class="token punctuation">.</span>multiple<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token number">15</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> arithmetics<span class="token punctuation">.</span>division<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token number">1.6666666666666667</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> arithmetics<span class="token punctuation">.</span>remainder<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token number">2</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> arithmetics<span class="token punctuation">.</span>power<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token number">125</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> mypackage <span class="token keyword">import</span> greet
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> greet<span class="token punctuation">.</span>greet_person<span class="token punctuation">(</span><span class="token string">&#39;Anne&#39;</span><span class="token punctuation">)</span>
<span class="token string">&#39;Anne, nice to meet you!&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-pip介绍" tabindex="-1"><a class="header-anchor" href="#_3-3-pip介绍" aria-hidden="true">#</a> 3.3. pip介绍</h3><p>pip 是 Python 中的标准包管理器。它允许你安装和管理不属于 Python 标准库的其它软件包。</p><p>软件包管理极其重要，所以自 Python3 的 3.4 版本以及 Python2 的 2.7.9 版本开始，pip 一直被直接包括在 Python 的安装包内。</p><p>高级编程语言通常都会提供一个比较完善的基础代码库，让你能直接调用，比如，针对电子邮件协议的SMTP库，针对桌面环境的GUI库，在这些已有的代码库的基础上开发，一个电子邮件客户端几天就能开发出来。</p><p>Python 就为我们提供了非常完善的基础代码库，覆盖了网络、文件、GUI、数据库、文本等大量内容，被形象地称作“内置电池（batteries included）”。用 Python 开发，许多功能不必从零编写，直接使用现成的即可。</p><p>除了内置的库外，Python 还有大量的第三方库，也就是别人开发的，供你直接使用的东西。当然，如果你开发的代码通过很好的封装，也可以作为第三方库给别人使用。</p><h3 id="_3-4-pypi-python-package-index-介绍" tabindex="-1"><a class="header-anchor" href="#_3-4-pypi-python-package-index-介绍" aria-hidden="true">#</a> 3.4. PyPI(Python Package Index)介绍</h3><p>Python 拥有一个活跃的社区，它提供了一个更大的软件包集合，以供你开发所需。这些软件包发布在 Python Package Index，也被称为 PyPI（发音 Pie Pea Eye）。PyPI 托管了大量包，包括开发框架，工具和库。</p><h3 id="_3-5-搜索可用包" tabindex="-1"><a class="header-anchor" href="#_3-5-搜索可用包" aria-hidden="true">#</a> 3.5. 搜索可用包</h3><h4 id="_3-5-1-pypi搜索" tabindex="-1"><a class="header-anchor" href="#_3-5-1-pypi搜索" aria-hidden="true">#</a> 3.5.1. PyPI搜索</h4>`,90),y={href:"https://pypi.org/",target:"_blank",rel:"noopener noreferrer"},x=e('<p>PyPI 为其索引提供了搜索功能，并通过包中公开的元数据（如框架，主题，开发状态等）过滤搜索结果。</p><p>PyPI 中用同一个术语搜索可能会产生大量的结果，不过你可以对它们进行分类过滤。比如，如果你想要找到可以帮助你开发应用的库，你可以展开 Intended Audience 并选择 Developers。另外，你可能还需要一个稳定且可用于生产的包，可以展开 Development Status 并选择 Production/Stable。</p><figure><img src="'+u+`" alt="PyPI 过滤搜索" tabindex="0" loading="lazy"><figcaption>PyPI 过滤搜索</figcaption></figure><h4 id="_3-5-2-google搜索" tabindex="-1"><a class="header-anchor" href="#_3-5-2-google搜索" aria-hidden="true">#</a> 3.5.2. Google搜索</h4><p>被广泛使用的 Python 库会展示在 google 搜索的顶部，并且你应该能看到指向 PyPI 中包或者源代码仓库的链接。</p><h2 id="_4-pip-命令" tabindex="-1"><a class="header-anchor" href="#_4-pip-命令" aria-hidden="true">#</a> 4. pip 命令</h2><h3 id="_4-1-国内源" tabindex="-1"><a class="header-anchor" href="#_4-1-国内源" aria-hidden="true">#</a> 4.1. 国内源</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple -r requirements.txt
pip install --upgrade -i https://pypi.tuna.tsinghua.edu.cn/simple -r requirements.txt # 自动升级需求文件中定义的软件包
pip install -r requirements.txt --no-dependencies #依赖包版本信息产生冲突时可以忽略版本要求，解决冲突
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-安装pip并验证" tabindex="-1"><a class="header-anchor" href="#_4-2-安装pip并验证" aria-hidden="true">#</a> 4.2. 安装pip并验证</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># install</span>
pip install pip

<span class="token comment"># check</span>
pip <span class="token operator">-</span><span class="token operator">-</span>version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-帮助命令" tabindex="-1"><a class="header-anchor" href="#_4-3-帮助命令" aria-hidden="true">#</a> 4.3. 帮助命令</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 了解pip支持的命令
pip help

# 了解指定命令（eg.pip search命令）
pip help search
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-安装包" tabindex="-1"><a class="header-anchor" href="#_4-4-安装包" aria-hidden="true">#</a> 4.4. 安装包</h3><p>使用 pip install 命令，其后跟着你想要安装的包名。pip 会在 PyPI 中查找这个包，计算其依赖关系，安装并确保安装好的包正常工作。</p><p>命令 pip install 会查找并安装软件包的最新版本。同时还会搜索软件包元数据中的依赖列表，并安装这些依赖以确保软件包满足所有的需求。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip install numpy
pip install matplotlib
pip install pandas
pip install scikit<span class="token operator">-</span>learn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5-查看已安装包列表" tabindex="-1"><a class="header-anchor" href="#_4-5-查看已安装包列表" aria-hidden="true">#</a> 4.5. 查看已安装包列表</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip <span class="token builtin">list</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-6-查看指定包的信息" tabindex="-1"><a class="header-anchor" href="#_4-6-查看指定包的信息" aria-hidden="true">#</a> 4.6. 查看指定包的信息</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip show numpy <span class="token comment"># 展示基础信息</span>
pip show <span class="token operator">-</span><span class="token operator">-</span>verbose numpy <span class="token comment"># 展示详细信息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-7-卸载包" tabindex="-1"><a class="header-anchor" href="#_4-7-卸载包" aria-hidden="true">#</a> 4.7. 卸载包</h3><h4 id="_4-7-1-卸载之前-查看依赖和引用-requires和required-by" tabindex="-1"><a class="header-anchor" href="#_4-7-1-卸载之前-查看依赖和引用-requires和required-by" aria-hidden="true">#</a> 4.7.1. 卸载之前：查看依赖和引用（Requires和Required-by）</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip show requests
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+h+`" alt="requests包的基础信息" tabindex="0" loading="lazy"><figcaption>requests包的基础信息</figcaption></figure><p>上图展示了 requests 需要依赖 urllib3，certifi，chardet 和 idna。而且你可以看到 requests 没有被其他包引用，所以它可以安全地卸载。</p><p>你应该对 requests 中所有的依赖都运行一下 show 命令，以确保没有其他库依赖它们。</p><p>如果有其它软件包在使用这些依赖，卸载会导致程序崩溃。</p><p>你了解了这些依赖次序之后，就可以使用 uninstall 命令来卸载它们。</p><h4 id="_4-7-2-卸载" tabindex="-1"><a class="header-anchor" href="#_4-7-2-卸载" aria-hidden="true">#</a> 4.7.2. 卸载</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip uninstall requests <span class="token comment"># 有确认信息</span>
pip uninstall <span class="token operator">-</span>y requests <span class="token comment"># 没有提示信息，直接卸载</span>
pip uninstall <span class="token operator">-</span>y urllib3 certifi chardet idna <span class="token comment"># 卸载多个包</span>
pip uninstall <span class="token operator">-</span>y <span class="token operator">-</span>r requirements<span class="token punctuation">.</span>txt <span class="token comment"># 卸载需求文档中列出的所有软件包</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-8-使用-requirements-txt-需求文件" tabindex="-1"><a class="header-anchor" href="#_4-8-使用-requirements-txt-需求文件" aria-hidden="true">#</a> 4.8. 使用 requirements.txt 需求文件</h3><p>pip install 命令只会安装最新发布的软件包版本，但是有时候，你可能希望根据代码运行情况安装特定的版本。</p><p>需求文件可以精确指定需要安装的软件包和版本。</p><h4 id="_4-8-1-执行requirements-txt" tabindex="-1"><a class="header-anchor" href="#_4-8-1-执行requirements-txt" aria-hidden="true">#</a> 4.8.1. 执行requirements.txt</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip install <span class="token operator">-</span>r requirements<span class="token punctuation">.</span>txt
pip install <span class="token operator">-</span><span class="token operator">-</span>upgrade <span class="token operator">-</span>r requirements<span class="token punctuation">.</span>txt <span class="token comment"># 自动升级需求文件中定义的软件包</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果依赖项在镜像源中找不到指定版本导致安装终止，解决办法是：将requirements.txt中没有对应版本的依赖项删掉（已经安装完的不能删掉），然后继续使用pip install -r requirements.txt，最后再单独安装没有安装上的依赖项（pip install的后面不加版本号）：pip install 依赖项</p><h4 id="_4-8-2-生成-微调requirements-txt" tabindex="-1"><a class="header-anchor" href="#_4-8-2-生成-微调requirements-txt" aria-hidden="true">#</a> 4.8.2. 生成&amp;微调requirements.txt</h4><h5 id="_4-8-2-1-生成-将pip-freeze的输出重定向到文件以生成一个需求文件" tabindex="-1"><a class="header-anchor" href="#_4-8-2-1-生成-将pip-freeze的输出重定向到文件以生成一个需求文件" aria-hidden="true">#</a> 4.8.2.1. 生成：将pip freeze的输出重定向到文件以生成一个需求文件</h5><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip freeze <span class="token comment"># 该命令输出信息可用于requirements.txt</span>

<span class="token comment"># 将pip freeze的输出重定向到文件以生成一个需求文件</span>
pip freeze <span class="token operator">&gt;</span> requirements<span class="token punctuation">.</span>txt

<span class="token comment"># 验证</span>
cat requirements<span class="token punctuation">.</span>txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-8-2-2-微调" tabindex="-1"><a class="header-anchor" href="#_4-8-2-2-微调" aria-hidden="true">#</a> 4.8.2.2. 微调</h5><p>需求文件的格式允许你使用逻辑运算符指定依赖的版本，这为确保更新包提供了更多的灵活性，但是仍然要定义一个包的基础版本。</p><p>可以通过改变逻辑运算符为 &gt;= 来告知 pip 精准安装已发布的指定版本或更高版本。</p><p>理想情况下，新版本的包会向后兼容并且没有新引入的 bug。不幸的是，新版本引入的更改还是可能会破坏你的应用程序。可以通过 &lt; 来避免安装不兼容的高版本。</p><figure><img src="`+v+`" alt="使用逻辑运算符指定依赖的版本" tabindex="0" loading="lazy"><figcaption>使用逻辑运算符指定依赖的版本</figcaption></figure><h2 id="_5-poetry-python包管理工具" tabindex="-1"><a class="header-anchor" href="#_5-poetry-python包管理工具" aria-hidden="true">#</a> 5. Poetry--python包管理工具</h2><h3 id="_5-1-简介" tabindex="-1"><a class="header-anchor" href="#_5-1-简介" aria-hidden="true">#</a> 5.1. 简介</h3><p>poetry是python的依赖和包管理工具（Poetry is a tool for dependency management and packaging in Python.）。类似于java领域的maven和gradle。</p><h3 id="_5-2-安装" tabindex="-1"><a class="header-anchor" href="#_5-2-安装" aria-hidden="true">#</a> 5.2. 安装</h3><p>Note：如果有SSL报错，需要关闭vpn</p><h4 id="_5-2-1-pip安装poetry" tabindex="-1"><a class="header-anchor" href="#_5-2-1-pip安装poetry" aria-hidden="true">#</a> 5.2.1. pip安装Poetry</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pip install poetry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5-2-2-macos安装poetry" tabindex="-1"><a class="header-anchor" href="#_5-2-2-macos安装poetry" aria-hidden="true">#</a> 5.2.2. macOS安装Poetry</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>brew install poetry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-3-验证安装成功" tabindex="-1"><a class="header-anchor" href="#_5-3-验证安装成功" aria-hidden="true">#</a> 5.3. 验证安装成功</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>poetry --version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-4-下载包" tabindex="-1"><a class="header-anchor" href="#_5-4-下载包" aria-hidden="true">#</a> 5.4. 下载包</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>poetry install xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,58);function _(k,f){const n=i("ExternalLinkIcon");return t(),r("div",null,[b,d(" more "),g,a("p",null,[a("a",y,[p("PyPI搜索"),l(n)])]),x])}const I=s(m,[["render",_],["__file","01_python_environment.html.vue"]]);export{I as default};
