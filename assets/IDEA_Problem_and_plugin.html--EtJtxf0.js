import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o,c as d,a,b as e,d as n,e as s}from"./app-5kh03Iqc.js";const p="/pinkpig/assets/IDEA_Problem_and_plugin-1-Roq2YLBJ.png",c="/pinkpig/assets/IDEA_Problem_and_plugin-2-EEPVE0EP.png",g="/pinkpig/assets/IDEA_Problem_and_plugin-3-32L2nV4F.png",h="/pinkpig/assets/IDEA_Problem_and_plugin-4-v0Ve2Q0a.png",u="/pinkpig/assets/IDEA_Problem_and_plugin-5-97jlK2s6.png",m="/pinkpig/assets/IDEA_Problem_and_plugin-6-uEtetlhA.png",b="/pinkpig/assets/IDEA_Problem_and_plugin-7-KhHTnpa3.png",_="/pinkpig/assets/IDEA_Problem_and_plugin-8-UN2uQWHx.png",f="/pinkpig/assets/IDEA_Problem_and_plugin-9-fMivaHXP.png",v="/pinkpig/assets/IDEA常见问题解决-3-YOrCgFIq.png",k="/pinkpig/assets/IDEA常见问题解决-4-qtLyYyDA.png",i="/pinkpig/assets/IDEA常见问题解决-5-0nRMtBY3.png",x="/pinkpig/assets/IDEA常见问题解决-6-vrNcTpfi.png",E="/pinkpig/assets/IDEA常见问题解决-7-xCz6beEi.png",y="/pinkpig/assets/IDEA常见问题解决-8-CTl5BUbS.png",A="/pinkpig/assets/IDEA常见问题解决-9-Hgb4mc-V.png",D="/pinkpig/assets/IDEA常见问题解决-1-KDF1Gpo9.png",I="/pinkpig/assets/IDEA常见问题解决-2-ilcP1zXT.png",S="/pinkpig/assets/IDEA常见问题解决-10-9224sAqR.png",z="/pinkpig/assets/有用的功能-1-jxJ2OBNF.png",U="/pinkpig/assets/有用的功能-2--4E0ZoGL.png",P="/pinkpig/assets/有用的功能-3-076QVP3c.png",C="/pinkpig/assets/有用的功能-4-AXeoB3Rn.png",j={},B=s('<h1 id="idea常见问题及插件" tabindex="-1"><a class="header-anchor" href="#idea常见问题及插件" aria-hidden="true">#</a> IDEA常见问题及插件</h1><h2 id="一、常用插件" tabindex="-1"><a class="header-anchor" href="#一、常用插件" aria-hidden="true">#</a> 一、常用插件</h2><ul><li>Alibaba Java Coding Guidelines(XenoAmess TPM) : 代码检查用这个 <br></li><li>RestfulTool: 通过URL直接定位到对应controller代码 <br></li><li>Maven Helper: 分析Maven项目的package依赖冲突 <br></li><li>POJO to JSON: 要为类生成代码直接在类定义处右键就能copy json了，省时省力 <br></li><li>Github Copilot: AI补全代码，学生可以免费申请 <br></li><li>Sonar Lint: 扫描 bug, vulnerabilities and code smell，同时也是code review好帮手 <br></li><li>Database Navigator: 数据库插件，聊胜于无 （不建议使用，只能查看，无法创建表，还是用DBeaver算了） <br></li><li>Git Commit Template : 提交git commit模板，有利于团队管理提交代码 <br></li><li>Spring Assistant ：在idea中添加Spring Initializr工具；支持.yml提示【特别提醒：亲测很难用，maven导包会报错，直接用官网方式创建SpringBoot脚手架项目】 <br></li><li>GitToolBox：查看每行代码最后一个修改的人 <br></li><li>lombok：通过注解自动生成set,get,equals,constructor,toString</li></ul><h2 id="二、初始ide配置-全局配置" tabindex="-1"><a class="header-anchor" href="#二、初始ide配置-全局配置" aria-hidden="true">#</a> 二、初始IDE配置（全局配置）</h2><h3 id="一-针对全局-而不是针对单个项目配置" tabindex="-1"><a class="header-anchor" href="#一-针对全局-而不是针对单个项目配置" aria-hidden="true">#</a> （一）针对全局，而不是针对单个项目配置</h3><p>针对单个项目：</p><p>相信很多小伙伴都是通过File-Settings，更改项目配置吧，但老司机知道每次换新的项目，你还得重新设置一遍（常见例如maven/jdk编译版本），这显然不科学。</p><figure><img src="'+p+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><p>针对全局：</p><p>如果打开了项目，先Close Project</p><p>在IDEA的Customize页面，找到All setting，这里进行配置，才是全局生效的</p><figure><img src="'+c+`" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h3 id="二-idea初始配置" tabindex="-1"><a class="header-anchor" href="#二-idea初始配置" aria-hidden="true">#</a> （二）IDEA初始配置</h3><h4 id="_1、配置maven" tabindex="-1"><a class="header-anchor" href="#_1、配置maven" aria-hidden="true">#</a> 1、配置maven</h4><ul><li>maven home path（maven主路径）</li><li>setting file（setting.xml文件路径，在maven主路径的conf下）</li><li>local repository（maven仓库地址，这个自定义，之后会把所有导入的包放这个路径下）</li><li>setting.xml中配置阿里云镜像</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://maven.aliyun.com/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、配置编码" tabindex="-1"><a class="header-anchor" href="#_2、配置编码" aria-hidden="true">#</a> 2、配置编码</h4><figure><img src="`+g+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h4 id="_3、配置快捷键" tabindex="-1"><a class="header-anchor" href="#_3、配置快捷键" aria-hidden="true">#</a> 3、配置快捷键</h4><figure><img src="'+h+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h4 id="_4、配置自动导包" tabindex="-1"><a class="header-anchor" href="#_4、配置自动导包" aria-hidden="true">#</a> 4、配置自动导包</h4><figure><img src="'+u+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h4 id="_5、配置代码模板" tabindex="-1"><a class="header-anchor" href="#_5、配置代码模板" aria-hidden="true">#</a> 5、配置代码模板</h4><figure><img src="'+m+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h4 id="_6、配置jvm内存" tabindex="-1"><a class="header-anchor" href="#_6、配置jvm内存" aria-hidden="true">#</a> 6、配置JVM内存</h4><figure><img src="'+b+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><p>默认值如下:</p><p><img src="'+_+'" alt="Untitled" loading="lazy"> 修改后如下：</p><figure><img src="'+f+'" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h2 id="三、常见问题" tabindex="-1"><a class="header-anchor" href="#三、常见问题" aria-hidden="true">#</a> 三、常见问题</h2><h3 id="更改项目jdk版本" tabindex="-1"><a class="header-anchor" href="#更改项目jdk版本" aria-hidden="true">#</a> 更改项目JDK版本</h3><ol><li>按Ctrl+Alt+S，打开【Settings】，修改Java Compiler配置: <br></li></ol><p><img src="'+v+'" alt="image.png" loading="lazy"> <br></p><ol start="2"><li>改Maven的JDK版本 <br></li></ol><p>打开pom.xml，更改如下字段: <br><img src="'+k+'" alt="image.png" loading="lazy"> <br></p><ol start="3"><li>点击左上角【File】，点击【Project Structure】，更改项目设置 <br></li></ol><p><img src="'+i+'" alt="image.png" loading="lazy"> <br><img src="'+x+'" alt="image.png" loading="lazy"> <br></p><h3 id="项目文件出不来" tabindex="-1"><a class="header-anchor" href="#项目文件出不来" aria-hidden="true">#</a> 项目文件出不来</h3><p>点击左上角【File】，点击【Project Structure】，更改【Modules】 <br> 如果项目没有展示出来，就是模块module没有弄好</p><p><img src="'+i+'" alt="image.png" loading="lazy"> <br></p><h3 id="terminal中按esc切回主编辑器窗口" tabindex="-1"><a class="header-anchor" href="#terminal中按esc切回主编辑器窗口" aria-hidden="true">#</a> Terminal中按ESC切回主编辑器窗口</h3><p>这样非常不利于在terminal中进行vim编辑 <br> 解决办法: <br> 使用Ctrl+Alt+S快捷键打开idea全局配置，在快捷键映射配置Settings -&gt; keymap中，找到 Plugins -&gt; Terminal -&gt; Switch Focus To Editor，删除其ESC快捷键绑定即可。 <br></p><h3 id="用idea插件database连接数据库" tabindex="-1"><a class="header-anchor" href="#用idea插件database连接数据库" aria-hidden="true">#</a> 用IDEA插件database连接数据库</h3><p>报错：The Server time zone value &#39;XXXXX&#39; 乱码 <br> 解决：连接时，加上serverTimezone=GMT即可解决 <br></p><h3 id="配置文件-yml-properties-没有提示" tabindex="-1"><a class="header-anchor" href="#配置文件-yml-properties-没有提示" aria-hidden="true">#</a> 配置文件（.yml/.properties）没有提示</h3><p>旗舰版 <br> 添加Spring Boot插件后重启，配置文件显示为绿叶 <br> 社区版（无Spring Boot插件） <br> 添加Spring Assistant插件后重启，支持.yml提示，但.properties无法有提示 <br></p><h3 id="设置字符集为utf-8" tabindex="-1"><a class="header-anchor" href="#设置字符集为utf-8" aria-hidden="true">#</a> 设置字符集为utf-8</h3><p><img src="'+E+'" alt="image.png" loading="lazy"> <br></p><h3 id="处理全局搜索不到确实存在的文件" tabindex="-1"><a class="header-anchor" href="#处理全局搜索不到确实存在的文件" aria-hidden="true">#</a> 处理全局搜索不到确实存在的文件</h3><p>解决：清理缓存 <br><img src="'+y+'" alt="image.png" loading="lazy"> <br><img src="'+A+'" alt="image.png" loading="lazy"> <br></p><h3 id="多实例" tabindex="-1"><a class="header-anchor" href="#多实例" aria-hidden="true">#</a> 多实例</h3><p>一个类运行多个实例 <br> 点击要运行的类上面的【Edit Configuration】 <br><img src="'+D+'" alt="image.png" loading="lazy"> <br> 在Build and run栏的【Modify options】里勾上【Allow multiple instances】 <br><img src="'+I+'" alt="image.png" loading="lazy"> <br></p><h3 id="自动生成序列化id" tabindex="-1"><a class="header-anchor" href="#自动生成序列化id" aria-hidden="true">#</a> 自动生成序列化ID</h3><p>设置：Files -&gt; Settings -&gt; Inspections -&gt; 搜索 UID -&gt; 勾选 “Serializable class without &#39;serialVersionUID&#39;” -&gt; Apply <br></p><p>在需要生成序列化ID的类中：选中类名 -&gt; alt+enter -&gt; 点击Add &#39;serialVersionUID&#39;即可生成 <br><img src="'+S+'" alt="image.png" loading="lazy"> <br></p><h3 id="远程debug" tabindex="-1"><a class="header-anchor" href="#远程debug" aria-hidden="true">#</a> 远程debug</h3><p>Edit Run Configuration <br><img src="'+z+`" alt="image.png" loading="lazy"> <br> 填目标主机的ip port <br></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>参数里填-agentlib:jdwp=transport=dt_socket,server=y,suspend=n &lt;br/&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果连不通，尝试看目标机器是否开启debug模式，端口是否暴露出来 <br> 如果连通，会看到类似如下 <br></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Connected to the target VM, address: &#39;&lt;ip&gt;:&lt;port&gt;&#39;, transport: &#39;socket&#39; &lt;br/&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="更改自动生成的author" tabindex="-1"><a class="header-anchor" href="#更改自动生成的author" aria-hidden="true">#</a> 更改自动生成的author</h3><p><img src="`+U+`" alt="image.png" loading="lazy"> <br></p><p>另一种办法: <br></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>点击IDE上面的【Help】 -&gt; 【Edit Custom VM Options】，添加一行配置: &lt;br/&gt;
&gt; -Duser.name=&lt;username&gt; &lt;br/&gt;

即可解决 &lt;br/&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自动生成serialversionuid" tabindex="-1"><a class="header-anchor" href="#自动生成serialversionuid" aria-hidden="true">#</a> 自动生成serialVersionUID</h3><p><img src="`+P+'" alt="image.png" loading="lazy"> <br></p><h3 id="查看字节码" tabindex="-1"><a class="header-anchor" href="#查看字节码" aria-hidden="true">#</a> 查看字节码</h3><ol><li>编译后可以直接去查看target文件夹下，找到对应的class文件，这里看到的是.class文件被IDE 解析后的结果。可以看到一些自动生成的代码如@Lombok等生成的 <br></li><li>安装jclasslib Bytecode Viewer插件，点击IDE 顶部的【View】 -&gt; 【Show bytecode】，可以看对应类的真实字节码 <br></li></ol><h3 id="打开多个文件显示在多行且不隐藏" tabindex="-1"><a class="header-anchor" href="#打开多个文件显示在多行且不隐藏" aria-hidden="true">#</a> 打开多个文件显示在多行且不隐藏</h3><p>File -&gt; settings -&gt;Editor -&gt;General -&gt;Editor tabs <br> -&gt; 不勾选show tabs in single row -&gt; 确认 <br></p><h3 id="远程调试" tabindex="-1"><a class="header-anchor" href="#远程调试" aria-hidden="true">#</a> 远程调试</h3><p>前置条件：IDEA下载arthas插件 <br> 1.找到要监控的方法，右键，Arthas Command-&gt;Watch <br> 2.打开容器（Note：在容器里粘贴快捷键：ctrl+shift+v） <br> su admin #进入admin账号 <br> bash /home/admin/arthas/as.sh 然后一直回车，直到看到[arthas@xxxx]$ <br> 输入刚才复制的命令 <br> 3.在线上环境操作调该方法 <br> 4.即可在容器里监控到信息 <br></p><h3 id="idea解决冲突" tabindex="-1"><a class="header-anchor" href="#idea解决冲突" aria-hidden="true">#</a> IDEA解决冲突</h3><p>pull之后有冲突--&gt;找到冲突的文件--&gt;到编辑页面--&gt;去掉报错的部分--&gt;点击Git中add--&gt;全选所有文件--&gt;commit--&gt;再pull一次--&gt;然后push--&gt;结束 <br></p><h2 id="容器里查看日志" tabindex="-1"><a class="header-anchor" href="#容器里查看日志" aria-hidden="true">#</a> 容器里查看日志</h2><p>tail -f a.log #动态读取最后10行（默认是10行） <br> tail -200f a.log #动态读取最后200行数据 <br> tail -f a.log |grep -E --color &#39;order|product&#39; <br> #动态展示文件中出现的 order或者product字符 不区分大小写，并且高亮显示</p><p>容器里查看数据库表 <br> cd bin <br> sh dbshell.sh <br></p><h2 id="dbeaver导出数据" tabindex="-1"><a class="header-anchor" href="#dbeaver导出数据" aria-hidden="true">#</a> DBeaver导出数据</h2>',78),N={href:"https://blog.csdn.net/WTUDAN/article/details/120767542",target:"_blank",rel:"noopener noreferrer"},T=a("br",null,null,-1),V=a("h2",{id:"sql",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#sql","aria-hidden":"true"},"#"),e(" SQL")],-1),w={href:"https://blog.csdn.net/haoui123/article/details/80562835",target:"_blank",rel:"noopener noreferrer"},M=a("br",null,null,-1),L={href:"https://www.cnblogs.com/eternityz/p/12284808.html",target:"_blank",rel:"noopener noreferrer"},O=a("br",null,null,-1),J=s('<h2 id="判空" tabindex="-1"><a class="header-anchor" href="#判空" aria-hidden="true">#</a> 判空</h2><p>注解 <br><img src="'+C+'" alt="image.png" loading="lazy"> <br> 集合判空 <br> CollectionUtils.<em>isNotEmpty(list)</em> <br><em>对象判空</em> <br> java.util.function.Supplier.Objects.<em>nonNull</em> <br> java.util.function.Supplier.Objects.isNull <br> 通用代码积累 <br></p><table><thead><tr><th>对象复制</th><th>org.springframework.beans.BeanUtils#<em>copyProperties(src,dest)</em></th></tr></thead><tbody><tr><td><em>对象转json</em></td><td>JSONObject.<em>toJSONString</em>(result)</td></tr><tr><td>字符串相等</td><td>org.apache.commons.lang.StringUtils#equals</td></tr><tr><td>新建数组</td><td>com.google.common.collect.Lists.newArrayList()</td></tr><tr><td>遍历枚举</td><td>Stream.<em>of</em>(MeasurementItemEnum.<em>values</em>()).map(MeasurementItemEnum::getId).collect(Collectors.<em>toList</em>());</td></tr></tbody></table><p>toB <br> 产品出一个正式的GA版本才能部署到客户环境 <br> 初始化任务，很多变更的都是代码里配置好，初始化到数据库里，然后从数据库里查 <br> 如预案原子操作及其分类，系统配置，功能切换开关 <br></p><p>本来的一些手动操作，做成原子操作，一些风险场景能自动触发执行预案 <br></p>',5);function F(G,X){const t=l("ExternalLinkIcon");return o(),d("div",null,[B,a("p",null,[a("a",N,[e("https://blog.csdn.net/WTUDAN/article/details/120767542"),n(t)]),e(),T]),V,a("p",null,[a("a",w,[e("查询重复记录"),n(t)]),e(),M,a("a",L,[e("分组返回map"),n(t)]),e(),O]),J])}const H=r(j,[["render",F],["__file","IDEA_Problem_and_plugin.html.vue"]]);export{H as default};
