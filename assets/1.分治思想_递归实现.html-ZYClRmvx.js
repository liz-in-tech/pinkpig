import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e as p}from"./app-D6wNGShW.js";const t="/pinkpig/assets/1.分治思想_递归实现-1-UhGCDYph.png",o="/pinkpig/assets/1.分治思想_递归实现-2-1AR0RLxX.png",e="/pinkpig/assets/1.分治思想_递归实现-3-HXqcQ3-l.png",c="/pinkpig/assets/1.分治思想_递归实现-4-fYbgF7PT.png",l="/pinkpig/assets/1.分治思想_递归实现-5-IRQrjsLS.png",r={},i=p(`<h1 id="分治思想与递归实现" tabindex="-1"><a class="header-anchor" href="#分治思想与递归实现" aria-hidden="true">#</a> 分治思想与递归实现</h1><h2 id="算法的两种实现方式" tabindex="-1"><a class="header-anchor" href="#算法的两种实现方式" aria-hidden="true">#</a> 算法的两种实现方式</h2><p>正如数据结构中，所有的数据结构都由数组或链表实现。 <br> Note：数据结构的底层存储只有数组和链表两种 <br> 数组：栈、队列、堆、树、图(邻接矩阵) <br> 链表：栈、队列、堆、树、图(邻接表) <br></p><p>在算法中，所有的算法都由迭代或递归实现。 <br> 迭代：可以实现所有算法，所有的递归都可转换为迭代。动态规划可以看做是通过迭代实现分治思想的别称。 <br> 递归：分治思想的算法，也就是有子问题的算法，除了动态规划是自底向上通过迭代实现，其他的算法都是自顶向下，都可用递归实现 <br></p><h3 id="递归-自顶向下" tabindex="-1"><a class="header-anchor" href="#递归-自顶向下" aria-hidden="true">#</a> 递归（自顶向下）</h3><p>基本性质：直接或间接的调用自身 <br> 本质：分治思想，将原问题拆分成具有相同性质的子问题 <br> 优点：可以使一个看似复杂的问题变得简洁和易于理解。 <br> 缺点：空间复杂度高、有堆栈溢出风险、存在重复计算、过多函数调用会耗时较多等问题。 <br></p><h4 id="理解递归的正确思维方式" tabindex="-1"><a class="header-anchor" href="#理解递归的正确思维方式" aria-hidden="true">#</a> 理解递归的正确思维方式</h4><p>对于递归代码，这种试图想清楚整个递和归过程的做法，实际上是进入了一个思维误区。很多时候，我们理解起来比较吃力，主要原因就是自己给自己制造了这种理解障碍。那正确的思维方式应该是怎样的呢 ？**把要实现的递归函数，看成已经实现好的。假设子问题已经解决的情况下，思考原问题怎么解决。**如一个问题 A 可以分解为若干子问题 B、C、D，你可以假设子问题 B、C、D 已经解决，在此基础上思考如何解决问题 A。而且，你只需要思考问题 A 与子问题 B、C、D 两层之间的关系即可，不需要一层一层往下思考子问题与子子问题，子子问题与子子子问题之间的关系。屏蔽掉递归细节，这样理解起来就简单多了。 <br> 理解递归思维方式经典案例：汉诺塔 <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">hano</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token class-name">C</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 把A上的n个塔，借助B,移到C上 &lt;br/&gt;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token function">hano</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">,</span> <span class="token class-name">B</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 把A上的n-1个塔,借助C,移到B上 &lt;br/&gt;</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token operator">+</span><span class="token string">&quot;-&gt;&quot;</span><span class="token operator">+</span><span class="token class-name">C</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 把A上的1个塔移到C上 &lt;br/&gt;</span>
        <span class="token function">hano</span><span class="token punctuation">(</span><span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 把B上的n-1个塔,借助A,移到C上 &lt;br/&gt;</span>
    <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+t+'" alt="image.png" loading="lazy"> <br><img src="'+o+'" alt="image.png" loading="lazy"> <br><img src="'+e+'" alt="image.png" loading="lazy"> <br><img src="'+c+`" alt="image.png" loading="lazy"> <br></p><h4 id="是否可以用递归来解决" tabindex="-1"><a class="header-anchor" href="#是否可以用递归来解决" aria-hidden="true">#</a> 是否可以用递归来解决</h4><ol><li>可拆分子问题，子问题和原始问题做同样的事 <br></li><li>存在递归终止条件 <br></li></ol><h4 id="如何编写递归代码" tabindex="-1"><a class="header-anchor" href="#如何编写递归代码" aria-hidden="true">#</a> 如何编写递归代码</h4><ol><li>写出递推公式 <br></li><li>找到终止条件 <br></li></ol><h4 id="递归代码隐患问题" tabindex="-1"><a class="header-anchor" href="#递归代码隐患问题" aria-hidden="true">#</a> 递归代码隐患问题</h4><h5 id="堆栈溢出" tabindex="-1"><a class="header-anchor" href="#堆栈溢出" aria-hidden="true">#</a> 堆栈溢出</h5><p>函数调用会使用栈来保存临时变量。每调用一个函数，都会将临时变量封装为栈帧压入内存栈，等函数执行完成返回时，才出栈。系统栈或者虚拟机栈空间一 般都不大。如果递归求解的数据规模很大，调用层次很深，一直压入栈，就会有堆栈溢出的风险。 <br> 堆栈溢出解决：限制递归调用的最大深度。超过一定深度后，直接报错。 <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 全局变量，表示递归的深度 &lt;br/&gt;</span>
<span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
depth<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>depth <span class="token operator">&gt;</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> exception<span class="token punctuation">;</span> <span class="token comment">// 超过一定深度后，直接报错 &lt;br/&gt;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="重复计算" tabindex="-1"><a class="header-anchor" href="#重复计算" aria-hidden="true">#</a> 重复计算</h5><p>重复计算经典案例：爬楼梯（这个实际上是斐波那契数列） <br> 有 n 个台阶，每次你可以跨 1 个台阶或者 2 个台阶，请问走这 n 个台阶有多少种走法？ <br><img src="`+l+`" alt="image.png" loading="lazy"> <br> 重复计算解决：“备忘录”的解决方式，避免冗余计算（记忆递归） <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 备忘录 &lt;br/&gt;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 递归终止条件 &lt;br/&gt;</span>
            <span class="token keyword">return</span> n<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 重复子问题从备忘录里取 &lt;br/&gt;</span>
        a<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递推公式 &lt;br/&gt;</span>
        <span class="token keyword">return</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="空间复杂度高" tabindex="-1"><a class="header-anchor" href="#空间复杂度高" aria-hidden="true">#</a> 空间复杂度高</h5><p>在空间复杂度上，因为递归调用一次就会在内存栈中保存一次现场数据，所以在分析递归代码空间复杂度时，需要额外考虑这部分的开销，比如f(n)=f(n-1)+1的递归代码，空间复杂度并不是 O(1)，而是 O(n)。 <br></p><h3 id="迭代-自底向上" tabindex="-1"><a class="header-anchor" href="#迭代-自底向上" aria-hidden="true">#</a> 迭代（自底向上）</h3><p>递归都能转换为迭代，能用递归解的问题（eg.遍历二叉树），一般都有两种解法：递归和迭代 <br></p><h2 id="分治思想-有子问题的算法" tabindex="-1"><a class="header-anchor" href="#分治思想-有子问题的算法" aria-hidden="true">#</a> 分治思想（有子问题的算法）</h2><p>分治法，字面意思是“分而治之”，就是把一个复杂的问题拆分出相同或相似的子问题，所以凡是涉及子问题的算法，姑且都视为分治思想。 <br> 分治是一种算法思想，递归是一种实现方式 <br> 递归算法从本质上来说都是分治算法（递归都是分治） <br> 分治算法不一定使用递归结构，用迭代也可实现，动态规划就是迭代实现的方式（分治不一定用递归实现） <br> 排序算法中，快排和归并排序是分治算法的体现 <br></p><h2 id="分治思想的两种实现方式" tabindex="-1"><a class="header-anchor" href="#分治思想的两种实现方式" aria-hidden="true">#</a> 分治思想的两种实现方式</h2><h3 id="递归-自顶向下-1" tabindex="-1"><a class="header-anchor" href="#递归-自顶向下-1" aria-hidden="true">#</a> 递归（自顶向下）</h3><p>凡是递归能实现的，都是分治思想 <br></p><h4 id="回溯-递归的一种" tabindex="-1"><a class="header-anchor" href="#回溯-递归的一种" aria-hidden="true">#</a> 回溯（递归的一种）</h4><p>回溯算法是一种试探算法，与暴力搜索最大的区别是：在回溯算法中，是一步步向前试探，对每一步探测的情况评估，再决定是否继续，可避免走弯路。 <br><strong>想采用回溯算法，就必须保证：每次都有多种尝试的可能。</strong> <br><strong>有很多选择</strong>，选择了一种走下去，走完了再回到原来的状态选择第二种走法 <br> 这种<strong>回到原来的状态选择下一种</strong>的情况就是<strong>回溯</strong> <br> 发现已经不符合条件，再走下去没有必要，<strong>提前结束</strong>，就是<strong>剪枝</strong>（只有回溯这里才有剪枝） <br> 回溯算法的特征： <br></p><ol><li>深度优先搜索：回溯算法一般采用dfs求解 <br></li><li>终止条件判定：是否不满足条件或达到最优解 <br></li><li>遍历空间集 <br></li><li>剪枝：在遍历空间集是，提前将不符合条件的除掉（搜索过程中的优化，避免做无用功导致超时） <br></li><li>加入元素：表明选择当前空间，然后进行该空间的dfs <br></li><li>移除元素（回溯）：表明当前空间以dfs完成，需要返回上一轮，重新选择一个空间进行探索 <br></li></ol><p>回溯应用场景：正则表达式匹配、编译原理中的语法分析。 <br> 经典算法场景：数独、八皇后、0-1背包、图的着色、旅行商问题、全排列等等。 <br></p><h5 id="八皇后问题" tabindex="-1"><a class="header-anchor" href="#八皇后问题" aria-hidden="true">#</a> 八皇后问题</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 全局或成员变量, 下标表示行, 值表示 queen 存储在哪一列 &lt;br/&gt;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cal8queens</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 调用方式：cal8queens(0); &lt;br/&gt;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 8 个棋子都放置好了，打印结果 &lt;br/&gt;</span>
    <span class="token function">printQueens</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 8 行棋子都放好了，已经没法再往下递归了，所以就 return &lt;br/&gt;</span>
<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> column <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> column <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token operator">++</span>column<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 每一行都有 8 中放法 &lt;br/&gt;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isOk</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> column<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 有些放法不满足要求 &lt;br/&gt;</span>
        result<span class="token punctuation">[</span>row<span class="token punctuation">]</span> <span class="token operator">=</span> column<span class="token punctuation">;</span> <span class="token comment">// 第 row 行的棋子放到了 column 列 &lt;br/&gt;</span>
        <span class="token function">cal8queens</span><span class="token punctuation">(</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 考察下一行 &lt;br/&gt;</span>
    <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isOk</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> column<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 判断 row 行 column 列放置是否合适 &lt;br/&gt;</span>
    <span class="token keyword">int</span> leftup <span class="token operator">=</span> column <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> rightup <span class="token operator">=</span> column <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> row<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 逐行往上考察每一行 &lt;br/&gt;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> column<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 第 i 行的 column 列有棋子吗？ &lt;br/&gt;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>leftup <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 考察左上对角线：第 i 行 leftup 列有棋子吗？ &lt;br/&gt;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> leftup<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>rightup <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 考察右上对角线：第 i 行 rightup 列有棋子吗？ &lt;br/&gt;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> rightup<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">--</span>leftup<span class="token punctuation">;</span> <span class="token operator">++</span>rightup<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">printQueens</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 打印出一个二维矩阵 &lt;br/&gt;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> row <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token operator">++</span>row<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> column <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> column <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token operator">++</span>column<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span>row<span class="token punctuation">]</span> <span class="token operator">==</span> column<span class="token punctuation">)</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Q &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
            <span class="token keyword">else</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;* &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_0-1背包" tabindex="-1"><a class="header-anchor" href="#_0-1背包" aria-hidden="true">#</a> 0-1背包</h5><p>这个问题的经典解法是动态规划，不过还有一种简单但没有那么高效的解法，那就是回溯算法。 <br> 0-1 背包问题有很多变体，我这里介绍一种比较基础的。我们有一个背包，背包总的承载重 量是 Wkg。现在我们有 n 个物品，每个物品的重量不等，并且不可分割。我们现在期望选 择几件物品，装载到背包中。在不超过背包所能装载重量的前提下，如何让背包中物品的总 重量最大？ <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> maxW <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">;</span> <span class="token comment">// 存储背包中物品总重量的最大值 &lt;br/&gt;</span>
<span class="token comment">// cw 表示当前已经装进去的物品的重量和；i 表示考察到哪个物品了； &lt;br/&gt;</span>
<span class="token comment">// w 背包重量；items 表示每个物品的重量；n 表示物品个数 &lt;br/&gt;</span>
<span class="token comment">// 假设背包可承受重量 100，物品个数 10，物品重量存储在数组 a 中，那可以这样调用函数： &lt;br/&gt;</span>
<span class="token comment">// f(0, 0, a, 10, 100) &lt;br/&gt;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> cw<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> items<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cw <span class="token operator">==</span> w <span class="token operator">||</span> i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// cw==w 表示装满了 ;i==n 表示已经考察完所有的物品 &lt;br/&gt;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cw <span class="token operator">&gt;</span> maxW<span class="token punctuation">)</span> maxW <span class="token operator">=</span> cw<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token function">f</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> cw<span class="token punctuation">,</span> items<span class="token punctuation">,</span> n<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cw <span class="token operator">+</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 已经超过可以背包承受的重量的时候，就不要再装了 &lt;br/&gt;</span>
        <span class="token function">f</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cw <span class="token operator">+</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> items<span class="token punctuation">,</span> n<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a> 正则表达式</h5><p>正则表达式里最重要的一种算法思想就是回溯。 <br> 假设正表达式中只包含“<em>”和“?”这两种通配符，其中，“</em>”匹配任意多个（大于等于 0 个）任意字符，“?”匹配零个或者一个任意字符。基于以上背景假设，我们看下，如何用回溯算法，判断一个给定的文本，能否跟给定的正则表达式匹配？ <br> 我们依次考察正则表达式中的每个字符，当是非通配符时，我们就直接跟文本的字符进行匹 配，如果相同，则继续往下处理；如果不同，则回溯。 <br> 如果遇到特殊字符的时候，我们就有多种处理方式了，也就是所谓的岔路口，比如“*”有 多种匹配方案，可以匹配任意个文本串中的字符，我们就先随意的选择一种匹配方案，然后 继续考察剩下的字符。如果中途发现无法继续匹配下去了，我们就回到这个岔路口，重新选 择一种匹配方案，然后再继续匹配剩下的字符。 <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pattern</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> matched <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token keyword">private</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pattern<span class="token punctuation">;</span> <span class="token comment">// 正则表达式 &lt;br/&gt;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> plen<span class="token punctuation">;</span> <span class="token comment">// 正则表达式长度 &lt;br/&gt;</span>
    <span class="token keyword">public</span> <span class="token class-name">Pattern</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pattern<span class="token punctuation">,</span> <span class="token keyword">int</span> plen<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>pattern <span class="token operator">=</span> pattern<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>plen <span class="token operator">=</span> plen<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> tlen<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 文本串及长度 &lt;br/&gt;</span>
        matched <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token function">rmatch</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> text<span class="token punctuation">,</span> tlen<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token keyword">return</span> matched<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rmatch</span><span class="token punctuation">(</span><span class="token keyword">int</span> ti<span class="token punctuation">,</span> <span class="token keyword">int</span> pj<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> tlen<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>matched<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 如果已经匹配了，就不要继续递归了 &lt;br/&gt;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pj <span class="token operator">==</span> plen<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 正则表达式到结尾了 &lt;br/&gt;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ti <span class="token operator">==</span> tlen<span class="token punctuation">)</span> matched <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 文本串也到结尾了 &lt;br/&gt;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">[</span>pj<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;*&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// * 匹配任意个字符 &lt;br/&gt;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> tlen<span class="token operator">-</span>ti<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
                <span class="token function">rmatch</span><span class="token punctuation">(</span>ti<span class="token operator">+</span>k<span class="token punctuation">,</span> pj<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> text<span class="token punctuation">,</span> tlen<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
            <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">[</span>pj<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;?&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// ? 匹配 0 个或者 1 个字符 &lt;br/&gt;</span>
            <span class="token function">rmatch</span><span class="token punctuation">(</span>ti<span class="token punctuation">,</span> pj<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> text<span class="token punctuation">,</span> tlen<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
            <span class="token function">rmatch</span><span class="token punctuation">(</span>ti<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> pj<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> text<span class="token punctuation">,</span> tlen<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ti <span class="token operator">&lt;</span> tlen <span class="token operator">&amp;&amp;</span> pattern<span class="token punctuation">[</span>pj<span class="token punctuation">]</span> <span class="token operator">==</span> text<span class="token punctuation">[</span>ti<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 纯字符匹配才行 &lt;br/&gt;</span>
            <span class="token function">rmatch</span><span class="token punctuation">(</span>ti<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> pj<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> text<span class="token punctuation">,</span> tlen<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动态规划-自底向上-属于迭代" tabindex="-1"><a class="header-anchor" href="#动态规划-自底向上-属于迭代" aria-hidden="true">#</a> 动态规划（自底向上，属于迭代）</h3><p>迭代实现分治思想，称为动态规划。 <br> 递归和动态规划是从保存过程信息角度划分的。 <br> 动态规划可以解决递归时重复子问题反复求解超时的问题。 <br> 每个动态规划，都能用递归实现，比循环更容易理解。 <br> 动态规划特征： <br></p><ol><li>最优子结构：求得每个子问题的全局最优解 <br></li><li>重叠子问题 <br></li><li>状态初始化 <br></li><li>状态转移方程 <br></li></ol><p>动态规划理论：一个模型三个特征 <br> 一个模型：多阶段决策最优解模型（动态规划适合解决的问题的模型） <br> 三个特征（需要满足才可用动态规划求解）： <br></p><ol><li>最优子结构：可以通过子问题的最优解，推导出问题的最优解。 <br></li><li>无后效性： 前面阶段的状态确定之后，不会被后面阶段的决策所改变。 <br></li><li>重复子问题：可能存在重复子问题。 <br></li></ol><p>动态规划解题思路 <br></p><ol><li>状态转移矩阵 <br></li><li>状态转移方程 <br></li></ol><p>动态规划是空间换时间的解决思路 <br> 降低空间消耗：二维转一维数组。如果每层的计算只用到已经计算好的一层数据，那就可以把二维转为一维。用到上一层，从小到大遍历。用到本层，从大到小遍历。 <br></p><h4 id="贪心-动态规划的一种" tabindex="-1"><a class="header-anchor" href="#贪心-动态规划的一种" aria-hidden="true">#</a> 贪心（动态规划的一种）</h4><p><strong>贪心和动态规划是从全局最优角度划分的： <br> 能从局部最优推导出全局最优就是贪心，否则就是动态规划。</strong> <br> 局部最优解 <br> 性质：只适用于求解可行解，不适用于求最值以及所有解 <br> 贪心算法中，作出的每步贪心决策都无法改变，因为贪心策略是由上一步的最优解推导下一步的最优解，而上一部之前的最优解则不作保留。 <br> 贪心算法特征： <br></p><ol><li>最优子结构：求得每个子问题的局部最优解 <br></li><li>无后效性：某个状态以后的过程不会影响以前的状态，只与当前状态有关 <br></li><li>贪心选择性：能从局部最优推导出全局最优 <br></li></ol>`,53),k=[i];function u(d,b){return s(),a("div",null,k)}const g=n(r,[["render",u],["__file","1.分治思想_递归实现.html.vue"]]);export{g as default};
