const e=JSON.parse('{"key":"v-00585f4c","path":"/cs/RPC.html","title":"RPC","lang":"en-US","frontmatter":{"icon":"lightbulb","description":"RPC 有了解过dubbo吗，简单介绍下dubbo结构。 如何做服务隔离。简单介绍下hystrix。 如何设计个rpc框架。 Dubbo 服务注册/发现 Dubbo的服务注册与发现机制: 4类角色: 消费者、提供者、注册中心、Monitor Registry原理 以Dubbo最常用的Zookeeper来介绍 zk里的存储: 每一个服务的存储的目录结构为/dubbo/{serviceName} ， 其中serviceName为Provider的{包名}.{类名} 下面有4个子文件夹，分别存储:","head":[["meta",{"property":"og:url","content":"https://liz-in-tech.github.io/pinkpig/cs/RPC.html"}],["meta",{"property":"og:site_name","content":"Liz"}],["meta",{"property":"og:title","content":"RPC"}],["meta",{"property":"og:description","content":"RPC 有了解过dubbo吗，简单介绍下dubbo结构。 如何做服务隔离。简单介绍下hystrix。 如何设计个rpc框架。 Dubbo 服务注册/发现 Dubbo的服务注册与发现机制: 4类角色: 消费者、提供者、注册中心、Monitor Registry原理 以Dubbo最常用的Zookeeper来介绍 zk里的存储: 每一个服务的存储的目录结构为/dubbo/{serviceName} ， 其中serviceName为Provider的{包名}.{类名} 下面有4个子文件夹，分别存储:"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-10-29T16:42:17.000Z"}],["meta",{"property":"article:author","content":"Liz"}],["meta",{"property":"article:modified_time","content":"2024-10-29T16:42:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RPC\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-29T16:42:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Liz\\",\\"url\\":\\"https://github.com/liz-in-tech\\"}]}"]]},"headers":[{"level":2,"title":"服务注册/发现","slug":"服务注册-发现","link":"#服务注册-发现","children":[]},{"level":2,"title":"Registry原理","slug":"registry原理","link":"#registry原理","children":[]},{"level":2,"title":"服务调用","slug":"服务调用","link":"#服务调用","children":[{"level":3,"title":"负载均衡","slug":"负载均衡","link":"#负载均衡","children":[]},{"level":3,"title":"路由","slug":"路由","link":"#路由","children":[]},{"level":3,"title":"故障转移","slug":"故障转移","link":"#故障转移","children":[]}]},{"level":2,"title":"网络通信模型","slug":"网络通信模型","link":"#网络通信模型","children":[{"level":3,"title":"通信协议","slug":"通信协议","link":"#通信协议","children":[]},{"level":3,"title":"Dispatcher","slug":"dispatcher","link":"#dispatcher","children":[]}]},{"level":2,"title":"灵活扩展机制","slug":"灵活扩展机制","link":"#灵活扩展机制","children":[]},{"level":2,"title":"泛化调用","slug":"泛化调用","link":"#泛化调用","children":[]}],"git":{"createdTime":1730220137000,"updatedTime":1730220137000,"contributors":[{"name":"unknown","email":"15721607377@163.com","commits":1}]},"readingTime":{"minutes":8.57,"words":2571},"filePathRelative":"cs/RPC.md","localizedDate":"October 29, 2024","excerpt":"<h1> RPC</h1>\\n<p>有了解过dubbo吗，简单介绍下dubbo结构。 <br>\\n如何做服务隔离。简单介绍下hystrix。 <br>\\n如何设计个rpc框架。 <br></p>\\n<h1> Dubbo</h1>\\n<h2> 服务注册/发现</h2>\\n<p>Dubbo的服务注册与发现机制: <br>\\n <br></p>\\n<p>4类角色: 消费者、提供者、注册中心、Monitor <br></p>\\n<h2> Registry原理</h2>\\n<p>以Dubbo最常用的Zookeeper来介绍 <br></p>\\n<p>zk里的存储: <br>\\n <br>\\n每一个服务的存储的目录结构为/dubbo/{serviceName} ，   其中serviceName为Provider的{包名}.{类名} <br>\\n下面有4个子文件夹，分别存储: <br></p>","autoDesc":true}');export{e as data};
