const t=JSON.parse('{"key":"v-03df395c","path":"/cs/code/data_structure/1.%E6%95%B0%E7%BB%84.html","title":"数组","lang":"en-US","frontmatter":{"icon":"lightbulb","description":"数组 特点 属于线性表 线性表，只有前后两个方向：数组、链表、栈、队列 非线性表：树、图 连续的内存空间和相同类型的数据 优：随机访问O(1) 随机访问是指通过下标访问。 查找 != 随机访问，即便是排好序的用二分查找，时间复杂度为O(logn)） 缺：增删元素要做大量的数据搬移工作(O(n)","head":[["meta",{"property":"og:url","content":"https://liz-in-tech.github.io/pinkpig/cs/code/data_structure/1.%E6%95%B0%E7%BB%84.html"}],["meta",{"property":"og:site_name","content":"Liz"}],["meta",{"property":"og:title","content":"数组"}],["meta",{"property":"og:description","content":"数组 特点 属于线性表 线性表，只有前后两个方向：数组、链表、栈、队列 非线性表：树、图 连续的内存空间和相同类型的数据 优：随机访问O(1) 随机访问是指通过下标访问。 查找 != 随机访问，即便是排好序的用二分查找，时间复杂度为O(logn)） 缺：增删元素要做大量的数据搬移工作(O(n)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-10-29T16:42:17.000Z"}],["meta",{"property":"article:author","content":"Liz"}],["meta",{"property":"article:modified_time","content":"2024-10-29T16:42:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数组\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-29T16:42:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Liz\\",\\"url\\":\\"https://github.com/liz-in-tech\\"}]}"]]},"headers":[{"level":2,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":2,"title":"如何做到随机访问：一维数组的内存寻址公式","slug":"如何做到随机访问-一维数组的内存寻址公式","link":"#如何做到随机访问-一维数组的内存寻址公式","children":[]},{"level":2,"title":"改进低效插入（应用：快排）","slug":"改进低效插入-应用-快排","link":"#改进低效插入-应用-快排","children":[]},{"level":2,"title":"改进低效删除（应用：JVM的标记清除垃圾回收算法）","slug":"改进低效删除-应用-jvm的标记清除垃圾回收算法","link":"#改进低效删除-应用-jvm的标记清除垃圾回收算法","children":[]},{"level":2,"title":"容器能否完全替代数组？","slug":"容器能否完全替代数组","link":"#容器能否完全替代数组","children":[{"level":3,"title":"ArrayList优势","slug":"arraylist优势","link":"#arraylist优势","children":[]},{"level":3,"title":"用数组更适合的情况","slug":"用数组更适合的情况","link":"#用数组更适合的情况","children":[]}]}],"git":{"createdTime":1730220137000,"updatedTime":1730220137000,"contributors":[{"name":"unknown","email":"15721607377@163.com","commits":1}]},"readingTime":{"minutes":2.38,"words":713},"filePathRelative":"cs/code/data_structure/1.数组.md","localizedDate":"October 29, 2024","excerpt":"<h1> 数组</h1>\\n<h2> 特点</h2>\\n<ol>\\n<li>属于线性表 <br></li>\\n</ol>\\n<p>线性表，只有前后两个方向：数组、链表、栈、队列 <br>\\n非线性表：树、图 <br></p>\\n<ol start=\\"2\\">\\n<li>连续的内存空间和相同类型的数据 <br></li>\\n<li>优：随机访问O(1) <br></li>\\n</ol>\\n<p>随机访问是指通过下标访问。 <br>\\n查找 != 随机访问，即便是排好序的用二分查找，时间复杂度为O(logn)） <br></p>\\n<ol start=\\"4\\">\\n<li>缺：增删元素要做大量的数据搬移工作(O(n) <br></li>\\n</ol>","autoDesc":true}');export{t as data};
