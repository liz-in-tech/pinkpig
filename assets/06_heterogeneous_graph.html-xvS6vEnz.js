import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as h,c as d,a as e,b as a,d as t,e as i}from"./app-I9eu-1La.js";const s="/pinkpig/assets/hetero_and_homo-m8J-lcv2.png",p="/pinkpig/assets/hetero_graph_relation-5Off0QUo.png",c="/pinkpig/assets/hetero_graph_example-EL36ne31.png",l={},_=i('<h1 id="pyg-heterogeneous-graph-practice" tabindex="-1"><a class="header-anchor" href="#pyg-heterogeneous-graph-practice" aria-hidden="true">#</a> PyG Heterogeneous Graph Practice</h1><h2 id="_1-gnn和transformer的关系" tabindex="-1"><a class="header-anchor" href="#_1-gnn和transformer的关系" aria-hidden="true">#</a> 1. GNN和transformer的关系</h2><p>transformer没有先验知识，会算每个与其他的关系</p><p>而GNN有人定义的关系，有先验知识，只会算相连的关系</p><h2 id="_2-同构图与异构图" tabindex="-1"><a class="header-anchor" href="#_2-同构图与异构图" aria-hidden="true">#</a> 2. 同构图与异构图</h2><figure><img src="'+s+'" alt="同构图与异构图" tabindex="0" loading="lazy"><figcaption>同构图与异构图</figcaption></figure><p>同构图和异构图解决的问题都是一样的，都是提取Node的特征</p><p>图的每个Node要考虑相连的Node，如Node2与Node1和Node5相邻，Node2自身占比0.5，Node1占比0.3，Node5占比0.2，共同组成Node2的特征</p><h3 id="_2-1-同构图" tabindex="-1"><a class="header-anchor" href="#_2-1-同构图" aria-hidden="true">#</a> 2.1. 同构图</h3><p>不区分节点和边的类型，节点和边都只有一种类型</p><p>点类型+边类型=2</p><p>例如，在社交网络中，可以想象node只有‘人’这一个种类，edge只有‘认识’这一种连接。而人和人要么认识，要么不认识。</p><h3 id="_2-2-异构图" tabindex="-1"><a class="header-anchor" href="#_2-2-异构图" aria-hidden="true">#</a> 2.2. 异构图</h3><p>点的类型或边的类型超过一种</p><p>点类型+边类型&gt;2</p><p>现实世界中，大多数图都是异构图，表示了关于不同类型实体及其不同类型关系的信息。不同类型的点和边的特征表示类型和维度可以不相同。</p><p>多种关系，各自是各自的特征矩阵，把每种关系的特征进行拼接</p><p>做拼接或做加法都行，大框架固定，细节任意</p><p>不同类型点的特征维度不同，通过embedding映射到相同维度，embedding就是把点的特征给做出来</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-2-1-元路径-meta-path" tabindex="-1"><a class="header-anchor" href="#_2-2-1-元路径-meta-path" aria-hidden="true">#</a> 2.2.1. 元路径 meta-path</h4><p>元路径是异质图里的概念</p><p>按照什么样的关系，找什么样的邻居</p><p>不同的元路径做加权</p><h2 id="_3-图神经网络框架" tabindex="-1"><a class="header-anchor" href="#_3-图神经网络框架" aria-hidden="true">#</a> 3. 图神经网络框架</h2><h3 id="_3-1-pyg" tabindex="-1"><a class="header-anchor" href="#_3-1-pyg" aria-hidden="true">#</a> 3.1. PyG</h3>',26),g={href:"https://pytorch-geometric.readthedocs.io/en/latest/notes/heterogeneous.html?highlight=Heterogeneous#creating-heterogeneous-gnns",target:"_blank",rel:"noopener noreferrer"},f=e("h3",{id:"_3-2-dgl",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_3-2-dgl","aria-hidden":"true"},"#"),a(" 3.2. DGL")],-1),u={href:"https://docs.dgl.ai/en/1.1.x/guide_cn/graph-heterogeneous.html",target:"_blank",rel:"noopener noreferrer"},m=i('<h2 id="_4-案例" tabindex="-1"><a class="header-anchor" href="#_4-案例" aria-hidden="true">#</a> 4. 案例</h2><p><img src="'+c+'" alt="异构图案例" loading="lazy"> 这个异构图有1939743个节点，分为4种类型：作者author, 论文paper, 机构institution，研究领域field of study。 有21111007个边，也分为4种类型：</p><ul><li>写writes：一位作者[写]一篇特定的论文</li><li>隶属于affiliated with：一位作者[隶属于]一个特定的机构</li><li>引用cites：一篇论文[引用]另一篇论文</li><li>涉及主题has topic：一篇论文[涉及]特定领域的[主题]</li></ul><h2 id="_5-邻居加载" tabindex="-1"><a class="header-anchor" href="#_5-邻居加载" aria-hidden="true">#</a> 5. 邻居加载</h2><p>https://pytorch-geometric.readthedocs.io/en/latest/tutorial/neighbor_loader.html</p>',5);function x(b,N){const r=o("ExternalLinkIcon");return h(),d("div",null,[_,e("p",null,[e("a",g,[a("PyG异构图指南"),t(r)])]),f,e("p",null,[e("a",u,[a("DGL异构图指南"),t(r)])]),m])}const G=n(l,[["render",x],["__file","06_heterogeneous_graph.html.vue"]]);export{G as default};
