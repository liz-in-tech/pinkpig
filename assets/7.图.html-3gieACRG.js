import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as e,c,a as n,b as s,d as l,e as a}from"./app-CV1ZlhnZ.js";const r="/pinkpig/assets/7.图-1-Zi0b0fwm.png",i="/pinkpig/assets/7.图-2-8HlyVxMR.png",u="/pinkpig/assets/7.图-3-nr4wUtQe.png",k="/pinkpig/assets/7.图-4-NmWbz82A.png",d="/pinkpig/assets/7.图-5-CRiH25TP.png",b="/pinkpig/assets/7.图-6-gEYj9S7M.png",m="/pinkpig/assets/7.图-7-SuS9ciRM.png",v="/pinkpig/assets/7.图-8-TCTZmzyD.png",g="/pinkpig/assets/7.图-9-4v9omi9S.png",h="/pinkpig/assets/7.图-10-SmQknGTy.png",y="/pinkpig/assets/7.图-23-qdizqU1A.png",f="/pinkpig/assets/7.图-11-dmMyXVaZ.png",x="/pinkpig/assets/7.图-12-YKDNOSHo.png",w="/pinkpig/assets/7.图-13-B9bXr7yC.png",_="/pinkpig/assets/7.图-14-CaXl1MkQ.png",j="/pinkpig/assets/7.图-15-04v8RdRt.png",G="/pinkpig/assets/7.图-16-8u1Y82gQ.png",E="/pinkpig/assets/7.图-17-xFv8OYIE.png",V="/pinkpig/assets/7.图-18-WZSLhpQv.png",L="/pinkpig/assets/7.图-19-MLu6QMWR.png",S="/pinkpig/assets/7.图-20-87VqdyAL.png",F="/pinkpig/assets/7.图-21-T1_k1wSq.png",T="/pinkpig/assets/7.图-22-USHrbHXB.png",A={},O=_+"#id=tiuhl&originHeight=262&originWidth=592&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=",q=j+"#id=iOxxa&originHeight=298&originWidth=663&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=",M=G+"#id=MlAu2&originHeight=288&originWidth=625&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=",N=E+"#id=G7uQn&originHeight=210&originWidth=738&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=",Q=V+"#id=HmXuL&originHeight=521&originWidth=658&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=",z=L+"#id=lcd4L&originHeight=239&originWidth=708&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=",B=S+"#id=TaeWG&originHeight=403&originWidth=782&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=",D=F+"#id=T47FR&originHeight=484&originWidth=769&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=",H=T+"#id=Tk2sl&originHeight=558&originWidth=615&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=",X=a('<h1 id="图" tabindex="-1"><a class="header-anchor" href="#图" aria-hidden="true">#</a> 图</h1><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><p>顶点（vertex）、边（edge） <br> 度（degree）、入度（In-degree）、出度（Out-degree） <br> 树、森林、环 <br> 无向图、有向图、完全有向图、完全无向图 <br> 连通图、联通分量 <br> 带权图（weighted graph）：每条边都有一个权重（weight） <br></p><h2 id="图的存储" tabindex="-1"><a class="header-anchor" href="#图的存储" aria-hidden="true">#</a> 图的存储</h2><h3 id="邻接矩阵" tabindex="-1"><a class="header-anchor" href="#邻接矩阵" aria-hidden="true">#</a> 邻接矩阵</h3><p>( Adjacency Matrix）--用空间换时间 <br><img src="'+r+'" alt="image.png" loading="lazy"> <br> 优：存储简单，获取两个顶点的关系高效。方便计算， 可以将很多图的运算转换成矩阵之间的运算。比如求解最短路径问题时会提到一个Floyd-Warshall 算法，就是利用矩阵循环相乘若干次得到结果。 <br> 缺：无向图有一半空间是浪费的，稀疏图绝大部分的存储空间都被浪费了。 <br></p><h3 id="邻接表-逆领接表" tabindex="-1"><a class="header-anchor" href="#邻接表-逆领接表" aria-hidden="true">#</a> 邻接表&amp;逆领接表</h3><p>用时间换空间 <br><img src="'+i+'" alt="image.png" loading="lazy"> <br> 优：节省空间 <br> 缺：查询两顶点的关系没那么高效了。 针对这个问题，邻接表还有改进升级版，即将链表换成更加高效的动态数据结构，比如平衡二叉查找树、跳表、散列表等。 <br> 改进：将邻接表中的链表改成平衡二叉查找树。实际开发中，我们可以选择用红黑树。这样，我们就可以更加快速地查找两个顶点之间是否存在边了。当然，这里的二叉查找树可以换成其他动态数据结构，比如跳表、散列表等。除此之外，我们还可以将链表改成有序动态数组，可以通过二分查找的方法来快速定位两个顶点之间否是存在边。 <br></p><h3 id="现实问题中图的存储" tabindex="-1"><a class="header-anchor" href="#现实问题中图的存储" aria-hidden="true">#</a> 现实问题中图的存储</h3><p>1.内存中用邻接表 <br> 2.持久化存储用关系型数据库 <br> 3.超大图并涉及大量图计算，用专业的图数据库。 <br></p><h3 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h3><p>如何存储微博、微信等社交网络中的好友关系？ <br> 微博：用有向图，入度就表示有多少粉丝，出度就表示关注了多少人。 <br> 微信：用无向图。 在带权图中，每条边都有一个权重 （weight），我们可以通过这个权重来表示 QQ 好友间的亲密度。 <br> QQ亲密度：用带权图。 <br></p><p>以微博为例。 <br> 数据结构是为算法服务的，所以具体选择哪种存储方法，与期望支持的操作有关系。针对微博用户关系，假设我们需要支持下面这样几个操作： <br> 判断用户 A 是否关注了用户 B； <br> 判断用户 A 是否是用户 B 的粉丝； <br> 用户 A 关注用户 B； <br> 用户 A 取消关注用户 B； <br> 根据用户名称的首字母排序，分页获取用户的粉丝列表； <br> 根据用户名称的首字母排序，分页获取用户的关注列表。 <br> 因为社交网络是一张稀疏图，使用邻接矩阵存储比较浪费存储空间。所以，这里我们采用邻接表来存 储。 <br> 不过，用一个邻接表来存储这种有向图是不够的。我们去查找某个用户关注了哪些用户非常容易，但是如果要想知道某个用户都被哪些用户关注了，也就是用户的粉丝列表，是非常困难的。 基于此，我们需要一个<strong>逆邻接表</strong>。 <br><img src="'+u+'" alt="image.png" loading="lazy"> <br> 邻接表中存储了用户的关注关系，逆邻接表中存储的是用 户的被关注关系。 <br> 对应到图上，邻接表中，每个顶点的链表中，存储的就是这个顶点指向的顶点，逆邻接表中，每个顶点的链表中，存储的是指向这个顶点的顶点。 <br> 基础的邻接表不适合快速判断两个用户之间是否是关注与被关注的关系，所以我们选择改进 版本，将邻接表中的链表改为<strong>支持快速查找的动态数据结构</strong>。选择哪种动态数据结构呢？<strong>红黑树、跳表、有序动态数组还是散列表</strong>呢？ <br> 因为我们需要按照用户名称的首字母排序，分页来获取用户的粉丝列表或者关注列表，用跳 表这种结构再合适不过了。这是因为，跳表插入、删除、查找都非常高效，时间复杂度是 O(logn)，空间复杂度上稍高，是 O(n)。最重要的一点，跳表中存储的数据本来就是有序 的了，分页获取粉丝列表或关注列表，就非常高效。 <br> 如果对于小规模的数据，比如社交网络中只有几万、几十万个用户，我们可以将整个社交关 系存储在内存中，上面的解决思路是没有问题的。但是如果像微博那样有上亿的用户，数据规模太大，我们就无法全部存储在内存中了。这个时候该怎么办呢？ 我们可以<strong>通过哈希算法等数据分片方式，将邻接表存储在不同的机器上</strong>。你可以看下面这幅图，我们在机器 1 上存储顶点 1，2，3 的邻接表，在机器 2 上，存储顶点 4，5 的邻接 表。逆邻接表的处理方式也一样。当要查询顶点与顶点关系的时候，我们就利用同样的哈希算法，先定位顶点所在的机器，然后再在相应的机器上查找。 <br><img src="'+k+'" alt="image.png" loading="lazy"> <br> 除此之外，我们还有另外一种解决思路，就是利用外部存储（比如硬盘），因为外部存储的存储空间要比内存会宽裕很多。数据库是我们经常用来持久化存储关系数据的，所以我这里介绍一种数据库的存储方式。 我用下面这张表来存储这样一个图。为了高效地支持前面定义的操作，我们可以在表上建立 多个索引，比如第一列、第二列，给这两列都建立索引。 <br><img src="'+d+'" alt="image.png" loading="lazy"> <br></p><h2 id="图相关算法" tabindex="-1"><a class="header-anchor" href="#图相关算法" aria-hidden="true">#</a> 图相关算法</h2><p>图的遍历：dfs,bfs <br> 环的检测：有向图，无向图 <br> 树的检测：有向图，无向图 <br> 并查集（联合-查找算法（Union-Find）） <br> 拓扑排序 <br> 最短路径算法：Dijkstra, Bellman-Ford, Floyd Warshall <br> 连通性相关算法： Kosaraju, tarjan, 求解孤岛的数量， 判断是否为树 <br> 图的着色 <br> 旅行商问题等 <br></p><h2 id="搜索" tabindex="-1"><a class="header-anchor" href="#搜索" aria-hidden="true">#</a> 搜索</h2><table><thead><tr><th></th><th>数据结构</th><th>空间</th><th></th></tr></thead><tbody><tr><td>DFS</td><td>stack</td><td>O(h)</td><td>解决连通性问题，只关心路径存在与否，不在乎其长短</td></tr><tr><td>回溯（恢复现场）剪枝</td><td><br></td><td></td><td></td></tr><tr><td>BFS</td><td>queue</td><td>O(2^h)</td><td>解决最短路径问题</td></tr></tbody></table><h3 id="dfs-深度优先搜索" tabindex="-1"><a class="header-anchor" href="#dfs-深度优先搜索" aria-hidden="true">#</a> DFS（深度优先搜索）</h3><ol><li>核心思想 <br></li></ol><p>从起点出发，选择一个可选方向不断向前，直到无法继续为止。然后常试另外一种方向，直到最后走到终点。 <br></p><ol start="2"><li>复杂度分析 <br></li></ol><p>在执行效率方面，深度优先和广度优先搜索的时间复杂度都是 O(E)，空间复杂度是 O(V) <br></p><p>由于DFS是图论里的算法，分析利用DFS解题的复杂度时，应当借助图论的思想。 <br> 图（V个顶点，E条边）有两种表示方式： <br> 邻接表：访问所有顶点的时间为O(V)，查找所有顶点的邻居的时间为O(E)，所以总的时间复杂度是O(V+E)。 <br> 邻接矩阵：查找每个顶点的邻居需要O(V)的时间，所以查找整个矩阵的时候需要O(V2)的时间。 <br></p><p>利用DFS在迷宫里找一条路径复杂度分析 <br> M行N列的迷宫用矩阵表示， <br> 时间复杂度为O(M<em>N)：可以假设它是一个M行N列的邻接矩阵来进行分析 <br> 空间复杂度为O(M</em>N)：DFS需要堆栈来辅助，在最坏情况下所有顶点都被压入堆栈，因为一共有V==M<em>N个顶点，所以它的空间复杂度是O(V)，即O(M</em>N) <br></p><ol start="3"><li>递归实现 <br></li></ol><p>深度优先搜索用的是回溯思想，非常适合用递归实现。换种说法，深度优先搜索是借助栈来实现的。 <br> 用到三个重要的辅助变量 visited、prev、found <br> found是全局变量， 它的作用是，当 我们已经找到终止顶点 t 之后，我们就不再递归地继续查找了 <br><img src="'+b+'" alt="image.png" loading="lazy"> <br></p><h4 id="回溯剪枝" tabindex="-1"><a class="header-anchor" href="#回溯剪枝" aria-hidden="true">#</a> 回溯剪枝</h4><p>8皇后思路一：每行在第几列上放（共8行） <br> 8皇后思路二：每个格要不要放皇后（共64个格） <br></p><h3 id="bfs-广度优先搜索" tabindex="-1"><a class="header-anchor" href="#bfs-广度优先搜索" aria-hidden="true">#</a> BFS（广度优先搜索）</h3><ol><li>核心思想 <br></li></ol><p>从起始点出发，一层一层地进行，每层当中的点距离起始点的步数都是相同的 <br></p><ol start="2"><li>双端BFS <br></li></ol><p>同时从起始点和终点开始进行的广度优先搜索称为双端BFS。 <br> 双端BFS可以大大地提高搜索的效率。 <br> 例如，想判断社交应用程序中两个人之间需要经过多少朋友介绍才能互相认识。 <br></p><ol start="3"><li>复杂度分析（和DFS的复杂度一致） <br></li></ol><p>在执行效率方面，深度优先和广度优先搜索的时间复杂度都是 O(E)，空间复杂度是 O(V) <br></p><p>由于DFS是图论里的算法，分析利用DFS解题的复杂度时，应当借助图论的思想。 <br> 图（V个顶点，E条边）有两种表示方式： <br> 邻接表：访问所有顶点的时间为O(V)，查找所有顶点的邻居的时间为O(E)，所以总的时间复杂度是O(V+E)。 <br> 邻接矩阵：查找每个顶点的邻居需要O(V)的时间，所以查找整个矩阵的时候需要O(V2)的时间。 <br></p><p>利用BFS在迷宫里找一条路径复杂度分析 <br> M行N列的迷宫用矩阵表示， <br> 时间复杂度为O(M<em>N)：可以假设它是一个M行N列的邻接矩阵来进行分析 <br> 空间复杂度为O(M</em>N)：BFS需要队列来辅助，所有顶点都会入队和出队各一次，在最坏情况下所有顶点都进入队列，因为一共有V==M<em>N个顶点，所以它的空间复杂度是O(V)，即O(M</em>N) <br></p><ol start="4"><li>实现 <br></li></ol><p>广度优先搜索，通俗的理解就是，地毯式层层推进，从起始顶点开始，依次往外遍历。广度优先搜索需要借助队列来实现，遍历得到的路径就是，起始顶点到终止顶点的最短路径。 <br> 用到三个重要的辅助变量 visited、queue、prev <br> visited是用来记录已经被访问的顶点，用来避免顶点被重复访问。如果顶点 q 被访问，那 相应的 visited[q] 会被设置为 true。 <br> queue用来存储已经被访问、但相连的顶点还没有被访问的顶点 <br> prev[w] 存储的是，顶点 w 是从哪 个前驱顶点遍历过来的。 <br><img src="'+m+'" alt="image.png" loading="lazy"> <br></p><ol start="5"><li>从A⾛到B最多允许打通3堵墙，求最短路径的步数 <br></li></ol><p><img src="'+v+'" alt="image.png" loading="lazy"> <br><img src="'+g+'" alt="image.png" loading="lazy"> <br></p><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h3><h2 id="并查集-用dfs做" tabindex="-1"><a class="header-anchor" href="#并查集-用dfs做" aria-hidden="true">#</a> 并查集（用dfs做）</h2><p><img src="'+h+`" alt="image.png" loading="lazy"> <br> 并查集基本操作（近乎O(1)）： <br> 1.将两个集合合并 <br> 2.询问两个元素是否在一个集合当中 <br> 基本原理：每个集合用一棵树来表示。树根的编号，就是整个集合的编号。每个节点存储它的父节点，p[x]表示x的父节点。 <br> 问题1：如何判断树根：if(p[x] == x) <br> 问题2：如何求x的集合编号：while(p[x] != x) x = p[x]; <br> 问题3：如何合并两个集合：px是x的集合编号，py是y的集合编号，则：p[x]=y <br> 优化：路径压缩--&gt;每个直接指向根节点 <br> 添加功能： <br> 连通块中点的数量：只需在并查集基础上加个size[i]代表每个集合的个数，合并时把两个size加起来 <br> Note：最主要是find函数，记住此，其他推导出 <br></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//返回x的祖宗节点，并进行路径压缩 &lt;br/&gt;</span>
<span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token keyword">return</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="最短路径算法" tabindex="-1"><a class="header-anchor" href="#最短路径算法" aria-hidden="true">#</a> 最短路径算法</h2><p><img src="`+y+'" alt="image.png" loading="lazy"> <br></p><h3 id="单源" tabindex="-1"><a class="header-anchor" href="#单源" aria-hidden="true">#</a> 单源</h3><h3 id="多源" tabindex="-1"><a class="header-anchor" href="#多源" aria-hidden="true">#</a> 多源</h3>',49),I={href:"https://www.nowcoder.com/exam/test/73438552/detail?pid=38431372&examPageSource=Company&testCallback=https%3A%2F%2Fwww.nowcoder.com%2Fexam%2Fcompany%3FcurrentTab%3Drecommand%26jobId%3D100%26selectStatus%3D0%26tagIds%3D138&testclass=%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91",target:"_blank",rel:"noopener noreferrer"},R=n("br",null,null,-1),W=n("img",{src:f,alt:"image.png",loading:"lazy"},null,-1),U=n("br",null,null,-1),C=n("img",{src:x,alt:"image.png",loading:"lazy"},null,-1),Y=n("br",null,null,-1),Z=n("img",{src:w,alt:"image.png",loading:"lazy"},null,-1),K=n("br",null,null,-1),P=a(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">import</span> java.util.*<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>

public class Main <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        Scanner sc <span class="token operator">=</span> new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        int n <span class="token operator">=</span> sc.nextInt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        sc.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        char<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map <span class="token operator">=</span> new char<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        char<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map1 <span class="token operator">=</span> new char<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        int<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> H <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>-1, <span class="token number">0</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token number">1</span>, <span class="token number">0</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token number">0</span>, -1<span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token number">0</span>, <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        int ans1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        int ans2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
            map<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sc.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span>.trim<span class="token punctuation">(</span><span class="token punctuation">)</span>.toCharArray<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
            map1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.clone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        //对每个节点进行深度优先递归统计区域个数，并且统计区域内包含的节点 <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j++<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                //节点为房子需要递归。可能一个区域内没有<span class="token string">&#39;#&#39;</span>，那么不需要递归 <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>map1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                    ans1++<span class="token punctuation">;</span> //区域个数也就是商店数量 <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                    List list <span class="token operator">=</span> new ArrayList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//统计本区域内的所有节点 <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                    dfs<span class="token punctuation">(</span>map1, i, j, list<span class="token punctuation">)</span><span class="token punctuation">;</span>//深度优先递归将这个区域内的节点全部遍历 <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                    int min <span class="token operator">=</span> Integer.MAX_VALUE<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                    //将商店设置在coordinate,统计此区域内最小距离和 <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span>Object o <span class="token builtin class-name">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                        int<span class="token punctuation">[</span><span class="token punctuation">]</span> coordinate <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                        int min1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                        int step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> //商店到节点的距离 <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                        //广度优先 <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                        boolean<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flag <span class="token operator">=</span> new boolean<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                        Queue queue <span class="token operator">=</span> new LinkedList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                        queue.offer<span class="token punctuation">(</span>coordinate<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                        flag<span class="token punctuation">[</span>coordinate<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>coordinate<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue.isEmpty<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                            int size <span class="token operator">=</span> queue.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                            <span class="token keyword">for</span> <span class="token punctuation">(</span>int k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> k++<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                                int<span class="token punctuation">[</span><span class="token punctuation">]</span> poll <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>queue.poll<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                                int x <span class="token operator">=</span> poll<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>, y <span class="token operator">=</span> poll<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                                //如果此节点是房子，那么需要统计距离 <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                                    min1 <span class="token operator">+=</span> step<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                                <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                                <span class="token keyword">for</span> <span class="token punctuation">(</span>int l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> l++<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                                    int xx <span class="token operator">=</span> x + H<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                                    int yy <span class="token operator">=</span> y + H<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                                    //超过边界或者不是此区域或者遍历过 则不加入队列 <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>xx <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> xx <span class="token operator">&gt;=</span> n <span class="token operator">||</span> yy <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> yy <span class="token operator">&gt;=</span> n <span class="token operator">||</span> map<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">[</span>yy<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;*&#39;</span> <span class="token operator">||</span> flag<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">[</span>yy<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                                        <span class="token builtin class-name">continue</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                                    <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                                    queue.offer<span class="token punctuation">(</span>new int<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>xx, yy<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                                    //标记已遍历 <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                                    flag<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">[</span>yy<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                                <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                            <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                            step++<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                        <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                        //求出此区域内的最小距离和 <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                        min <span class="token operator">=</span> Math.min<span class="token punctuation">(</span>min1, min<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                    <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                    //总的距离和 <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                    ans2 <span class="token operator">+=</span> min<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
                <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
            <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        System.out.println<span class="token punctuation">(</span>ans1 + <span class="token string">&quot; &quot;</span> + ans2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
    <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
    /** <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
     *  <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
     * @param map 备份的地图 <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
     * @param x 纵坐标 <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
     * @param y 横坐标 <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
     * @param list 统计此区域内的节点 <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
     */ <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
    public static void dfs<span class="token punctuation">(</span>char<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map, int x, int y, List list<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        int n <span class="token operator">=</span> map.length<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> x <span class="token operator">&gt;=</span> n <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">&gt;=</span> n <span class="token operator">||</span> map<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
            <span class="token builtin class-name">return</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        list.add<span class="token punctuation">(</span>new int<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>x, y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        //标记已遍历 <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        map<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        //遍历上下左右 <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        dfs<span class="token punctuation">(</span>map, x - <span class="token number">1</span>, y, list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        dfs<span class="token punctuation">(</span>map, x + <span class="token number">1</span>, y, list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        dfs<span class="token punctuation">(</span>map, x, y - <span class="token number">1</span>, list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
        dfs<span class="token punctuation">(</span>map, x, y + <span class="token number">1</span>, list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
    <span class="token punctuation">}</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br/<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="生成树" tabindex="-1"><a class="header-anchor" href="#生成树" aria-hidden="true">#</a> 生成树</h2><h2 id="拓扑排序-topological-sort" tabindex="-1"><a class="header-anchor" href="#拓扑排序-topological-sort" aria-hidden="true">#</a> 拓扑排序（Topological Sort）</h2><p>应用场合：拓扑排序就是将图里的顶点按照相连的性质进行排序 <br> 前提：有向且无环 <br> 实现：利用dfs或bfs进行拓扑排序 <br> 时间复杂度：O(n) <br> 统计顶点的入度需要O(n)的时间，接下来每个顶点遍历一次同样需要O(n)的时间 <br></p><h2 id="csdn" tabindex="-1"><a class="header-anchor" href="#csdn" aria-hidden="true">#</a> CSDN</h2>`,5),J=n("p",null,[s("一、图的定义 "),n("br"),s(" （一）图（Graph）是由顶点的有穷非空集合和顶点之间边的集合组成，通常表示为：G(V,E)，其中，G表示一个图，V是图G中顶点的集合，E是图G中边的集合。 "),n("br"),s(" 对于图的定义 "),n("br"),s(" 注意一：线性表中我们把数据元素叫元素，树中将数据元素叫结点 ，在图中数据元素，我们则称之为顶点（Vertex）。 "),n("br"),s(" 注意二：线性表中可以没有数据元素，称为空表。树中可以没有结点，叫做空树。图结构中不允许没有顶点。在定义中，若V是顶点的集合，则强调了顶点集合V有穷非空。 "),n("br"),s(" 注意点三：线性表中，相邻的数据元素之间具有线性关系，树结构中，相邻两层的结点具有层次关系，而图中，任意两个顶点之间都可能有关系，顶点之间的逻辑关系用边来表示，边集可以是空的。 "),n("br"),s(" （二）各种图定义 "),n("br"),n("strong",null,"无向边"),s("：若顶点vi到vj之间的边没有方向，则称这条边为无向边（Edge），用无序偶对（vi,vj）来表示。 "),n("br"),n("strong",null,"无向图"),s("：如果图中任意两个顶点之间的边都是无向边，则称该图为无向图。 "),n("br"),n("strong",null,"有向边（弧）"),s("：若从顶点vi到vj的边有方向，则称这条边为有向边，也称为弧（Arc）。用有序偶对<vi,vj>来表示，vi称为"),n("strong",null,"弧尾"),s("，vj称为"),n("strong",null,"弧头"),s("。 "),n("br"),n("strong",null,"有向图"),s("：如果图中任意两个顶点之间的边都是有向边，则称该图为有向图。 "),n("br"),n("strong",null,"完全图"),s("：如果任意两个顶点之间都存在边叫完全图。 "),n("br"),n("strong",null,"无向完全图"),s("：在无向图中，如果任意两个顶点之间都存在边，则称该图为无向完全图。含有n个顶点的无向完全图有n*（n-1）/2条边。 "),n("br"),n("strong",null,"有向完全图"),s("：在有向图中，如果任意两个顶点之间都存在方向互为相反的两条弧，则称该图为有向完全图。含有n个顶点的有向完全图有n*(n-1)条边。 "),n("br"),n("strong",null,"简单图"),s("：若无重复的边或顶点到自身的边则叫简单图。 "),n("br"),n("strong",null,"稀疏图和稠密图"),s("：有很少条边或弧的图称为稀疏图，反之称为稠密图。 "),n("br"),n("strong",null,"网"),s("：带权的图通常称为网。权可以表示从一个顶点到另一个顶点的距离或耗费。 "),n("br"),n("strong",null,"子图"),s("：假设有两个图G=(V,{E})和G'=(V',{E'})，如果V'"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",null,"⊂")]),n("annotation",{encoding:"application/x-tex"},"\\subset")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),n("span",{class:"mrel"},"⊂")])])]),s("V且E'"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",null,"⊂")]),n("annotation",{encoding:"application/x-tex"},"\\subset")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),n("span",{class:"mrel"},"⊂")])])]),s("E，则称G'为G的子图。 "),n("br"),s(" 图中顶点之间有"),n("strong",null,"邻接点"),s("、"),n("strong",null,"依附"),s("的概念。无向图顶点的边数叫做"),n("strong",null,"度"),s("，有向图顶点分为"),n("strong",null,"入度"),s("和"),n("strong",null,"出度"),s("。 "),n("br"),s(" 图中顶点间存在"),n("strong",null,"路径"),s("，两顶点存在路径则说明是"),n("strong",null,"连通"),s("的，如果路径最终回到起始点则称为"),n("strong",null,"环"),s("，当中不重复叫"),n("strong",null,"简单路径"),s("。若任意两顶点都是连通的，则图就是"),n("strong",null,"连通图"),s("，有向则称"),n("strong",null,"强连通图"),s("。图中有子图，若子图极大连通则就是"),n("strong",null,"连通分量"),s("，有向的则称为"),n("strong",null,"强连通分量"),s("。 "),n("br"),s(" 无向图中连通且n个顶点n-1条边叫"),n("strong",null,"生成树"),s("。有向图中一顶点入度为0其余顶点入度为1的叫"),n("strong",null,"有向树"),s("。一个有向图由若干棵有向树构成"),n("strong",null,"生成森林"),s("。 "),n("br")],-1),$=n("p",null,[s("三、图的存储结构 "),n("br"),s(" （一）邻接矩阵 "),n("br"),s(" 图的邻接矩阵存储方式是用两个数组来表示图。一个以为数组存储图中顶点信息，一个二维数组（称为邻接矩阵）存储图中的边或弧的信息。无向图的边数组是一个对称矩阵。 "),n("br"),s(" 注意：邻接矩阵对稀疏图存在对存储空间的极大浪费。 "),n("br")],-1),nn=n("p",null,[s("无向图： "),n("br"),n("img",{src:O,alt:"",loading:"lazy"}),s(),n("br"),s(" 有向图： "),n("br"),n("img",{src:q,alt:"",loading:"lazy"}),s(),n("br"),s(" 网图（带权的图）： "),n("br"),n("img",{src:M,alt:"",loading:"lazy"}),s(),n("br"),s(" 此有向图的邻接矩阵并不对称。有向图讲究入度和出度，顶点v1的入度为1，正好是第v1列各数之和。顶点v1的出度为2，即第v1行的各数之和。 "),n("br")],-1),sn=a(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">char</span> VertexType<span class="token punctuation">;</span><span class="token comment">/*顶点类型应由用户定义*/</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> EdgeType<span class="token punctuation">;</span><span class="token comment">/*边上的权值类型应由用户定义*/</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXVEX</span> <span class="token expression"><span class="token number">100</span>	</span><span class="token comment">/*最大顶点数，应由用户定义*/</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INFINITY</span> <span class="token expression"><span class="token number">65535</span>	</span><span class="token comment">/*用65535来代表无穷大，一个不可能的极限值，代表不存在*/</span> </span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	VertexType vexs<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>	<span class="token comment">/*顶点表*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	EgdeType arc<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>	<span class="token comment">/*邻接矩阵，可看作边表*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token keyword">int</span> numVertexes<span class="token punctuation">,</span>numEdges<span class="token punctuation">;</span>	<span class="token comment">/*图中当前的顶点数和边数*/</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>MGraph<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>无向网图的创建：时间复杂度为O(n+n2+e)，其中对邻接矩阵的初始化耗费了O(n2)的时间。 <br></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*建立无向网图的邻接矩阵表示*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">CreateMGraph</span><span class="token punctuation">(</span>MGraph <span class="token operator">*</span>G<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">,</span>w<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;输入顶点数和边数：\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d,%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>G<span class="token operator">-&gt;</span>numVertexes<span class="token punctuation">,</span><span class="token operator">&amp;</span>G<span class="token operator">-&gt;</span>numEdges<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*输入顶点数和边数*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token operator">-&gt;</span>numVertexes<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*读入顶点信息，建立顶点表*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>G<span class="token operator">-&gt;</span>vexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token punctuation">}</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token operator">-&gt;</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> G<span class="token operator">-&gt;</span>numVertexes<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
			G<span class="token operator">-&gt;</span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> INFINITY<span class="token punctuation">;</span><span class="token comment">/*邻接矩阵初始化*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> G<span class="token operator">-&gt;</span>numEdges<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*读入numEdges条边，建立邻接矩阵*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;输入边(vi,vj)上的下标i、下标j和权w:\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d,%d,%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>i<span class="token punctuation">,</span><span class="token operator">&amp;</span>j<span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*输入边(vi,vj)上的权w */</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		G<span class="token operator">-&gt;</span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		G<span class="token operator">-&gt;</span>arc<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token operator">-&gt;</span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/*因为是无向图，矩阵对称*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token punctuation">}</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),an=n("p",null,[s("（二）邻接表 "),n("br"),s(" 把数组与链表相结合的存储方式称为邻接表。 "),n("br"),s(" （1）如下图为无向图的邻接表结构： "),n("br"),n("img",{src:N,alt:"",loading:"lazy"}),s(),n("br"),s(" 从图中我们知道，顶点表的各个结点由 data firstedge 两个域表示，data是数据域，存储顶点的信息，firstedge 是指针域，指向边表的第一个结点，即此顶点的第一个邻接点。边表结点由 adjvex和next 两个域组成。 adjvex 是邻接点域，存储某顶点的邻接点在顶点表中的下标， next 则存储指向边表中下一个结点的指针。 "),n("br"),s(" （2）如下图为有向图的邻接表和逆邻接表： "),n("br"),n("img",{src:Q,alt:"",loading:"lazy"}),s(),n("br"),s(" 有向图由于有方向，我们以顶点为弧尾来存储边表，这样很容易得到每个顶点的出度。 "),n("br"),s(" 但有时为了便于确定顶点的入度，我们可以建立一个有向图的逆邻接表，以顶点为弧头来存储边表。 "),n("br"),s(" （3）如下图为带权值的网图 "),n("br"),n("img",{src:z,alt:"",loading:"lazy"}),s(),n("br"),s(" 在边表结点定义中再增加一个weight的数据域，存储权值信息即可。 "),n("br")],-1),tn=a(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">char</span> VertexType<span class="token punctuation">;</span>	<span class="token comment">/*顶点类型应由用户定义*/</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> EdgeType<span class="token punctuation">;</span>	<span class="token comment">/*边上的权值类型应由用户定义*/</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">EdgeNode</span><span class="token punctuation">{</span>	<span class="token comment">/*边表结点*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token keyword">int</span> adjvex<span class="token punctuation">;</span>	<span class="token comment">/*邻接点域，存储该顶点对应的下标*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	EdgeType weight<span class="token punctuation">;</span><span class="token comment">/*用于存储权值，对于非网图可以不需要*/</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token keyword">struct</span> <span class="token class-name">EdgeNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span> <span class="token comment">/*链域，指向下一个邻接点*/</span> 	 <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>EdgeNode<span class="token punctuation">;</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">VertexNode</span><span class="token punctuation">{</span><span class="token comment">/*顶点表结点*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	VertexType data<span class="token punctuation">;</span><span class="token comment">/*顶点域，存储顶点信息*/</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	EdgeNode <span class="token operator">*</span>firstedge<span class="token punctuation">;</span><span class="token comment">/*边表头指针*/</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>VertexNode<span class="token punctuation">,</span>AdjList<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	AdjList adjList<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token keyword">int</span> numVertexes<span class="token punctuation">,</span>numEdges<span class="token punctuation">;</span><span class="token comment">/*图中当前顶点数和边数*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>GraphAdjList<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*建立图的邻接表结构*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">CreateALGraph</span><span class="token punctuation">(</span>GraphAdjList <span class="token operator">*</span>G<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	EdgeNode <span class="token operator">*</span>e<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;输入顶点数和边数：\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d,%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>G<span class="token operator">-&gt;</span>numVertexes<span class="token punctuation">,</span><span class="token operator">&amp;</span>G<span class="token operator">-&gt;</span>numEdges<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token operator">-&gt;</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*读入顶点信息，建立顶点表*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>G<span class="token operator">-&gt;</span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*输入顶点信息*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		G<span class="token operator">-&gt;</span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">/*将边表置为空表*/</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> G<span class="token operator">-&gt;</span>numEdges<span class="token punctuation">;</span>	k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*建立边表*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;输入边(vi,vj)上的顶点序号：\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d,%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>i<span class="token punctuation">,</span><span class="token operator">&amp;</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*输入边(vi,vj)上的顶点序号*/</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		
		e <span class="token operator">=</span> <span class="token punctuation">(</span>EdgeNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>EdgeNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*向内存申请空间，生成边表结点*/</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		e<span class="token operator">-&gt;</span>adjvex <span class="token operator">=</span> j<span class="token punctuation">;</span>	<span class="token comment">/*邻接序号为 j*/</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		e<span class="token operator">-&gt;</span>next <span class="token operator">=</span> G<span class="token operator">-&gt;</span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token punctuation">;</span><span class="token comment">/*将e指针指向当前顶点指向的结点*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		G<span class="token operator">-&gt;</span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge <span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token comment">/*将当前顶点的指针指向e*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	
		e <span class="token operator">=</span> <span class="token punctuation">(</span>EdgeNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>EdgeNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*向内存申请空间，生成边表结点*/</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		e<span class="token operator">-&gt;</span>adjvex <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">/*邻接序号为	i*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		e<span class="token operator">-&gt;</span>next <span class="token operator">=</span> G<span class="token operator">-&gt;</span>adjList<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token punctuation">;</span><span class="token comment">/*将e指针指向当前顶点指向的结点*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		G<span class="token operator">-&gt;</span>adjList<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge <span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token comment">/*将当前顶点的指针指向e*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token punctuation">}</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),pn=n("p",null,[s("这里是应用了我们在单链表创建中讲解到的头插法。由于对于无向图，一条边对应都是两个顶点，所以在循环中，一次就针对i和j分别进行了插入。本算法的时间复杂度，对于n个顶点e条边来说，很容易得出是O(n+e)。 "),n("br"),s(" （三）十字链表 "),n("br"),s(" 对于有向图来说，邻接表是有缺陷的。关心了出度问题，想了解入度就必须要遍历整个图才能知道，反之，逆邻接表解决了入度却不了解出度的情况。有没有可能把邻接表和逆邻接表结合起来呢？答案是肯定的，就是把它们整合在一起，这就是我们要讲的有向图的一种存储方法：十字链表。 "),n("br"),n("img",{src:B,alt:"",loading:"lazy"}),s(),n("br"),s(" 十字链表的好处就是因为把邻接表和逆邻接表整合在了一起，这样既容易找到以V1为尾的弧，也容易找到以V1为头的弧，因而容易求得顶点的出度和入度。而且它除了结构复杂一点外，其实创建图算法的时间复杂度是和邻接表相同的，因此，在有向图的应用中，十字链表是非常好的数据结构模型。 "),n("br"),s(" 四、图的遍历 "),n("br"),s(" 从图中某一顶点出发访遍图中其余顶点，且使每一个顶点仅被访问一次，这一过程就叫做图的遍历。需要在遍历过程中把访问过的顶点打上标记，以避免访问多次。具体办法是设置一个访问数组visited[n]，n是图中顶点的个数，初值为0，访问过后设置为1。通常有两种遍历次序方案：深度优先搜索（DFS）和广度优先搜索(BFS)。 "),n("br"),s(" （一）深度优先搜索 "),n("br"),n("img",{src:D,alt:"",loading:"lazy"}),s(),n("br"),s(" 从顶点A开始，在没有碰到重复顶点的情况下，始终向右手边走。再无通路没走过，就返回到上一个顶点，直到返回顶点A。 "),n("br"),s(" 深度优先搜索其实就是一个递归的过程，用栈实现，其转换成右图后，就是一棵树的前序遍历。 "),n("br")],-1),on=a(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">int</span> Boolean<span class="token punctuation">;</span><span class="token comment">/*Boolean是布尔类型，其值是TRUE或FALSE*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
Boolean visited<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/*访问标志的数组*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token comment">/*邻接矩阵的深度优先递归算法*/</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span><span class="token comment">/*把当前顶点标记为已访问*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c &quot;</span><span class="token punctuation">,</span>G<span class="token punctuation">.</span>vexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*打印顶点，也可以其他操作*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
			<span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*对未访问的邻接顶点递归调用*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token punctuation">}</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token comment">/*邻接矩阵的深度遍历操作*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">DFSTraverse</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>	<span class="token comment">/*初始所有顶点状态都是未访问的状态*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*对未访问过的顶点调用DFS,若是连通图，只会执行一次*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
			<span class="token function">DFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">int</span> Boolean<span class="token punctuation">;</span><span class="token comment">/*Boolean是布尔类型，其值是TRUE或FALSE*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
Boolean visited<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/*访问标志的数组*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token comment">/*邻接表的深度优先递归算法*/</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span>GraphAdjList GL<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	
	visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span><span class="token comment">/*把当前顶点标记为已访问*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c &quot;</span><span class="token punctuation">,</span>GL<span class="token operator">-&gt;</span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*打印顶点，也可以其他操作*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	EdgeNode <span class="token operator">*</span>p <span class="token operator">=</span> GL<span class="token operator">-&gt;</span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>p<span class="token operator">-&gt;</span>adjvex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
			<span class="token function">DFS</span><span class="token punctuation">(</span>GL<span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>adjvex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*对未访问的邻接顶点递归调用*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token comment">/*邻接表的深度遍历操作*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">DFSTraverse</span><span class="token punctuation">(</span>GraphAdjList GL<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> GL<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>	<span class="token comment">/*初始所有顶点状态都是未访问的状态*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> GL<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*对未访问过的顶点调用DFS,若是连通图，只会执行一次*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
			<span class="token function">DFS</span><span class="token punctuation">(</span>GL<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),en=n("p",null,[s("（二）广度优先搜索 "),n("br"),n("img",{src:H,alt:"",loading:"lazy"}),s(),n("br"),s(" 用队列实现，先把顶点A入队列，每次把一个顶点出队列，并把该顶点的未访问的邻接点入队列，直到队列为空。再把未访问的顶点入队列，如果是连通图，则队列空也就全部访问完毕。 "),n("br")],-1),cn=a(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*邻接矩阵的广度遍历算法*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">BFSTraverse</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	Queue Q<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*初始化顶点状态为未访问*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> FALSE<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token function">InitQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*初始化一辅助用的队列*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*对每一个顶点做循环*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*若是未访问过*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
			visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span><span class="token comment">/*设置当前顶点访问过*/</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c &quot;</span><span class="token punctuation">,</span>G<span class="token punctuation">.</span>vexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*打印顶点，也可以其他操作*/</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
			<span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*将此顶点入队列*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
			<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*若当前队列不为空*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
				<span class="token function">DeQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*将队中元素出队列，赋值给i*/</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
				<span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
					<span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
						<span class="token comment">/*判断其他顶点若与当前顶点存在边却未访问过*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
						visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span><span class="token comment">/*将找到的此顶点标记为已访问*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
						<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c &quot;</span><span class="token punctuation">,</span>G<span class="token punctuation">.</span>vexs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*打印顶点*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
						<span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*将找到的此顶点入队列*/</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
					<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
				<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
			<span class="token punctuation">}</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		<span class="token punctuation">}</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token punctuation">}</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*邻接表的广度遍历算法*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">BFSTraverse</span><span class="token punctuation">(</span>GraphAdjList GL<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	EdgeNode <span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	Queue Q<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> GL<span class="token operator">-&gt;</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*初始化顶点状态为未访问*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> FALSE<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token function">InitQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*初始化一辅助用的队列*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> GL<span class="token operator">-&gt;</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*对每一个顶点做循环*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*若是未访问过*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
			visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span><span class="token comment">/*设置当前顶点访问过*/</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c &quot;</span><span class="token punctuation">,</span>GL<span class="token operator">-&gt;</span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*打印顶点，也可以其他操作*/</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
			<span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*将此顶点入队列*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
			<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*若当前队列不为空*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
				<span class="token function">DeQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*将队中元素出队列，赋值给i*/</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
				p <span class="token operator">=</span> GL<span class="token operator">-&gt;</span>adjList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token punctuation">;</span><span class="token comment">/*找到当前顶点边表链表头指针*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
				<span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
					<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>p<span class="token operator">-&gt;</span>adjvex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*若此顶点未被访问*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
						visited<span class="token punctuation">[</span>p<span class="token operator">-&gt;</span>adjvex<span class="token punctuation">]</span> <span class="token operator">=</span> TRUE<span class="token punctuation">;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
						<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c &quot;</span><span class="token punctuation">,</span>GL<span class="token operator">-&gt;</span>adjList<span class="token punctuation">[</span>p<span class="token operator">-&gt;</span>adjvex<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
						<span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>adjvex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*将此顶点入队列*/</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
					<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
					p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">/*指针指向下一个邻接点*/</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
				<span class="token punctuation">}</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
			<span class="token punctuation">}</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
		<span class="token punctuation">}</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token punctuation">}</span>  <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>五、图的应用 <br> （一）最小生成树 <br> 一个连通图的生成树是一个极小的连通子图，它含有图中全部的顶点，但只有足以构成一棵树的n-1条边。 <br> 我们把构造连通网的最小代价生成树称为最小生成树。找连通网的最小生成树经典的有两种算法：普里姆算法和克鲁斯卡尔算法。 <br> （1）普里姆算法 <br> （2）克鲁斯卡尔算法 <br> （二）最短路径 <br> 对于网图来说，最短路径，是指两顶点之间经过的边上权值之和最少的路径，并且我们称路径上的第一个顶点是源点，最后一个顶点是终点。非网图可以理解为所有的边的权值都为1的网。 <br> （三）拓扑排序 <br> 在一个表示工程的有向图中，用顶点表示活动，用弧表示活动之间的优先关系，这样的有向图为顶点表示活动的网，我们称为AOV网。AOV网中的弧表示活动之间存在的某种制约关系。AOV网中不能存在回路。 <br> 设G=(V,E)是一个具有n个顶点的有向图，V中的顶点序列v1,v2,...,vn，满足若从顶点vi到vj有一条路径，则在顶点序列中顶点vi必在顶点vj之前。则我们称这样的顶点序列为一个拓扑序列。 <br> 所谓拓扑排序，其实就是对一个有向图构造拓扑序列的过程。构造时会有两个结 <br> 果，如果此网的全部顶点都被输出，则说明它是不存在环(回路)的 AOV网；如果输 <br> 出顶点数少了，哪怕是少了一个，也说明这个网存在环(回路)，不是 AOV 网。 <br> 对AOV 网进行拓扑排序的基本思路是：从 AOV网中选择一个入度为0的顶点输出，然后删去此顶点，并删除以此顶点为尾的弧，继续重复此步骤，直到输出全部顶点或者AOV网中不存在入度为0的顶点为止。 <br> 在算法中，我还需要辅助的数据结构——栈，用来存储处理过程中入度为0的顶点，目的是为了避免每个查找时都要去遍历顶点表找有没有入度为0的顶点。 <br> （四）关键路径 <br> 在一个表示工程的带权有向图中，用顶点表示事件，用有向边表示活动，用边上的权值表示活动的持续时间，这种有向图的边表示活动的网，我们称之为 AOE网。我们把路径上各个活动所持续的时间之和称为路径长度，从源点到汇点具有最大长度的路径叫关键路径，在关键路径上的活动叫关键活动。 <br></p>`,3);function ln(rn,un){const t=o("ExternalLinkIcon");return e(),c("div",null,[X,n("p",null,[n("a",I,[s("安排超市"),l(t)]),s(),R,W,s(),U,C,s(),Y,Z,s(),K]),P,J,$,nn,sn,an,tn,pn,on,en,cn])}const bn=p(A,[["render",ln],["__file","7.图.html.vue"]]);export{bn as default};
