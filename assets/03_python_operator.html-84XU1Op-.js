import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as t,d as e,a as n,b as p,f as o}from"./app-EOZBWKNC.js";const i="/pinkpig/assets/variable-NRVx5JaW.png",l="/pinkpig/assets/assignment_operator-YyUMw1FC.png",r="/pinkpig/assets/comparison_operator-7Lgmk781.png",c="/pinkpig/assets/walrus_operator-ETGPjmoA.png",d={},u=n("h1",{id:"python的运算符",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#python的运算符","aria-hidden":"true"},"#"),p(" Python的运算符")],-1),k=n("ul",null,[n("li",null,[n("ol",null,[n("li",null,"变量与常量")])]),n("li",null,[n("ol",{start:"2"},[n("li",null,"运算符 Operators")])]),n("li",null,[n("ol",{start:"3"},[n("li",null,"注释 Comment")])])],-1),m=o(`<h2 id="_1-变量与常量" tabindex="-1"><a class="header-anchor" href="#_1-变量与常量" aria-hidden="true">#</a> 1. 变量与常量</h2><h3 id="_1-1-变量variable" tabindex="-1"><a class="header-anchor" href="#_1-1-变量variable" aria-hidden="true">#</a> 1.1. 变量Variable</h3><h4 id="_1-1-1-变量名规则" tabindex="-1"><a class="header-anchor" href="#_1-1-1-变量名规则" aria-hidden="true">#</a> 1.1.1. 变量名规则</h4><p>组成：大小写字母A-z；数字0-9；下划线_</p><p>开头：以字母或下划线开头；不能以数字开头</p><p>惯例：用下划线分隔开每个词，例如first_name,is_married,engine_rotation_speed</p><p>Note：不能是关键字</p><h4 id="_1-1-2-变量声明" tabindex="-1"><a class="header-anchor" href="#_1-1-2-变量声明" aria-hidden="true">#</a> 1.1.2. 变量声明</h4><p>赋值是将一个变量指向一块存储数据的内存地址</p><p>可以一行声明并赋值一个变量，也可以一行声明并赋值多个变量</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 一行声明并赋值一个变量</span>
first_name <span class="token operator">=</span> <span class="token string">&#39;Asabeneh&#39;</span>
age <span class="token operator">=</span> <span class="token number">250</span>
is_married <span class="token operator">=</span> <span class="token boolean">True</span>
skills <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;HTML&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CSS&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;JS&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;React&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Python&#39;</span><span class="token punctuation">]</span>
person_info <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;firstname&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;Asabeneh&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;lastname&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;Yetayeh&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;country&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;Finland&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;city&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;Helsinki&#39;</span>
<span class="token punctuation">}</span>

<span class="token comment"># 一行声明并赋值多个变量</span>
first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> country<span class="token punctuation">,</span> age<span class="token punctuation">,</span> is_married <span class="token operator">=</span> <span class="token string">&#39;Asabeneh&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Yetayeh&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Helsink&#39;</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token boolean">True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> country<span class="token punctuation">,</span> age<span class="token punctuation">,</span> is_married<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;First name:&#39;</span><span class="token punctuation">,</span> first_name<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Last name: &#39;</span><span class="token punctuation">,</span> last_name<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Country: &#39;</span><span class="token punctuation">,</span> country<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Age: &#39;</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Married: &#39;</span><span class="token punctuation">,</span> is_married<span class="token punctuation">)</span>

<span class="token comment"># 交换值swap</span>
x <span class="token operator">=</span> <span class="token number">3</span>	<span class="token comment">#变量</span>
y <span class="token operator">=</span> <span class="token number">5</span>
x<span class="token punctuation">,</span>y <span class="token operator">=</span> y<span class="token punctuation">,</span>x	<span class="token comment">#交换两变量的值</span>
x<span class="token punctuation">,</span>y <span class="token comment"># 结果为(5, 3)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-1-3-本质" tabindex="-1"><a class="header-anchor" href="#_1-1-3-本质" aria-hidden="true">#</a> 1.1.3. 本质</h4><p>可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量</p><p>把一个变量a赋值给另一个变量b，这个操作实际上是把变量b指向变量a所指向的数据</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>a = &#39;ABC&#39;
b = a
a = &#39;XYZ&#39;
print(b)  # 输出结果是ABC
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+i+'" alt="变量的本质" tabindex="0" loading="lazy"><figcaption>变量的本质</figcaption></figure><h3 id="_1-2-常量-constant" tabindex="-1"><a class="header-anchor" href="#_1-2-常量-constant" aria-hidden="true">#</a> 1.2. 常量 Constant</h3><p>规范：全部大写（eg.PI）</p><p>python并不能保证常量不被修改,其实也是变量</p><h2 id="_2-运算符-operators" tabindex="-1"><a class="header-anchor" href="#_2-运算符-operators" aria-hidden="true">#</a> 2. 运算符 Operators</h2><h3 id="_2-1-赋值运算符-assignment-operators" tabindex="-1"><a class="header-anchor" href="#_2-1-赋值运算符-assignment-operators" aria-hidden="true">#</a> 2.1. 赋值运算符 Assignment Operators</h3><figure><img src="'+l+`" alt="赋值运算符" tabindex="0" loading="lazy"><figcaption>赋值运算符</figcaption></figure><h3 id="_2-2-算术运算符-arithmetic-operators" tabindex="-1"><a class="header-anchor" href="#_2-2-算术运算符-arithmetic-operators" aria-hidden="true">#</a> 2.2. 算术运算符 Arithmetic Operators</h3><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>addition 加</td><td>+</td><td>2 + 3 = 5</td></tr><tr><td>subtraction 减</td><td>-</td><td>3 - 2 = 1</td></tr><tr><td>multiplication 乘</td><td>*</td><td>3 * 2 = 6</td></tr><tr><td>division 除</td><td>/</td><td>3 / 2 = 1.5</td></tr><tr><td>floor division 向下整除</td><td>//</td><td>3 // 2 = 1</td></tr><tr><td>modulus 取模</td><td>%</td><td>3 % 2 = 1</td></tr><tr><td>exponential 求幂</td><td>**</td><td>3 ** 2 = 3 x 3 = 9</td></tr></tbody></table><p>Note：除法分为两种：/和//</p><p>/，除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&gt;&gt;&gt; 9 / 3
3.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>//，称为向下整除，两个整数的除法仍然是整数，即使除不尽</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&gt;&gt;&gt; 10 // 3
3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-比较运算符-comparison-operators" tabindex="-1"><a class="header-anchor" href="#_2-3-比较运算符-comparison-operators" aria-hidden="true">#</a> 2.3. 比较运算符 Comparison Operators</h3><figure><img src="`+r+`" alt="比较运算符" tabindex="0" loading="lazy"><figcaption>比较运算符</figcaption></figure><p>Note：比较运算符支持连续比较</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>&gt;&gt;&gt; <span class="token number">3</span>&gt;<span class="token number">2</span>&gt;<span class="token number">1</span>	#python里这个表达式正确，同<span class="token number">3</span>&gt;<span class="token number">2</span> and <span class="token number">2</span>&gt;<span class="token number">1</span>，而c语言里则不正确，同(<span class="token number">3</span>&gt;<span class="token number">2</span>)&gt;<span class="token number">1</span>
True
&gt;&gt;&gt; <span class="token number">1</span>&lt;<span class="token number">2</span>&lt;<span class="token number">3</span>
True
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了上述的，python还有is，is not，in，not in</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>is</td><td>是，和 == 一样</td></tr><tr><td>is not</td><td>不是，和 != 一样</td></tr><tr><td>in</td><td>在内</td></tr><tr><td>not in</td><td>不在内</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token keyword">is</span> <span class="token number">1</span>
<span class="token operator">&lt;</span>stdin<span class="token operator">&gt;</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span> SyntaxWarning<span class="token punctuation">:</span> <span class="token string">&quot;is&quot;</span> <span class="token keyword">with</span> a literal<span class="token punctuation">.</span> Did you mean <span class="token string">&quot;==&quot;</span>?
<span class="token boolean">True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">4</span> <span class="token keyword">is</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">2</span>
<span class="token operator">&lt;</span>stdin<span class="token operator">&gt;</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span> SyntaxWarning<span class="token punctuation">:</span> <span class="token string">&quot;is&quot;</span> <span class="token keyword">with</span> a literal<span class="token punctuation">.</span> Did you mean <span class="token string">&quot;==&quot;</span>?
<span class="token boolean">True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token number">2</span>
<span class="token operator">&lt;</span>stdin<span class="token operator">&gt;</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span> SyntaxWarning<span class="token punctuation">:</span> <span class="token string">&quot;is not&quot;</span> <span class="token keyword">with</span> a literal<span class="token punctuation">.</span> Did you mean <span class="token string">&quot;!=&quot;</span>?
<span class="token boolean">True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;A&#39;</span> <span class="token keyword">in</span> <span class="token string">&#39;Asab&#39;</span>
<span class="token boolean">True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;B&#39;</span> <span class="token keyword">in</span> <span class="token string">&#39;Asab&#39;</span>
<span class="token boolean">False</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;coding&#39;</span> <span class="token keyword">in</span> <span class="token string">&#39;coding for all&#39;</span>
<span class="token boolean">True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">&#39;B&#39;</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token string">&#39;Asab&#39;</span>
<span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-逻辑运算符-logical-operators" tabindex="-1"><a class="header-anchor" href="#_2-4-逻辑运算符-logical-operators" aria-hidden="true">#</a> 2.4. 逻辑运算符 Logical Operators</h3><p>优先级：not&gt;and&gt;or,优先级与c语言一样</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>and</td><td>与</td></tr><tr><td>or</td><td>或</td></tr><tr><td>not</td><td>非</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token keyword">and</span> <span class="token number">4</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># True - because both statements are true</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token keyword">and</span> <span class="token number">4</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># False - because the second statement is false</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token keyword">and</span> <span class="token number">4</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># False - because both statements are false</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;True and True: &#39;</span><span class="token punctuation">,</span> <span class="token boolean">True</span> <span class="token keyword">and</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token keyword">or</span> <span class="token number">4</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># True - because both statements are true</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token keyword">or</span> <span class="token number">4</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># True - because one of the statements is true</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token keyword">or</span> <span class="token number">4</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># False - because both statements are false</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;True or False:&#39;</span><span class="token punctuation">,</span> <span class="token boolean">True</span> <span class="token keyword">or</span> <span class="token boolean">False</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment"># False - because 3 &gt; 2 is true, then not True gives False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token boolean">True</span><span class="token punctuation">)</span>      <span class="token comment"># False - Negation, the not operator turns true to false</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token boolean">False</span><span class="token punctuation">)</span>     <span class="token comment"># True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token keyword">not</span> <span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token keyword">not</span> <span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment"># False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-海象运算符-walrus-operator" tabindex="-1"><a class="header-anchor" href="#_2-5-海象运算符-walrus-operator" aria-hidden="true">#</a> 2.5. 海象运算符 <code>:=</code> Walrus Operator</h3><p>Python 3.8 版本中引入的一种新语法特性</p><figure><img src="`+c+`" alt="海象运算符" tabindex="0" loading="lazy"><figcaption>海象运算符</figcaption></figure><h2 id="_3-注释-comment" tabindex="-1"><a class="header-anchor" href="#_3-注释-comment" aria-hidden="true">#</a> 3. 注释 Comment</h2><p>单行注释用#号（hash）</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># This is the first comment</span>
<span class="token comment"># This is the second comment</span>
<span class="token comment"># Python is eating the world</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多行注释用三引号&quot;&quot;&quot;（Triple quote ）</p><p>Note：三引号可以支持换行，可以用作多行注释，但自身依旧是字符串</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;This is multiline comment
multiline comment takes multiple lines.
python is eating the world
&quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,49);function b(v,g){return a(),t("div",null,[u,k,e(" more "),m])}const _=s(d,[["render",b],["__file","03_python_operator.html.vue"]]);export{_ as default};
