const n=JSON.parse('{"key":"v-256607b4","path":"/cs/code/algorithm/8.%E7%AE%97%E6%B3%95%E6%8A%80%E5%B7%A7.html","title":"算法技巧","lang":"en-US","frontmatter":{"icon":"lightbulb","description":"算法技巧 前缀和 &amp; 差分 前缀和与差分是互逆的 双指针 举例: 指向不同序列: 两个有序数组/链表的合并 指向相同序列: 快排的双坑法, KMP, 链表判环 核心思想: 利用某些性质，只枚举O(n)个状态 // 不用双指针，则O(n^2) &lt;br/&gt; for (int i=0; i&lt;n; ++i) { &lt;br/&gt; \\tfor (int j=0; j&lt;n; ++j) { &lt;br/&gt; \\t... &lt;br/&gt; } &lt;br/&gt; } &lt;br/&gt; // 用双指针，两个指针总共移动的次数不超过k*n，所以为O(n) &lt;br/&gt; for (int i=0, j=0; i&lt;n; ++i) { &lt;br/&gt; \\twhile (i &lt; j &amp;&amp; check(i, j)) ++j; &lt;br/&gt; ... &lt;br/&gt; } &lt;br/&gt;","head":[["meta",{"property":"og:url","content":"https://liz-in-tech.github.io/pinkpig/cs/code/algorithm/8.%E7%AE%97%E6%B3%95%E6%8A%80%E5%B7%A7.html"}],["meta",{"property":"og:site_name","content":"Liz"}],["meta",{"property":"og:title","content":"算法技巧"}],["meta",{"property":"og:description","content":"算法技巧 前缀和 &amp; 差分 前缀和与差分是互逆的 双指针 举例: 指向不同序列: 两个有序数组/链表的合并 指向相同序列: 快排的双坑法, KMP, 链表判环 核心思想: 利用某些性质，只枚举O(n)个状态 // 不用双指针，则O(n^2) &lt;br/&gt; for (int i=0; i&lt;n; ++i) { &lt;br/&gt; \\tfor (int j=0; j&lt;n; ++j) { &lt;br/&gt; \\t... &lt;br/&gt; } &lt;br/&gt; } &lt;br/&gt; // 用双指针，两个指针总共移动的次数不超过k*n，所以为O(n) &lt;br/&gt; for (int i=0, j=0; i&lt;n; ++i) { &lt;br/&gt; \\twhile (i &lt; j &amp;&amp; check(i, j)) ++j; &lt;br/&gt; ... &lt;br/&gt; } &lt;br/&gt;"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-10-29T16:42:17.000Z"}],["meta",{"property":"article:author","content":"Liz"}],["meta",{"property":"article:modified_time","content":"2024-10-29T16:42:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"算法技巧\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-29T16:42:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Liz\\",\\"url\\":\\"https://github.com/liz-in-tech\\"}]}"]]},"headers":[{"level":2,"title":"前缀和 & 差分","slug":"前缀和-差分","link":"#前缀和-差分","children":[]},{"level":2,"title":"双指针","slug":"双指针","link":"#双指针","children":[]},{"level":2,"title":"离散化","slug":"离散化","link":"#离散化","children":[]}],"git":{"createdTime":1730220137000,"updatedTime":1730220137000,"contributors":[{"name":"unknown","email":"15721607377@163.com","commits":1}]},"readingTime":{"minutes":1.39,"words":418},"filePathRelative":"cs/code/algorithm/8.算法技巧.md","localizedDate":"October 29, 2024","excerpt":"<h1> 算法技巧</h1>\\n<h2> 前缀和 &amp; 差分</h2>\\n<p>前缀和与差分是互逆的 <br></p>\\n<h2> 双指针</h2>\\n<p>举例: <br></p>\\n<ol>\\n<li>指向不同序列: 两个有序数组/链表的合并 <br></li>\\n<li>指向相同序列: 快排的双坑法, KMP, 链表判环 <br></li>\\n</ol>\\n<p>核心思想: <br>\\n利用某些性质，只枚举O(n)个状态 <br></p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">// 不用双指针，则O(n^2) &lt;br/&gt;</span>\\n<span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">&lt;</span>n<span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>i<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token operator\\">&lt;</span>br<span class=\\"token operator\\">/</span><span class=\\"token operator\\">&gt;</span>\\n\\t<span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> j<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> j<span class=\\"token operator\\">&lt;</span>n<span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>j<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token operator\\">&lt;</span>br<span class=\\"token operator\\">/</span><span class=\\"token operator\\">&gt;</span>\\n    \\t<span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span> <span class=\\"token operator\\">&lt;</span>br<span class=\\"token operator\\">/</span><span class=\\"token operator\\">&gt;</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">&lt;</span>br<span class=\\"token operator\\">/</span><span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">&lt;</span>br<span class=\\"token operator\\">/</span><span class=\\"token operator\\">&gt;</span>\\n\\n<span class=\\"token comment\\">// 用双指针，两个指针总共移动的次数不超过k*n，所以为O(n) &lt;br/&gt;</span>\\n<span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> j<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">&lt;</span>n<span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>i<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token operator\\">&lt;</span>br<span class=\\"token operator\\">/</span><span class=\\"token operator\\">&gt;</span>\\n\\t<span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>i <span class=\\"token operator\\">&lt;</span> j <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token function\\">check</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">,</span> j<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">++</span>j<span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">&lt;</span>br<span class=\\"token operator\\">/</span><span class=\\"token operator\\">&gt;</span>\\n    <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span> <span class=\\"token operator\\">&lt;</span>br<span class=\\"token operator\\">/</span><span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">&lt;</span>br<span class=\\"token operator\\">/</span><span class=\\"token operator\\">&gt;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
